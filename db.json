{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/alipay.jpg","path":"images/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1585977960000},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1585977960000},{"_id":"themes/next/_config.yml","hash":"67a79e4ff94c43f97b15fe8adfffb9af71b22dd7","modified":1586444311155},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1585977960000},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1585977960000},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1585977960000},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1585977960000},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1585977960000},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1585977960000},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1585977960000},{"_id":"themes/next/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1585977960000},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1585977960000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1585977960000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1585977960000},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1585977960000},{"_id":"themes/next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1585977960000},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1585977960000},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1585977960000},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1585977960000},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1585977960000},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1585977960000},{"_id":"themes/next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1585977960000},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1585977960000},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1585977960000},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1585977960000},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1585977960000},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1585977960000},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1585977960000},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1585977960000},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1585977960000},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1585977960000},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1585977960000},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1585977960000},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1585977960000},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1585977960000},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1585977960000},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1585977960000},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1585977960000},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1585977960000},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1585977960000},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1585977960000},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1585977960000},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1585977960000},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1585977960000},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1585977960000},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1585977960000},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1585977960000},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1585977960000},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1585977960000},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1585977960000},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1585977960000},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1585977960000},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1585977960000},{"_id":"themes/next/languages/tr.yml","hash":"fe793f4c2608e3f85f0b872fd0ac1fb93e6155e2","modified":1585977960000},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1585977960000},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1585977960000},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1585977960000},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1585977960000},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1585977960000},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1585977960000},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1585977960000},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1585977960000},{"_id":"source/tags/index.md","hash":"c341da44b688b419230122bf467180d8842de8aa","modified":1586418692481},{"_id":"source/_posts/TG1.md","hash":"d462aaf55e2c15396c46ee22c457fa7b40094bae","modified":1586418781893},{"_id":"source/_posts/JC2.md","hash":"5f07f74691715de1334a1ebe078b4ca563431677","modified":1586418777902},{"_id":"source/_posts/JC1.md","hash":"e2ef1190788293f6b5f5ca06d6194a3983c2f4e0","modified":1586435661804},{"_id":"source/_posts/Vector.md","hash":"33a410bbc3cef5ffae712b884c747b2dd2caee3c","modified":1586418792360},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1585977960000},{"_id":"source/_posts/归并排序逆序对-快读.md","hash":"b7ec882760d1b7e61666dcf5e92b094ef41913e6","modified":1586418759070},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1585977960000},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1585977960000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1585977960000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1585977960000},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1585977960000},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1585977960000},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1585977960000},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1585977960000},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1585977960000},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1585977960000},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1585977960000},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1585977960000},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1585977960000},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1585977960000},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1585977960000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1585977960000},{"_id":"themes/next/scripts/events/index.js","hash":"bf5e93f9209d111a014a7a6a17e86c05be552d13","modified":1585977960000},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1585977960000},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1585977960000},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1585977960000},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1585977960000},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1585977960000},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1585977960000},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1585977960000},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1585977960000},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1585977960000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1585977960000},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1585977960000},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1585977960000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1585977960000},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1585977960000},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1585977960000},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1585977960000},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1585977960000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1585977960000},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1585977960000},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1585977960000},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1585977960000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1585977960000},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1585977960000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1585977960000},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1585977960000},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1585977960000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1585977960000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1585977960000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1585977960000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1585977960000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1585977960000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1585977960000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1585977960000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1585977960000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1585977960000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1585977960000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1585977960000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1585977960000},{"_id":"themes/next/source/js/algolia-search.js","hash":"23cc3c013185eb97ef347c3b4c92d928f2f3398f","modified":1585977960000},{"_id":"themes/next/source/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1585977960000},{"_id":"themes/next/source/js/local-search.js","hash":"d6673063958127a03881dab2f0376a47f5e08a88","modified":1585977960000},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1585977960000},{"_id":"themes/next/source/js/next-boot.js","hash":"a22eeb6048ddd6b9224c8a671cbcfa303a2f7a1a","modified":1585977960000},{"_id":"themes/next/source/js/utils.js","hash":"91d174e12c61c332f3b06085d635c2b0f686a758","modified":1585977960000},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1585977960000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"700c3e7bd449bce51f6faee42c052e13ed5f8b3e","modified":1585977960000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1585977960000},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1585977960000},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1585977960000},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1585977960000},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1585977960000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1585977960000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1585977960000},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1585977960000},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1585977960000},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":1585977960000},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1585977960000},{"_id":"themes/next/source/images/alipay.jpg","hash":"79317511b3c1fffe307b4873c52e43281e836955","modified":1586396260736},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1585977960000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1585977960000},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1585977960000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1585977960000},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1585977960000},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1585977960000},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1585977960000},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1585977960000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1585977960000},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1585977960000},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1585977960000},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1585977960000},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1585977960000},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1585977960000},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1585977960000},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1585977960000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1585977960000},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1585977960000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1585977960000},{"_id":"themes/next/source/js/schemes/muse.js","hash":"47c4f60eb7f7dc3303e84914b611dc34827069e1","modified":1585977960000},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"3d9d3c14b77044d66be1898a9a934696e9127c82","modified":1585977960000},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1585977960000},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1585977960000},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1585977960000},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1585977960000},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1585977960000},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1585977960000},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1585977960000},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1585977960000},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1585977960000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1585977960000},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1585977960000},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1585977960000},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1585977960000},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1585977960000},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1585977960000},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1585977960000},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1585977960000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1585977960000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1585977960000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1585977960000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1585977960000},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1585977960000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1585977960000},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1585977960000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1585977960000},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1585977960000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1585977960000},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1585977960000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1585977960000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1585977960000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1585977960000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1585977960000},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1585977960000},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1585977960000},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1585977960000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1585977960000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1585977960000},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1585977960000},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1585977960000},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1585977960000},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1585977960000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1585977960000},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1585977960000},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1585977960000},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1585977960000},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1585977960000},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1585977960000},{"_id":"themes/next/source/images/wechatpay.jpg","hash":"e0b55e8621013a74240b0e608a4f31133d73ff76","modified":1586395307732},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1585977960000},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1585977960000},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"b3bea92eef0e1fe2e7e294dac2184d16b5b8d666","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1585977960000},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1585977960000},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1585977960000},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"eca4d80dd0df1c3b1bc06bd39e6a4bd6c56198df","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1585977960000},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1585977960000},{"_id":"public/atom.xml","hash":"cc45f631b91b5863ad4c905d773a691cdaaa061d","modified":1587204622101},{"_id":"public/tags/index.html","hash":"641b6d1147870011d716fffbbd51614165c06b05","modified":1587204622101},{"_id":"public/archives/index.html","hash":"0acb386c3f178d53d2d73ba16dd1d1347893c732","modified":1587204622101},{"_id":"public/archives/2020/index.html","hash":"b323aac8ce706c28680d1c8c5b00849d13d545dd","modified":1587204622101},{"_id":"public/archives/2020/04/index.html","hash":"0d2f350dac8a3047c5e5f13ff6e573b29854018e","modified":1587204622101},{"_id":"public/tags/洛谷笔记/index.html","hash":"c37882ac4184a3e70c603b7e5be65e6245d36ce4","modified":1587204622101},{"_id":"public/2020/04/09/Vector/index.html","hash":"8a2ea644683070ac2cd204c6678472e57c58f393","modified":1587204622101},{"_id":"public/2020/04/09/归并排序逆序对-快读/index.html","hash":"578b42c89bf692d173f721f59ff061342c2d4476","modified":1587204622101},{"_id":"public/2020/04/09/JC1/index.html","hash":"a7fac5b0a0e81b42b380f60c4489a1b3fcb235dc","modified":1587204622101},{"_id":"public/2020/04/09/JC2/index.html","hash":"61c349ac3ac816e4f026128c314188fb8db777db","modified":1587204622101},{"_id":"public/2020/04/09/TG1/index.html","hash":"57b70fc6c34186b8928221a65107917069e5e546","modified":1587204622101},{"_id":"public/index.html","hash":"e422dd613c060b29c07c57b93df2aebb633c0c02","modified":1587204622101},{"_id":"public/tags/心得分享/index.html","hash":"9539d711692ed0a17365904e56bb6c2db83c9dc1","modified":1587204622101},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1587204622101},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1587204622101},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1587204622101},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1587204622101},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1587204622101},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1587204622101},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1587204622101},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1587204622101},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1587204622101},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1587204622101},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1587204622101},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1587204622101},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1587204622101},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1587204622101},{"_id":"public/images/alipay.jpg","hash":"79317511b3c1fffe307b4873c52e43281e836955","modified":1587204622101},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1587204622101},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1587204622101},{"_id":"public/js/local-search.js","hash":"d6673063958127a03881dab2f0376a47f5e08a88","modified":1587204622101},{"_id":"public/js/algolia-search.js","hash":"23cc3c013185eb97ef347c3b4c92d928f2f3398f","modified":1587204622101},{"_id":"public/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1587204622101},{"_id":"public/js/next-boot.js","hash":"a22eeb6048ddd6b9224c8a671cbcfa303a2f7a1a","modified":1587204622101},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1587204622101},{"_id":"public/js/utils.js","hash":"91d174e12c61c332f3b06085d635c2b0f686a758","modified":1587204622101},{"_id":"public/js/schemes/muse.js","hash":"47c4f60eb7f7dc3303e84914b611dc34827069e1","modified":1587204622101},{"_id":"public/js/schemes/pisces.js","hash":"3d9d3c14b77044d66be1898a9a934696e9127c82","modified":1587204622101},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1587204622101},{"_id":"public/css/main.css","hash":"b1225f9105c42e9ca417879e9870900f7b186345","modified":1587204622101},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1587204622101},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1587204622101},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1587204622101},{"_id":"public/images/wechatpay.jpg","hash":"e0b55e8621013a74240b0e608a4f31133d73ff76","modified":1587204622101}],"Category":[],"Data":[],"Page":[{"title":"标签列表（可以评论说想要添加什么哦~）","date":"2014-12-22T04:39:04.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签列表（可以评论说想要添加什么哦~）\ndate: 2014-12-22 12:39:04\ntype: \"tags\"\n---","updated":"2020-04-09T07:51:32.481Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck95gnh4j00005cvf39uegfj8","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"TG1 基础数据结构","mathjax":true,"_content":"\n<style>\nbody\n{\n\tfont-family:\"Ubuntu Mono\";\n}\n</style>\n> 约定：本文的下标从1开始，代码尽量从1开始（我在努力习惯），一般使用$\\LaTeX$美化\n\n\n这一节主要介绍了一些基础的数据结构 ~~（废话）~~，前缀和，差分，二分查找，离散化，ST表，线段树等。\n\n来给大家一一介绍一下\n<!--more-->\n\n# <center>前缀和</center>\n\n\n## 求解问题:\n\n给你一个数组$a$，$n$次询问，每次输入$l,r$,求$\\sum\\limits_{i=l}^ra[i]$ ~~(就是a[l...r]的和)~~。\n## 基本思想:\n\n计算数组$b$，对于每一个$b[i]$,值就是$\\sum\\limits_{j=1}^ia[j]$.\n对于每次的l,r询问，答案就是$b[r]-b[l-1]$.\n\n&emsp;问题来了：如何快速计算$b?$\n\n```cpp\nfor(int i = 1;i <= n;i++)\n\tb[i] = a[i] + b[i-1];\n```\n&emsp;我们只需要将前缀和累加即可。\n\n&emsp;如果我们不需要原来的$a$了，这样写代码可以减少内存的浪费 ~~（别和我扯空间复杂度）~~,\n$\\ \\ \\ \\text{\\color{red}注意,a[0]一定要=0！}$\n```cpp\nfor(int i = 1;i <= n;i++)\n\ta[i] += a[i-1];\n```\n# <center>差分</center>\n## 求解问题:\n&emsp;给定一个数组$a$，$n$次操作,每次给定$l,r,v$,使区间a[l,r]都加上v.输出最后的数组\n\n\n差分其实就是前缀和的逆运算（可以这样理解），计算差分和计算前缀和一样简单：\n$$\n\\\\ \\color{red}{\\text{注意，像有损前缀和一样的，for语句要倒着写！}}\\\\\n\\color{black}\n\\text{为啥呢？请看下面这个：}\\\\\na={1,9,2,6,1,8,1,7}\\\\\n\\text{我们手玩是这样的（也就是无损的）}\nb={1,8,-7,4,-5,7,-7,6}\\\\\n\\text{但是如果正着减的话，就会变成这样：}\\\\\na={1,8,-6,12,-12,20,-19,26}\\\\\n$$\n1. 无损\n&emsp;\n```cpp\nfor(int i = 1;i <= n;i++)\n\tb[i] = a[i] - a[i-1];\n```\n2. 有损\n&emsp;\n```cpp\nfor(int i = n;i;i--)\n\tb[i] -= b[i - 1];\n```\n\n# <center>二分查找</center>\n## 求解问题\n求函数零点。\n## 实现\n`upper_bound`和`lower_bound`\n\n\n~~非常的简单~~\n\n# <center>离散化</center>\n## 求解问题\n&emsp;当数很大的时候，我们往往不能直接拿来存数组，这就是离散化的思想了。\n## 实现\n### 三部曲\n1. sort\n2. unique\n3. lower_bound 或者 upper_bound\n## 例题：\n[![](https://img2018.cnblogs.com/blog/1653262/202003/1653262-20200301214437378-935270780.png '点击进入原题')](https://www.luogu.com.cn/problem/P2070)\n\n其实道理是非常简单的，唯一的问题就是数据范围非常的大，导致无法直接计算。怎么办？\n这时就可以运用离散化的思想了。\n\n>但是，当我们再细细看题的时候： Bessie在她的行走中最远到达距起始点1,000,000,000个单位长度。<br/>我的天！！！这个天才Bessie走这么远，我们要是乖乖开数组的话空间会不够的！！！这时我们又可以从什么方向入手呢？<br/>我们回到我们一开始进行模拟的步骤，如果我们进行以下的移动的话会很简单： 3 R 2 L 3 R\n>|  0   |  1   |  2   |  3   |  4   |\n>| :--: | :--: | :--: | :--: | :--: |\n>|  1   |  2   |  2   |  2   |  1   |\n>（第一行是位置，第二行是经过次数）但如果变成这样会很麻烦： 1000000 R 500000 L 1000000 R\n>More Actions。。。这个要是要写表格的话会死人的吧；但是这简单来写的话是不是这样呢？\n>| 。。。这个要是要写表格的话会死人的吧；但是这简单来写的话是不是这样呢？ |    0 |    1 |    2 |    3 |    4 |    5 |    6 |    7 |    8 | 9    |\n>| -----------------------------------------------------------: | ---: | ---: | ---: | ---: | ---: | ---: | ---: | ---: | ---: | :--- |\n>||                                                            1 |    1 |    3 |    3 |    3 |    3 |    1 |    1 |    0 |    0 |      |\n>\n>| 要是再简单点呢? |    0 |    1 |    2 |    3 |\n>| --------------: | ---: | ---: | ---: | ---: |\n>|                 |    1 |    3 |    3 |    1 |\n>\n><p align=\"right\"><a href=\"https://www.luogu.com.cn/blog/uiievoli/solution-p2070\">出处</a></p>\n\n为了锻炼读者的代码阅读能力 ~~（懒）~~,这个代码不添加任何注释。\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nconst int maxn =  2000010;\nint a[maxn],b[maxn],c[maxn],n,sum,ans;\nint o;char p;\nvoid Paint(int ll,int rr)\n{\n\tint l = lower_bound(b,b+n+1,ll)-b;\n\tint r = lower_bound(b,b+n+1,rr)-b;\n\tif(l>r)swap(l,r);\n\tc[l]++;c[r]--;\n}\nint main(void)\n{\n\tscanf(\"%d\",&n);\n\tfor(int i = 1;i <= n;i++)\n\t{\n\t\tcin>>a[i]>>p;\n\t\tif(p == 'L')a[i]=-a[i];\n\t\tb[i] = b[i-1] + a[i];\n\t}\n\tsort(b,b+n+1);\n\tint m = unique(b,b+n+1) - b;\n\tfor(int i = 1;i <= n;i++)\n\t{\n\t\tPaint(sum,sum+a[i]);\n\t\tsum+=a[i];\n\t}\n\tsum = c[0];\n\tfor(int i = 1;i<m;i++)\n\t{\n\t\tif(sum > 1)ans+=b[i]-b[i-1];\n\t\tsum+=c[i];\n\t}\n\tcout<<ans<<endl;\n}\n```\n## 总结\n离散化，说白了，就是把大数化小数的过程。\n# <center>树状数组</center>\n## 先看一道题:\n[![](https://img2018.cnblogs.com/blog/1653262/202003/1653262-20200301221224487-999278411.png '树状数组模板题（名字大艹')](https://www.luogu.com.cn/problem/P3372)\n## $\\mathrm{Quz1:何为树状数组}$？\n就是没有右儿子的线段树。\n## 处理的问题：\n1. 单点修改，区间查询（比较特殊，最小值：（只能查找左端点在1或者右端点在n的），和：无限制）\n2. 区间修改，单点查询（~~基础~~差分技巧）\n   保存差分数组，利用差分技巧加减区间，单点查询就是查前缀和。\n3. 区间修改，区间查询（~~高级~~差分技巧）\n   维护两个数组，一个$tree1$保存$tree[i]\\times (i-1)$，一个正常保存差分。\n   答案就是：$(y \\times ask(tree,y)-(x-1)\\times ask(tree,x-1))-(ask(tree1,y)-ask(tree1,x-1))$\n   具体的过程建议自己手推一下，加强记忆哦！\n## 实现:\n1. lowbit\n```cpp\n#define lowbit(n) (n&-n)\n```\n2. 单点修改\n```cpp\nvoid add(int pos,int val)\n{\n\tfor(int i = pos;i <= n;i+=i&(-i))\n\t\ttr[i]+=val;\n}\nint ask(int *tr,int m)\n{\n\tint ans=0;\n\tfor(int i = m;i>0;i-=i&(-i))\n\t\tans+=tr[i];\n\treturn ans;\n}\n```\n3. 区间\n```cpp\nvoid add(int *tr,int pos,int val)\n{\n\tfor(int i = pos;i <= n;i+=i&(-i))\n\t\ttr[i]+=val;\n}\nvoid add_ran(int l,int r,int val)\n{\n\tadd(t1,l,val);\n\tadd(t1,r+1,-val);\n\tadd(t2,l,val*(l-1));\n\tadd(t2,r+1,-val*r);\n}\nint ask(int *tr,int m)\n{\n\tint ans=0;\n\tfor(int i = m;i>0;i-=i&(-i))\n\t\tans+=tr[i];\n\treturn ans;\n}\nint sum(int r)\n{\n\treturn r*ask(t1,r)-ask(t2,r);\n}\nint get_ran(int l,int r)\n{\n\treturn sum(r)-sum(l-1);\n}\n```\n\n##### 这时候我们已经可以完美的解决问题了，就是：\n```cpp\n//注意要开ll哦！\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\nusing namespace std;\nconst long long maxn = 100010;\nlong long n,m,t,l,r,val;//n个元素,m个询问.\nlong long a,b;\nlong long t1[maxn],t2[maxn];\nvoid add(long long *tr,long long pos,long long val)\n{\n\tfor(long long i = pos;i <= n;i+=i&(-i))\n\t\ttr[i]+=val;\n}\nvoid add_ran(long long l,long long r,long long val)\n{\n\tadd(t1,l,val);\n\tadd(t1,r+1,-val);\n\tadd(t2,l,val*(l-1));\n\tadd(t2,r+1,-val*r);\n}\nlong long ask(long long *tr,long long m)\n{\n\tlong long ans=0;\n\tfor(long long i = m;i>0;i-=i&(-i))\n\t\tans+=tr[i];\n\treturn ans;\n}\nlong long sum(long long r)\n{\n\treturn r*ask(t1,r)-ask(t2,r);\n}\nlong long get_ran(long long l,long long r)\n{\n\treturn sum(r)-sum(l-1);\n}\nint main(void)\n{\n\tscanf(\"%lld%lld\",&n,&m);\n\tfor(long long i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%lld\",&a);\n\t\tb=a-b;//差分.\n\t\tadd(t1,i,b);\n\t\tadd(t2,i,b*(i-1));\n\t\tb=a;\n\t}\n\tfor(long long i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%lld\",&t);\n\t\tif(t == 1)\n\t\t{\n\t\t\tscanf(\"%lld%lld%lld\",&l,&r,&val);\n\t\t\tadd_ran(l,r,val);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tscanf(\"%lld%lld\",&l,&r);\n\t\t\tprintf(\"%lld\\n\",get_ran(l,r));\n\t\t}\n\t}\n\treturn 0;\n}\n```\n","source":"_posts/TG1.md","raw":"---\ntitle: TG1 基础数据结构\ntags: 洛谷笔记\nmathjax: true\n---\n\n<style>\nbody\n{\n\tfont-family:\"Ubuntu Mono\";\n}\n</style>\n> 约定：本文的下标从1开始，代码尽量从1开始（我在努力习惯），一般使用$\\LaTeX$美化\n\n\n这一节主要介绍了一些基础的数据结构 ~~（废话）~~，前缀和，差分，二分查找，离散化，ST表，线段树等。\n\n来给大家一一介绍一下\n<!--more-->\n\n# <center>前缀和</center>\n\n\n## 求解问题:\n\n给你一个数组$a$，$n$次询问，每次输入$l,r$,求$\\sum\\limits_{i=l}^ra[i]$ ~~(就是a[l...r]的和)~~。\n## 基本思想:\n\n计算数组$b$，对于每一个$b[i]$,值就是$\\sum\\limits_{j=1}^ia[j]$.\n对于每次的l,r询问，答案就是$b[r]-b[l-1]$.\n\n&emsp;问题来了：如何快速计算$b?$\n\n```cpp\nfor(int i = 1;i <= n;i++)\n\tb[i] = a[i] + b[i-1];\n```\n&emsp;我们只需要将前缀和累加即可。\n\n&emsp;如果我们不需要原来的$a$了，这样写代码可以减少内存的浪费 ~~（别和我扯空间复杂度）~~,\n$\\ \\ \\ \\text{\\color{red}注意,a[0]一定要=0！}$\n```cpp\nfor(int i = 1;i <= n;i++)\n\ta[i] += a[i-1];\n```\n# <center>差分</center>\n## 求解问题:\n&emsp;给定一个数组$a$，$n$次操作,每次给定$l,r,v$,使区间a[l,r]都加上v.输出最后的数组\n\n\n差分其实就是前缀和的逆运算（可以这样理解），计算差分和计算前缀和一样简单：\n$$\n\\\\ \\color{red}{\\text{注意，像有损前缀和一样的，for语句要倒着写！}}\\\\\n\\color{black}\n\\text{为啥呢？请看下面这个：}\\\\\na={1,9,2,6,1,8,1,7}\\\\\n\\text{我们手玩是这样的（也就是无损的）}\nb={1,8,-7,4,-5,7,-7,6}\\\\\n\\text{但是如果正着减的话，就会变成这样：}\\\\\na={1,8,-6,12,-12,20,-19,26}\\\\\n$$\n1. 无损\n&emsp;\n```cpp\nfor(int i = 1;i <= n;i++)\n\tb[i] = a[i] - a[i-1];\n```\n2. 有损\n&emsp;\n```cpp\nfor(int i = n;i;i--)\n\tb[i] -= b[i - 1];\n```\n\n# <center>二分查找</center>\n## 求解问题\n求函数零点。\n## 实现\n`upper_bound`和`lower_bound`\n\n\n~~非常的简单~~\n\n# <center>离散化</center>\n## 求解问题\n&emsp;当数很大的时候，我们往往不能直接拿来存数组，这就是离散化的思想了。\n## 实现\n### 三部曲\n1. sort\n2. unique\n3. lower_bound 或者 upper_bound\n## 例题：\n[![](https://img2018.cnblogs.com/blog/1653262/202003/1653262-20200301214437378-935270780.png '点击进入原题')](https://www.luogu.com.cn/problem/P2070)\n\n其实道理是非常简单的，唯一的问题就是数据范围非常的大，导致无法直接计算。怎么办？\n这时就可以运用离散化的思想了。\n\n>但是，当我们再细细看题的时候： Bessie在她的行走中最远到达距起始点1,000,000,000个单位长度。<br/>我的天！！！这个天才Bessie走这么远，我们要是乖乖开数组的话空间会不够的！！！这时我们又可以从什么方向入手呢？<br/>我们回到我们一开始进行模拟的步骤，如果我们进行以下的移动的话会很简单： 3 R 2 L 3 R\n>|  0   |  1   |  2   |  3   |  4   |\n>| :--: | :--: | :--: | :--: | :--: |\n>|  1   |  2   |  2   |  2   |  1   |\n>（第一行是位置，第二行是经过次数）但如果变成这样会很麻烦： 1000000 R 500000 L 1000000 R\n>More Actions。。。这个要是要写表格的话会死人的吧；但是这简单来写的话是不是这样呢？\n>| 。。。这个要是要写表格的话会死人的吧；但是这简单来写的话是不是这样呢？ |    0 |    1 |    2 |    3 |    4 |    5 |    6 |    7 |    8 | 9    |\n>| -----------------------------------------------------------: | ---: | ---: | ---: | ---: | ---: | ---: | ---: | ---: | ---: | :--- |\n>||                                                            1 |    1 |    3 |    3 |    3 |    3 |    1 |    1 |    0 |    0 |      |\n>\n>| 要是再简单点呢? |    0 |    1 |    2 |    3 |\n>| --------------: | ---: | ---: | ---: | ---: |\n>|                 |    1 |    3 |    3 |    1 |\n>\n><p align=\"right\"><a href=\"https://www.luogu.com.cn/blog/uiievoli/solution-p2070\">出处</a></p>\n\n为了锻炼读者的代码阅读能力 ~~（懒）~~,这个代码不添加任何注释。\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nconst int maxn =  2000010;\nint a[maxn],b[maxn],c[maxn],n,sum,ans;\nint o;char p;\nvoid Paint(int ll,int rr)\n{\n\tint l = lower_bound(b,b+n+1,ll)-b;\n\tint r = lower_bound(b,b+n+1,rr)-b;\n\tif(l>r)swap(l,r);\n\tc[l]++;c[r]--;\n}\nint main(void)\n{\n\tscanf(\"%d\",&n);\n\tfor(int i = 1;i <= n;i++)\n\t{\n\t\tcin>>a[i]>>p;\n\t\tif(p == 'L')a[i]=-a[i];\n\t\tb[i] = b[i-1] + a[i];\n\t}\n\tsort(b,b+n+1);\n\tint m = unique(b,b+n+1) - b;\n\tfor(int i = 1;i <= n;i++)\n\t{\n\t\tPaint(sum,sum+a[i]);\n\t\tsum+=a[i];\n\t}\n\tsum = c[0];\n\tfor(int i = 1;i<m;i++)\n\t{\n\t\tif(sum > 1)ans+=b[i]-b[i-1];\n\t\tsum+=c[i];\n\t}\n\tcout<<ans<<endl;\n}\n```\n## 总结\n离散化，说白了，就是把大数化小数的过程。\n# <center>树状数组</center>\n## 先看一道题:\n[![](https://img2018.cnblogs.com/blog/1653262/202003/1653262-20200301221224487-999278411.png '树状数组模板题（名字大艹')](https://www.luogu.com.cn/problem/P3372)\n## $\\mathrm{Quz1:何为树状数组}$？\n就是没有右儿子的线段树。\n## 处理的问题：\n1. 单点修改，区间查询（比较特殊，最小值：（只能查找左端点在1或者右端点在n的），和：无限制）\n2. 区间修改，单点查询（~~基础~~差分技巧）\n   保存差分数组，利用差分技巧加减区间，单点查询就是查前缀和。\n3. 区间修改，区间查询（~~高级~~差分技巧）\n   维护两个数组，一个$tree1$保存$tree[i]\\times (i-1)$，一个正常保存差分。\n   答案就是：$(y \\times ask(tree,y)-(x-1)\\times ask(tree,x-1))-(ask(tree1,y)-ask(tree1,x-1))$\n   具体的过程建议自己手推一下，加强记忆哦！\n## 实现:\n1. lowbit\n```cpp\n#define lowbit(n) (n&-n)\n```\n2. 单点修改\n```cpp\nvoid add(int pos,int val)\n{\n\tfor(int i = pos;i <= n;i+=i&(-i))\n\t\ttr[i]+=val;\n}\nint ask(int *tr,int m)\n{\n\tint ans=0;\n\tfor(int i = m;i>0;i-=i&(-i))\n\t\tans+=tr[i];\n\treturn ans;\n}\n```\n3. 区间\n```cpp\nvoid add(int *tr,int pos,int val)\n{\n\tfor(int i = pos;i <= n;i+=i&(-i))\n\t\ttr[i]+=val;\n}\nvoid add_ran(int l,int r,int val)\n{\n\tadd(t1,l,val);\n\tadd(t1,r+1,-val);\n\tadd(t2,l,val*(l-1));\n\tadd(t2,r+1,-val*r);\n}\nint ask(int *tr,int m)\n{\n\tint ans=0;\n\tfor(int i = m;i>0;i-=i&(-i))\n\t\tans+=tr[i];\n\treturn ans;\n}\nint sum(int r)\n{\n\treturn r*ask(t1,r)-ask(t2,r);\n}\nint get_ran(int l,int r)\n{\n\treturn sum(r)-sum(l-1);\n}\n```\n\n##### 这时候我们已经可以完美的解决问题了，就是：\n```cpp\n//注意要开ll哦！\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\nusing namespace std;\nconst long long maxn = 100010;\nlong long n,m,t,l,r,val;//n个元素,m个询问.\nlong long a,b;\nlong long t1[maxn],t2[maxn];\nvoid add(long long *tr,long long pos,long long val)\n{\n\tfor(long long i = pos;i <= n;i+=i&(-i))\n\t\ttr[i]+=val;\n}\nvoid add_ran(long long l,long long r,long long val)\n{\n\tadd(t1,l,val);\n\tadd(t1,r+1,-val);\n\tadd(t2,l,val*(l-1));\n\tadd(t2,r+1,-val*r);\n}\nlong long ask(long long *tr,long long m)\n{\n\tlong long ans=0;\n\tfor(long long i = m;i>0;i-=i&(-i))\n\t\tans+=tr[i];\n\treturn ans;\n}\nlong long sum(long long r)\n{\n\treturn r*ask(t1,r)-ask(t2,r);\n}\nlong long get_ran(long long l,long long r)\n{\n\treturn sum(r)-sum(l-1);\n}\nint main(void)\n{\n\tscanf(\"%lld%lld\",&n,&m);\n\tfor(long long i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%lld\",&a);\n\t\tb=a-b;//差分.\n\t\tadd(t1,i,b);\n\t\tadd(t2,i,b*(i-1));\n\t\tb=a;\n\t}\n\tfor(long long i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%lld\",&t);\n\t\tif(t == 1)\n\t\t{\n\t\t\tscanf(\"%lld%lld%lld\",&l,&r,&val);\n\t\t\tadd_ran(l,r,val);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tscanf(\"%lld%lld\",&l,&r);\n\t\t\tprintf(\"%lld\\n\",get_ran(l,r));\n\t\t}\n\t}\n\treturn 0;\n}\n```\n","slug":"TG1","published":1,"date":"2020-04-09T05:41:52.781Z","updated":"2020-04-09T07:53:01.893Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck95gnh4n00015cvfay8t2wwg","content":"<style>\nbody\n{\n\tfont-family:\"Ubuntu Mono\";\n}\n</style>\n<blockquote>\n<p>约定：本文的下标从1开始，代码尽量从1开始（我在努力习惯），一般使用<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mtext>LaTeX</mtext></mrow><annotation encoding=\"application/x-tex\">\\LaTeX</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.89883em;vertical-align:-0.2155em;\"></span><span class=\"mord text\"><span class=\"mord textrm\">L</span><span class=\"mspace\" style=\"margin-right:-0.36em;\"></span><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.68333em;\"><span style=\"top:-2.904999em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"mord text\"><span class=\"mord textrm sizing reset-size6 size3\">A</span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:-0.15em;\"></span><span class=\"mord text\"><span class=\"mord textrm\">T</span><span class=\"mspace\" style=\"margin-right:-0.1667em;\"></span><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.46782999999999997em;\"><span style=\"top:-2.7845em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord text\"><span class=\"mord textrm\">E</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2155em;\"><span></span></span></span></span><span class=\"mspace\" style=\"margin-right:-0.125em;\"></span><span class=\"mord textrm\">X</span></span></span></span></span></span>美化</p>\n</blockquote>\n<p>这一节主要介绍了一些基础的数据结构 <s>（废话）</s>，前缀和，差分，二分查找，离散化，ST表，线段树等。</p>\n<p>来给大家一一介绍一下</p>\n<a id=\"more\"></a>\n<h1 id=\"center前缀和center\"><a class=\"markdownIt-Anchor\" href=\"#center前缀和center\"></a> <center>前缀和</center></h1>\n<h2 id=\"求解问题\"><a class=\"markdownIt-Anchor\" href=\"#求解问题\"></a> 求解问题:</h2>\n<p>给你一个数组<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">a</span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>次询问，每次输入<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>l</mi><mo separator=\"true\">,</mo><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">l,r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span></span></span></span>,求<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mi>l</mi></mrow><mi>r</mi></msubsup><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\sum\\limits_{i=l}^ra[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.35351em;vertical-align:-1.002113em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.351397em;\"><span style=\"top:-2.097887em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.01968em;\">l</span></span></span></span><span style=\"top:-3.000005em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop op-symbol small-op\">∑</span></span></span><span style=\"top:-3.950005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.002113em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span> <s>(就是a[l…r]的和)</s>。</p>\n<h2 id=\"基本思想\"><a class=\"markdownIt-Anchor\" href=\"#基本思想\"></a> 基本思想:</h2>\n<p>计算数组<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">b</span></span></span></span>，对于每一个<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>b</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">b[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span>,值就是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>i</mi></msubsup><mi>a</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\sum\\limits_{j=1}^ia[j]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.625446em;vertical-align:-1.113777em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5116690000000004em;\"><span style=\"top:-2.122331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.0000050000000003em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop op-symbol small-op\">∑</span></span></span><span style=\"top:-3.950005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.113777em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span></span></span></span>.<br />\n对于每次的l,r询问，答案就是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>b</mi><mo stretchy=\"false\">[</mo><mi>r</mi><mo stretchy=\"false\">]</mo><mo>−</mo><mi>b</mi><mo stretchy=\"false\">[</mo><mi>l</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">b[r]-b[l-1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span>.</p>\n<p> 问题来了：如何快速计算<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>b</mi><mo stretchy=\"false\">?</mo></mrow><annotation encoding=\"application/x-tex\">b?</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mclose\">?</span></span></span></span></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">\tb[i] = a[i] + b[i<span class=\"number\">-1</span>];</span><br></pre></td></tr></table></figure>\n<p> 我们只需要将前缀和累加即可。</p>\n<p> 如果我们不需要原来的<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">a</span></span></span></span>了，这样写代码可以减少内存的浪费 <s>（别和我扯空间复杂度）</s>,<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mtext>   </mtext><mstyle mathcolor=\"red\"><mtext>注意,a[0]一定要=0！</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\ \\ \\ \\text{\\color{red}注意,a[0]一定要=0！}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mspace\"> </span><span class=\"mspace\"> </span><span class=\"mspace\"> </span><span class=\"mord text\"><span class=\"mord cjk_fallback\" style=\"color:red;\">注意</span><span class=\"mord\" style=\"color:red;\">,a[0]</span><span class=\"mord cjk_fallback\" style=\"color:red;\">一定要</span><span class=\"mord\" style=\"color:red;\">=0</span><span class=\"mord cjk_fallback\" style=\"color:red;\">！</span></span></span></span></span></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">\ta[i] += a[i<span class=\"number\">-1</span>];</span><br></pre></td></tr></table></figure>\n<h1 id=\"center差分center\"><a class=\"markdownIt-Anchor\" href=\"#center差分center\"></a> <center>差分</center></h1>\n<h2 id=\"求解问题-2\"><a class=\"markdownIt-Anchor\" href=\"#求解问题-2\"></a> 求解问题:</h2>\n<p> 给定一个数组<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">a</span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>次操作,每次给定<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>l</mi><mo separator=\"true\">,</mo><mi>r</mi><mo separator=\"true\">,</mo><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">l,r,v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span></span></span></span>,使区间a[l,r]都加上v.输出最后的数组</p>\n<p>差分其实就是前缀和的逆运算（可以这样理解），计算差分和计算前缀和一样简单：</p>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mspace linebreak=\"newline\"></mspace><mstyle mathcolor=\"red\"><mtext>注意，像有损前缀和一样的，for语句要倒着写！</mtext><mspace linebreak=\"newline\"></mspace><mstyle mathcolor=\"black\"><mtext>为啥呢？请看下面这个：</mtext><mspace linebreak=\"newline\"></mspace><mi>a</mi><mo>=</mo><mrow><mn>1</mn><mo separator=\"true\">,</mo><mn>9</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>6</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>8</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>7</mn></mrow><mspace linebreak=\"newline\"></mspace><mtext>我们手玩是这样的（也就是无损的）</mtext><mi>b</mi><mo>=</mo><mrow><mn>1</mn><mo separator=\"true\">,</mo><mn>8</mn><mo separator=\"true\">,</mo><mo>−</mo><mn>7</mn><mo separator=\"true\">,</mo><mn>4</mn><mo separator=\"true\">,</mo><mo>−</mo><mn>5</mn><mo separator=\"true\">,</mo><mn>7</mn><mo separator=\"true\">,</mo><mo>−</mo><mn>7</mn><mo separator=\"true\">,</mo><mn>6</mn></mrow><mspace linebreak=\"newline\"></mspace><mtext>但是如果正着减的话，就会变成这样：</mtext><mspace linebreak=\"newline\"></mspace><mi>a</mi><mo>=</mo><mrow><mn>1</mn><mo separator=\"true\">,</mo><mn>8</mn><mo separator=\"true\">,</mo><mo>−</mo><mn>6</mn><mo separator=\"true\">,</mo><mn>12</mn><mo separator=\"true\">,</mo><mo>−</mo><mn>12</mn><mo separator=\"true\">,</mo><mn>20</mn><mo separator=\"true\">,</mo><mo>−</mo><mn>19</mn><mo separator=\"true\">,</mo><mn>26</mn></mrow><mspace linebreak=\"newline\"></mspace></mstyle></mstyle></mrow><annotation encoding=\"application/x-tex\">\\\\ \\color{red}{\\text{注意，像有损前缀和一样的，for语句要倒着写！}}\\\\\n\\color{black}\n\\text{为啥呢？请看下面这个：}\\\\\na={1,9,2,6,1,8,1,7}\\\\\n\\text{我们手玩是这样的（也就是无损的）}\nb={1,8,-7,4,-5,7,-7,6}\\\\\n\\text{但是如果正着减的话，就会变成这样：}\\\\\na={1,8,-6,12,-12,20,-19,26}\\\\\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\" style=\"color:red;\"><span class=\"mord text\" style=\"color:red;\"><span class=\"mord cjk_fallback\" style=\"color:red;\">注意，像有损前缀和一样的，</span><span class=\"mord\" style=\"color:red;\">for</span><span class=\"mord cjk_fallback\" style=\"color:red;\">语句要倒着写！</span></span></span></span><span class=\"mspace newline\" style=\"color:red;\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord text\" style=\"color:black;\"><span class=\"mord cjk_fallback\" style=\"color:black;\">为啥呢？请看下面这个：</span></span></span><span class=\"mspace newline\" style=\"color:black;\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"color:black;\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\" style=\"color:black;\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\" style=\"color:black;\"><span class=\"mord\" style=\"color:black;\">1</span><span class=\"mpunct\" style=\"color:black;\">,</span><span class=\"mspace\" style=\"color:black;margin-right:0.16666666666666666em;\"></span><span class=\"mord\" style=\"color:black;\">9</span><span class=\"mpunct\" style=\"color:black;\">,</span><span class=\"mspace\" style=\"color:black;margin-right:0.16666666666666666em;\"></span><span class=\"mord\" style=\"color:black;\">2</span><span class=\"mpunct\" style=\"color:black;\">,</span><span class=\"mspace\" style=\"color:black;margin-right:0.16666666666666666em;\"></span><span class=\"mord\" style=\"color:black;\">6</span><span class=\"mpunct\" style=\"color:black;\">,</span><span class=\"mspace\" style=\"color:black;margin-right:0.16666666666666666em;\"></span><span class=\"mord\" style=\"color:black;\">1</span><span class=\"mpunct\" style=\"color:black;\">,</span><span class=\"mspace\" style=\"color:black;margin-right:0.16666666666666666em;\"></span><span class=\"mord\" style=\"color:black;\">8</span><span class=\"mpunct\" style=\"color:black;\">,</span><span class=\"mspace\" style=\"color:black;margin-right:0.16666666666666666em;\"></span><span class=\"mord\" style=\"color:black;\">1</span><span class=\"mpunct\" style=\"color:black;\">,</span><span class=\"mspace\" style=\"color:black;margin-right:0.16666666666666666em;\"></span><span class=\"mord\" style=\"color:black;\">7</span></span></span><span class=\"mspace newline\" style=\"color:black;\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord text\" style=\"color:black;\"><span class=\"mord cjk_fallback\" style=\"color:black;\">我们手玩是这样的（也就是无损的）</span></span><span class=\"mord mathdefault\" style=\"color:black;\">b</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\" style=\"color:black;\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\" style=\"color:black;\"><span class=\"mord\" style=\"color:black;\">1</span><span class=\"mpunct\" style=\"color:black;\">,</span><span class=\"mspace\" style=\"color:black;margin-right:0.16666666666666666em;\"></span><span class=\"mord\" style=\"color:black;\">8</span><span class=\"mpunct\" style=\"color:black;\">,</span><span class=\"mspace\" style=\"color:black;margin-right:0.16666666666666666em;\"></span><span class=\"mord\" style=\"color:black;\">−</span><span class=\"mord\" style=\"color:black;\">7</span><span class=\"mpunct\" style=\"color:black;\">,</span><span class=\"mspace\" style=\"color:black;margin-right:0.16666666666666666em;\"></span><span class=\"mord\" style=\"color:black;\">4</span><span class=\"mpunct\" style=\"color:black;\">,</span><span class=\"mspace\" style=\"color:black;margin-right:0.16666666666666666em;\"></span><span class=\"mord\" style=\"color:black;\">−</span><span class=\"mord\" style=\"color:black;\">5</span><span class=\"mpunct\" style=\"color:black;\">,</span><span class=\"mspace\" style=\"color:black;margin-right:0.16666666666666666em;\"></span><span class=\"mord\" style=\"color:black;\">7</span><span class=\"mpunct\" style=\"color:black;\">,</span><span class=\"mspace\" style=\"color:black;margin-right:0.16666666666666666em;\"></span><span class=\"mord\" style=\"color:black;\">−</span><span class=\"mord\" style=\"color:black;\">7</span><span class=\"mpunct\" style=\"color:black;\">,</span><span class=\"mspace\" style=\"color:black;margin-right:0.16666666666666666em;\"></span><span class=\"mord\" style=\"color:black;\">6</span></span></span><span class=\"mspace newline\" style=\"color:black;\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord text\" style=\"color:black;\"><span class=\"mord cjk_fallback\" style=\"color:black;\">但是如果正着减的话，就会变成这样：</span></span></span><span class=\"mspace newline\" style=\"color:black;\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"color:black;\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\" style=\"color:black;\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\" style=\"color:black;\"><span class=\"mord\" style=\"color:black;\">1</span><span class=\"mpunct\" style=\"color:black;\">,</span><span class=\"mspace\" style=\"color:black;margin-right:0.16666666666666666em;\"></span><span class=\"mord\" style=\"color:black;\">8</span><span class=\"mpunct\" style=\"color:black;\">,</span><span class=\"mspace\" style=\"color:black;margin-right:0.16666666666666666em;\"></span><span class=\"mord\" style=\"color:black;\">−</span><span class=\"mord\" style=\"color:black;\">6</span><span class=\"mpunct\" style=\"color:black;\">,</span><span class=\"mspace\" style=\"color:black;margin-right:0.16666666666666666em;\"></span><span class=\"mord\" style=\"color:black;\">1</span><span class=\"mord\" style=\"color:black;\">2</span><span class=\"mpunct\" style=\"color:black;\">,</span><span class=\"mspace\" style=\"color:black;margin-right:0.16666666666666666em;\"></span><span class=\"mord\" style=\"color:black;\">−</span><span class=\"mord\" style=\"color:black;\">1</span><span class=\"mord\" style=\"color:black;\">2</span><span class=\"mpunct\" style=\"color:black;\">,</span><span class=\"mspace\" style=\"color:black;margin-right:0.16666666666666666em;\"></span><span class=\"mord\" style=\"color:black;\">2</span><span class=\"mord\" style=\"color:black;\">0</span><span class=\"mpunct\" style=\"color:black;\">,</span><span class=\"mspace\" style=\"color:black;margin-right:0.16666666666666666em;\"></span><span class=\"mord\" style=\"color:black;\">−</span><span class=\"mord\" style=\"color:black;\">1</span><span class=\"mord\" style=\"color:black;\">9</span><span class=\"mpunct\" style=\"color:black;\">,</span><span class=\"mspace\" style=\"color:black;margin-right:0.16666666666666666em;\"></span><span class=\"mord\" style=\"color:black;\">2</span><span class=\"mord\" style=\"color:black;\">6</span></span></span><span class=\"mspace newline\" style=\"color:black;\"></span></span></span></span></p>\n<ol>\n<li>无损<br />\n </li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">\tb[i] = a[i] - a[i<span class=\"number\">-1</span>];</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>有损<br />\n </li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = n;i;i--)</span><br><span class=\"line\">\tb[i] -= b[i - <span class=\"number\">1</span>];</span><br></pre></td></tr></table></figure>\n<h1 id=\"center二分查找center\"><a class=\"markdownIt-Anchor\" href=\"#center二分查找center\"></a> <center>二分查找</center></h1>\n<h2 id=\"求解问题-3\"><a class=\"markdownIt-Anchor\" href=\"#求解问题-3\"></a> 求解问题</h2>\n<p>求函数零点。</p>\n<h2 id=\"实现\"><a class=\"markdownIt-Anchor\" href=\"#实现\"></a> 实现</h2>\n<p><code>upper_bound</code>和<code>lower_bound</code></p>\n<p><s>非常的简单</s></p>\n<h1 id=\"center离散化center\"><a class=\"markdownIt-Anchor\" href=\"#center离散化center\"></a> <center>离散化</center></h1>\n<h2 id=\"求解问题-4\"><a class=\"markdownIt-Anchor\" href=\"#求解问题-4\"></a> 求解问题</h2>\n<p> 当数很大的时候，我们往往不能直接拿来存数组，这就是离散化的思想了。</p>\n<h2 id=\"实现-2\"><a class=\"markdownIt-Anchor\" href=\"#实现-2\"></a> 实现</h2>\n<h3 id=\"三部曲\"><a class=\"markdownIt-Anchor\" href=\"#三部曲\"></a> 三部曲</h3>\n<ol>\n<li>sort</li>\n<li>unique</li>\n<li>lower_bound 或者 upper_bound</li>\n</ol>\n<h2 id=\"例题\"><a class=\"markdownIt-Anchor\" href=\"#例题\"></a> 例题：</h2>\n<p><a href=\"https://www.luogu.com.cn/problem/P2070\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img2018.cnblogs.com/blog/1653262/202003/1653262-20200301214437378-935270780.png\" alt=\"\" title=\"点击进入原题\" /></a></p>\n<p>其实道理是非常简单的，唯一的问题就是数据范围非常的大，导致无法直接计算。怎么办？<br />\n这时就可以运用离散化的思想了。</p>\n<blockquote>\n<p>但是，当我们再细细看题的时候： Bessie在她的行走中最远到达距起始点1,000,000,000个单位长度。<br/>我的天！！！这个天才Bessie走这么远，我们要是乖乖开数组的话空间会不够的！！！这时我们又可以从什么方向入手呢？<br/>我们回到我们一开始进行模拟的步骤，如果我们进行以下的移动的话会很简单： 3 R 2 L 3 R</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">0</th>\n<th style=\"text-align:center\">1</th>\n<th style=\"text-align:center\">2</th>\n<th style=\"text-align:center\">3</th>\n<th style=\"text-align:center\">4</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n</tbody>\n</table>\n<p>（第一行是位置，第二行是经过次数）但如果变成这样会很麻烦： 1000000 R 500000 L 1000000 R<br />\nMore Actions。。。这个要是要写表格的话会死人的吧；但是这简单来写的话是不是这样呢？</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:right\">。。。这个要是要写表格的话会死人的吧；但是这简单来写的话是不是这样呢？</th>\n<th style=\"text-align:right\">0</th>\n<th style=\"text-align:right\">1</th>\n<th style=\"text-align:right\">2</th>\n<th style=\"text-align:right\">3</th>\n<th style=\"text-align:right\">4</th>\n<th style=\"text-align:right\">5</th>\n<th style=\"text-align:right\">6</th>\n<th style=\"text-align:right\">7</th>\n<th style=\"text-align:right\">8</th>\n<th style=\"text-align:left\">9</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:right\"></td>\n<td style=\"text-align:right\">1</td>\n<td style=\"text-align:right\">1</td>\n<td style=\"text-align:right\">3</td>\n<td style=\"text-align:right\">3</td>\n<td style=\"text-align:right\">3</td>\n<td style=\"text-align:right\">3</td>\n<td style=\"text-align:right\">1</td>\n<td style=\"text-align:right\">1</td>\n<td style=\"text-align:right\">0</td>\n<td style=\"text-align:left\">0</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:right\">要是再简单点呢?</th>\n<th style=\"text-align:right\">0</th>\n<th style=\"text-align:right\">1</th>\n<th style=\"text-align:right\">2</th>\n<th style=\"text-align:right\">3</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:right\"></td>\n<td style=\"text-align:right\">1</td>\n<td style=\"text-align:right\">3</td>\n<td style=\"text-align:right\">3</td>\n<td style=\"text-align:right\">1</td>\n</tr>\n</tbody>\n</table>\n<p align=\"right\"><a href=\"https://www.luogu.com.cn/blog/uiievoli/solution-p2070\" target=\"_blank\" rel=\"noopener\">出处</a></p>\n</blockquote>\n<p>为了锻炼读者的代码阅读能力 <s>（懒）</s>,这个代码不添加任何注释。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn =  <span class=\"number\">2000010</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a[maxn],b[maxn],c[maxn],n,sum,ans;</span><br><span class=\"line\"><span class=\"keyword\">int</span> o;<span class=\"keyword\">char</span> p;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Paint</span><span class=\"params\">(<span class=\"keyword\">int</span> ll,<span class=\"keyword\">int</span> rr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> l = lower_bound(b,b+n+<span class=\"number\">1</span>,ll)-b;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> r = lower_bound(b,b+n+<span class=\"number\">1</span>,rr)-b;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(l&gt;r)swap(l,r);</span><br><span class=\"line\">\tc[l]++;c[r]--;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;a[i]&gt;&gt;p;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(p == <span class=\"string\">'L'</span>)a[i]=-a[i];</span><br><span class=\"line\">\t\tb[i] = b[i<span class=\"number\">-1</span>] + a[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tsort(b,b+n+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m = unique(b,b+n+<span class=\"number\">1</span>) - b;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tPaint(sum,sum+a[i]);</span><br><span class=\"line\">\t\tsum+=a[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tsum = c[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i&lt;m;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(sum &gt; <span class=\"number\">1</span>)ans+=b[i]-b[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">\t\tsum+=c[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;ans&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h2>\n<p>离散化，说白了，就是把大数化小数的过程。</p>\n<h1 id=\"center树状数组center\"><a class=\"markdownIt-Anchor\" href=\"#center树状数组center\"></a> <center>树状数组</center></h1>\n<h2 id=\"先看一道题\"><a class=\"markdownIt-Anchor\" href=\"#先看一道题\"></a> 先看一道题:</h2>\n<p><a href=\"https://www.luogu.com.cn/problem/P3372\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img2018.cnblogs.com/blog/1653262/202003/1653262-20200301221224487-999278411.png\" alt=\"\" title=\"树状数组模板题（名字大艹\" /></a></p>\n<h2 id=\"mathrmquz1何为树状数组\"><a class=\"markdownIt-Anchor\" href=\"#mathrmquz1何为树状数组\"></a> <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">Q</mi><mi mathvariant=\"normal\">u</mi><mi mathvariant=\"normal\">z</mi><mn>1</mn><mo>:</mo><mi mathvariant=\"normal\">何</mi><mi mathvariant=\"normal\">为</mi><mi mathvariant=\"normal\">树</mi><mi mathvariant=\"normal\">状</mi><mi mathvariant=\"normal\">数</mi><mi mathvariant=\"normal\">组</mi></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Quz1:何为树状数组}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Q</span><span class=\"mord mathrm\">u</span><span class=\"mord mathrm\">z</span><span class=\"mord mathrm\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord cjk_fallback\">何</span><span class=\"mord cjk_fallback\">为</span><span class=\"mord cjk_fallback\">树</span><span class=\"mord cjk_fallback\">状</span><span class=\"mord cjk_fallback\">数</span><span class=\"mord cjk_fallback\">组</span></span></span></span></span>？</h2>\n<p>就是没有右儿子的线段树。</p>\n<h2 id=\"处理的问题\"><a class=\"markdownIt-Anchor\" href=\"#处理的问题\"></a> 处理的问题：</h2>\n<ol>\n<li>单点修改，区间查询（比较特殊，最小值：（只能查找左端点在1或者右端点在n的），和：无限制）</li>\n<li>区间修改，单点查询（<s>基础</s>差分技巧）<br />\n保存差分数组，利用差分技巧加减区间，单点查询就是查前缀和。</li>\n<li>区间修改，区间查询（<s>高级</s>差分技巧）<br />\n维护两个数组，一个<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">tree1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">e</span><span class=\"mord\">1</span></span></span></span>保存<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>×</mo><mo stretchy=\"false\">(</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">tree[i]\\times (i-1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">e</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>，一个正常保存差分。<br />\n答案就是：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mi>y</mi><mo>×</mo><mi>a</mi><mi>s</mi><mi>k</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>×</mo><mi>a</mi><mi>s</mi><mi>k</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mo separator=\"true\">,</mo><mi>x</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>−</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mi>s</mi><mi>k</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mn>1</mn><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mi>a</mi><mi>s</mi><mi>k</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mn>1</mn><mo separator=\"true\">,</mo><mi>x</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(y \\times ask(tree,y)-(x-1)\\times ask(tree,x-1))-(ask(tree1,y)-ask(tree1,x-1))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">e</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">e</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">e</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">e</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span><br />\n具体的过程建议自己手推一下，加强记忆哦！</li>\n</ol>\n<h2 id=\"实现-3\"><a class=\"markdownIt-Anchor\" href=\"#实现-3\"></a> 实现:</h2>\n<ol>\n<li>lowbit</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lowbit(n) (n&amp;-n)</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>单点修改</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> pos,<span class=\"keyword\">int</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = pos;i &lt;= n;i+=i&amp;(-i))</span><br><span class=\"line\">\t\ttr[i]+=val;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">ask</span><span class=\"params\">(<span class=\"keyword\">int</span> *tr,<span class=\"keyword\">int</span> m)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = m;i&gt;<span class=\"number\">0</span>;i-=i&amp;(-i))</span><br><span class=\"line\">\t\tans+=tr[i];</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>区间</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> *tr,<span class=\"keyword\">int</span> pos,<span class=\"keyword\">int</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = pos;i &lt;= n;i+=i&amp;(-i))</span><br><span class=\"line\">\t\ttr[i]+=val;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add_ran</span><span class=\"params\">(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tadd(t1,l,val);</span><br><span class=\"line\">\tadd(t1,r+<span class=\"number\">1</span>,-val);</span><br><span class=\"line\">\tadd(t2,l,val*(l<span class=\"number\">-1</span>));</span><br><span class=\"line\">\tadd(t2,r+<span class=\"number\">1</span>,-val*r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">ask</span><span class=\"params\">(<span class=\"keyword\">int</span> *tr,<span class=\"keyword\">int</span> m)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = m;i&gt;<span class=\"number\">0</span>;i-=i&amp;(-i))</span><br><span class=\"line\">\t\tans+=tr[i];</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> r*ask(t1,r)-ask(t2,r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">get_ran</span><span class=\"params\">(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum(r)-sum(l<span class=\"number\">-1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"这时候我们已经可以完美的解决问题了就是\"><a class=\"markdownIt-Anchor\" href=\"#这时候我们已经可以完美的解决问题了就是\"></a> 这时候我们已经可以完美的解决问题了，就是：</h5>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//注意要开ll哦！</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> maxn = <span class=\"number\">100010</span>;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> n,m,t,l,r,val;<span class=\"comment\">//n个元素,m个询问.</span></span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> a,b;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> t1[maxn],t2[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> *tr,<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> pos,<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> i = pos;i &lt;= n;i+=i&amp;(-i))</span><br><span class=\"line\">\t\ttr[i]+=val;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add_ran</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> l,<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> r,<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tadd(t1,l,val);</span><br><span class=\"line\">\tadd(t1,r+<span class=\"number\">1</span>,-val);</span><br><span class=\"line\">\tadd(t2,l,val*(l<span class=\"number\">-1</span>));</span><br><span class=\"line\">\tadd(t2,r+<span class=\"number\">1</span>,-val*r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">ask</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> *tr,<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> m)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> i = m;i&gt;<span class=\"number\">0</span>;i-=i&amp;(-i))</span><br><span class=\"line\">\t\tans+=tr[i];</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> r*ask(t1,r)-ask(t2,r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">get_ran</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> l,<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum(r)-sum(l<span class=\"number\">-1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lld%lld\"</span>,&amp;n,&amp;m);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lld\"</span>,&amp;a);</span><br><span class=\"line\">\t\tb=a-b;<span class=\"comment\">//差分.</span></span><br><span class=\"line\">\t\tadd(t1,i,b);</span><br><span class=\"line\">\t\tadd(t2,i,b*(i<span class=\"number\">-1</span>));</span><br><span class=\"line\">\t\tb=a;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> i=<span class=\"number\">1</span>;i&lt;=m;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lld\"</span>,&amp;t);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(t == <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lld%lld%lld\"</span>,&amp;l,&amp;r,&amp;val);</span><br><span class=\"line\">\t\t\tadd_ran(l,r,val);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lld%lld\"</span>,&amp;l,&amp;r);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>,get_ran(l,r));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<style>\nbody\n{\n\tfont-family:\"Ubuntu Mono\";\n}\n</style>\n<blockquote>\n<p>约定：本文的下标从1开始，代码尽量从1开始（我在努力习惯），一般使用<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mtext>LaTeX</mtext></mrow><annotation encoding=\"application/x-tex\">\\LaTeX</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.89883em;vertical-align:-0.2155em;\"></span><span class=\"mord text\"><span class=\"mord textrm\">L</span><span class=\"mspace\" style=\"margin-right:-0.36em;\"></span><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.68333em;\"><span style=\"top:-2.904999em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"mord text\"><span class=\"mord textrm sizing reset-size6 size3\">A</span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:-0.15em;\"></span><span class=\"mord text\"><span class=\"mord textrm\">T</span><span class=\"mspace\" style=\"margin-right:-0.1667em;\"></span><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.46782999999999997em;\"><span style=\"top:-2.7845em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord text\"><span class=\"mord textrm\">E</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2155em;\"><span></span></span></span></span><span class=\"mspace\" style=\"margin-right:-0.125em;\"></span><span class=\"mord textrm\">X</span></span></span></span></span></span>美化</p>\n</blockquote>\n<p>这一节主要介绍了一些基础的数据结构 <s>（废话）</s>，前缀和，差分，二分查找，离散化，ST表，线段树等。</p>\n<p>来给大家一一介绍一下</p>","more":"<h1 id=\"center前缀和center\"><a class=\"markdownIt-Anchor\" href=\"#center前缀和center\"></a> <center>前缀和</center></h1>\n<h2 id=\"求解问题\"><a class=\"markdownIt-Anchor\" href=\"#求解问题\"></a> 求解问题:</h2>\n<p>给你一个数组<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">a</span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>次询问，每次输入<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>l</mi><mo separator=\"true\">,</mo><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">l,r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span></span></span></span>,求<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mi>l</mi></mrow><mi>r</mi></msubsup><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\sum\\limits_{i=l}^ra[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.35351em;vertical-align:-1.002113em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.351397em;\"><span style=\"top:-2.097887em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.01968em;\">l</span></span></span></span><span style=\"top:-3.000005em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop op-symbol small-op\">∑</span></span></span><span style=\"top:-3.950005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.002113em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span> <s>(就是a[l…r]的和)</s>。</p>\n<h2 id=\"基本思想\"><a class=\"markdownIt-Anchor\" href=\"#基本思想\"></a> 基本思想:</h2>\n<p>计算数组<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">b</span></span></span></span>，对于每一个<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>b</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">b[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span>,值就是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>i</mi></msubsup><mi>a</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\sum\\limits_{j=1}^ia[j]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.625446em;vertical-align:-1.113777em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5116690000000004em;\"><span style=\"top:-2.122331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.0000050000000003em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop op-symbol small-op\">∑</span></span></span><span style=\"top:-3.950005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.113777em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span></span></span></span>.<br />\n对于每次的l,r询问，答案就是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>b</mi><mo stretchy=\"false\">[</mo><mi>r</mi><mo stretchy=\"false\">]</mo><mo>−</mo><mi>b</mi><mo stretchy=\"false\">[</mo><mi>l</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">b[r]-b[l-1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span>.</p>\n<p> 问题来了：如何快速计算<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>b</mi><mo stretchy=\"false\">?</mo></mrow><annotation encoding=\"application/x-tex\">b?</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mclose\">?</span></span></span></span></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">\tb[i] = a[i] + b[i<span class=\"number\">-1</span>];</span><br></pre></td></tr></table></figure>\n<p> 我们只需要将前缀和累加即可。</p>\n<p> 如果我们不需要原来的<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">a</span></span></span></span>了，这样写代码可以减少内存的浪费 <s>（别和我扯空间复杂度）</s>,<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mtext>   </mtext><mstyle mathcolor=\"red\"><mtext>注意,a[0]一定要=0！</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\ \\ \\ \\text{\\color{red}注意,a[0]一定要=0！}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mspace\"> </span><span class=\"mspace\"> </span><span class=\"mspace\"> </span><span class=\"mord text\"><span class=\"mord cjk_fallback\" style=\"color:red;\">注意</span><span class=\"mord\" style=\"color:red;\">,a[0]</span><span class=\"mord cjk_fallback\" style=\"color:red;\">一定要</span><span class=\"mord\" style=\"color:red;\">=0</span><span class=\"mord cjk_fallback\" style=\"color:red;\">！</span></span></span></span></span></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">\ta[i] += a[i<span class=\"number\">-1</span>];</span><br></pre></td></tr></table></figure>\n<h1 id=\"center差分center\"><a class=\"markdownIt-Anchor\" href=\"#center差分center\"></a> <center>差分</center></h1>\n<h2 id=\"求解问题-2\"><a class=\"markdownIt-Anchor\" href=\"#求解问题-2\"></a> 求解问题:</h2>\n<p> 给定一个数组<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">a</span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>次操作,每次给定<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>l</mi><mo separator=\"true\">,</mo><mi>r</mi><mo separator=\"true\">,</mo><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">l,r,v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span></span></span></span>,使区间a[l,r]都加上v.输出最后的数组</p>\n<p>差分其实就是前缀和的逆运算（可以这样理解），计算差分和计算前缀和一样简单：</p>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mspace linebreak=\"newline\"></mspace><mstyle mathcolor=\"red\"><mtext>注意，像有损前缀和一样的，for语句要倒着写！</mtext><mspace linebreak=\"newline\"></mspace><mstyle mathcolor=\"black\"><mtext>为啥呢？请看下面这个：</mtext><mspace linebreak=\"newline\"></mspace><mi>a</mi><mo>=</mo><mrow><mn>1</mn><mo separator=\"true\">,</mo><mn>9</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>6</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>8</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>7</mn></mrow><mspace linebreak=\"newline\"></mspace><mtext>我们手玩是这样的（也就是无损的）</mtext><mi>b</mi><mo>=</mo><mrow><mn>1</mn><mo separator=\"true\">,</mo><mn>8</mn><mo separator=\"true\">,</mo><mo>−</mo><mn>7</mn><mo separator=\"true\">,</mo><mn>4</mn><mo separator=\"true\">,</mo><mo>−</mo><mn>5</mn><mo separator=\"true\">,</mo><mn>7</mn><mo separator=\"true\">,</mo><mo>−</mo><mn>7</mn><mo separator=\"true\">,</mo><mn>6</mn></mrow><mspace linebreak=\"newline\"></mspace><mtext>但是如果正着减的话，就会变成这样：</mtext><mspace linebreak=\"newline\"></mspace><mi>a</mi><mo>=</mo><mrow><mn>1</mn><mo separator=\"true\">,</mo><mn>8</mn><mo separator=\"true\">,</mo><mo>−</mo><mn>6</mn><mo separator=\"true\">,</mo><mn>12</mn><mo separator=\"true\">,</mo><mo>−</mo><mn>12</mn><mo separator=\"true\">,</mo><mn>20</mn><mo separator=\"true\">,</mo><mo>−</mo><mn>19</mn><mo separator=\"true\">,</mo><mn>26</mn></mrow><mspace linebreak=\"newline\"></mspace></mstyle></mstyle></mrow><annotation encoding=\"application/x-tex\">\\\\ \\color{red}{\\text{注意，像有损前缀和一样的，for语句要倒着写！}}\\\\\n\\color{black}\n\\text{为啥呢？请看下面这个：}\\\\\na={1,9,2,6,1,8,1,7}\\\\\n\\text{我们手玩是这样的（也就是无损的）}\nb={1,8,-7,4,-5,7,-7,6}\\\\\n\\text{但是如果正着减的话，就会变成这样：}\\\\\na={1,8,-6,12,-12,20,-19,26}\\\\\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\" style=\"color:red;\"><span class=\"mord text\" style=\"color:red;\"><span class=\"mord cjk_fallback\" style=\"color:red;\">注意，像有损前缀和一样的，</span><span class=\"mord\" style=\"color:red;\">for</span><span class=\"mord cjk_fallback\" style=\"color:red;\">语句要倒着写！</span></span></span></span><span class=\"mspace newline\" style=\"color:red;\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord text\" style=\"color:black;\"><span class=\"mord cjk_fallback\" style=\"color:black;\">为啥呢？请看下面这个：</span></span></span><span class=\"mspace newline\" style=\"color:black;\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"color:black;\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\" style=\"color:black;\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\" style=\"color:black;\"><span class=\"mord\" style=\"color:black;\">1</span><span class=\"mpunct\" style=\"color:black;\">,</span><span class=\"mspace\" style=\"color:black;margin-right:0.16666666666666666em;\"></span><span class=\"mord\" style=\"color:black;\">9</span><span class=\"mpunct\" style=\"color:black;\">,</span><span class=\"mspace\" style=\"color:black;margin-right:0.16666666666666666em;\"></span><span class=\"mord\" style=\"color:black;\">2</span><span class=\"mpunct\" style=\"color:black;\">,</span><span class=\"mspace\" style=\"color:black;margin-right:0.16666666666666666em;\"></span><span class=\"mord\" style=\"color:black;\">6</span><span class=\"mpunct\" style=\"color:black;\">,</span><span class=\"mspace\" style=\"color:black;margin-right:0.16666666666666666em;\"></span><span class=\"mord\" style=\"color:black;\">1</span><span class=\"mpunct\" style=\"color:black;\">,</span><span class=\"mspace\" style=\"color:black;margin-right:0.16666666666666666em;\"></span><span class=\"mord\" style=\"color:black;\">8</span><span class=\"mpunct\" style=\"color:black;\">,</span><span class=\"mspace\" style=\"color:black;margin-right:0.16666666666666666em;\"></span><span class=\"mord\" style=\"color:black;\">1</span><span class=\"mpunct\" style=\"color:black;\">,</span><span class=\"mspace\" style=\"color:black;margin-right:0.16666666666666666em;\"></span><span class=\"mord\" style=\"color:black;\">7</span></span></span><span class=\"mspace newline\" style=\"color:black;\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord text\" style=\"color:black;\"><span class=\"mord cjk_fallback\" style=\"color:black;\">我们手玩是这样的（也就是无损的）</span></span><span class=\"mord mathdefault\" style=\"color:black;\">b</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\" style=\"color:black;\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\" style=\"color:black;\"><span class=\"mord\" style=\"color:black;\">1</span><span class=\"mpunct\" style=\"color:black;\">,</span><span class=\"mspace\" style=\"color:black;margin-right:0.16666666666666666em;\"></span><span class=\"mord\" style=\"color:black;\">8</span><span class=\"mpunct\" style=\"color:black;\">,</span><span class=\"mspace\" style=\"color:black;margin-right:0.16666666666666666em;\"></span><span class=\"mord\" style=\"color:black;\">−</span><span class=\"mord\" style=\"color:black;\">7</span><span class=\"mpunct\" style=\"color:black;\">,</span><span class=\"mspace\" style=\"color:black;margin-right:0.16666666666666666em;\"></span><span class=\"mord\" style=\"color:black;\">4</span><span class=\"mpunct\" style=\"color:black;\">,</span><span class=\"mspace\" style=\"color:black;margin-right:0.16666666666666666em;\"></span><span class=\"mord\" style=\"color:black;\">−</span><span class=\"mord\" style=\"color:black;\">5</span><span class=\"mpunct\" style=\"color:black;\">,</span><span class=\"mspace\" style=\"color:black;margin-right:0.16666666666666666em;\"></span><span class=\"mord\" style=\"color:black;\">7</span><span class=\"mpunct\" style=\"color:black;\">,</span><span class=\"mspace\" style=\"color:black;margin-right:0.16666666666666666em;\"></span><span class=\"mord\" style=\"color:black;\">−</span><span class=\"mord\" style=\"color:black;\">7</span><span class=\"mpunct\" style=\"color:black;\">,</span><span class=\"mspace\" style=\"color:black;margin-right:0.16666666666666666em;\"></span><span class=\"mord\" style=\"color:black;\">6</span></span></span><span class=\"mspace newline\" style=\"color:black;\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord text\" style=\"color:black;\"><span class=\"mord cjk_fallback\" style=\"color:black;\">但是如果正着减的话，就会变成这样：</span></span></span><span class=\"mspace newline\" style=\"color:black;\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"color:black;\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\" style=\"color:black;\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\" style=\"color:black;\"><span class=\"mord\" style=\"color:black;\">1</span><span class=\"mpunct\" style=\"color:black;\">,</span><span class=\"mspace\" style=\"color:black;margin-right:0.16666666666666666em;\"></span><span class=\"mord\" style=\"color:black;\">8</span><span class=\"mpunct\" style=\"color:black;\">,</span><span class=\"mspace\" style=\"color:black;margin-right:0.16666666666666666em;\"></span><span class=\"mord\" style=\"color:black;\">−</span><span class=\"mord\" style=\"color:black;\">6</span><span class=\"mpunct\" style=\"color:black;\">,</span><span class=\"mspace\" style=\"color:black;margin-right:0.16666666666666666em;\"></span><span class=\"mord\" style=\"color:black;\">1</span><span class=\"mord\" style=\"color:black;\">2</span><span class=\"mpunct\" style=\"color:black;\">,</span><span class=\"mspace\" style=\"color:black;margin-right:0.16666666666666666em;\"></span><span class=\"mord\" style=\"color:black;\">−</span><span class=\"mord\" style=\"color:black;\">1</span><span class=\"mord\" style=\"color:black;\">2</span><span class=\"mpunct\" style=\"color:black;\">,</span><span class=\"mspace\" style=\"color:black;margin-right:0.16666666666666666em;\"></span><span class=\"mord\" style=\"color:black;\">2</span><span class=\"mord\" style=\"color:black;\">0</span><span class=\"mpunct\" style=\"color:black;\">,</span><span class=\"mspace\" style=\"color:black;margin-right:0.16666666666666666em;\"></span><span class=\"mord\" style=\"color:black;\">−</span><span class=\"mord\" style=\"color:black;\">1</span><span class=\"mord\" style=\"color:black;\">9</span><span class=\"mpunct\" style=\"color:black;\">,</span><span class=\"mspace\" style=\"color:black;margin-right:0.16666666666666666em;\"></span><span class=\"mord\" style=\"color:black;\">2</span><span class=\"mord\" style=\"color:black;\">6</span></span></span><span class=\"mspace newline\" style=\"color:black;\"></span></span></span></span></p>\n<ol>\n<li>无损<br />\n </li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">\tb[i] = a[i] - a[i<span class=\"number\">-1</span>];</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>有损<br />\n </li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = n;i;i--)</span><br><span class=\"line\">\tb[i] -= b[i - <span class=\"number\">1</span>];</span><br></pre></td></tr></table></figure>\n<h1 id=\"center二分查找center\"><a class=\"markdownIt-Anchor\" href=\"#center二分查找center\"></a> <center>二分查找</center></h1>\n<h2 id=\"求解问题-3\"><a class=\"markdownIt-Anchor\" href=\"#求解问题-3\"></a> 求解问题</h2>\n<p>求函数零点。</p>\n<h2 id=\"实现\"><a class=\"markdownIt-Anchor\" href=\"#实现\"></a> 实现</h2>\n<p><code>upper_bound</code>和<code>lower_bound</code></p>\n<p><s>非常的简单</s></p>\n<h1 id=\"center离散化center\"><a class=\"markdownIt-Anchor\" href=\"#center离散化center\"></a> <center>离散化</center></h1>\n<h2 id=\"求解问题-4\"><a class=\"markdownIt-Anchor\" href=\"#求解问题-4\"></a> 求解问题</h2>\n<p> 当数很大的时候，我们往往不能直接拿来存数组，这就是离散化的思想了。</p>\n<h2 id=\"实现-2\"><a class=\"markdownIt-Anchor\" href=\"#实现-2\"></a> 实现</h2>\n<h3 id=\"三部曲\"><a class=\"markdownIt-Anchor\" href=\"#三部曲\"></a> 三部曲</h3>\n<ol>\n<li>sort</li>\n<li>unique</li>\n<li>lower_bound 或者 upper_bound</li>\n</ol>\n<h2 id=\"例题\"><a class=\"markdownIt-Anchor\" href=\"#例题\"></a> 例题：</h2>\n<p><a href=\"https://www.luogu.com.cn/problem/P2070\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img2018.cnblogs.com/blog/1653262/202003/1653262-20200301214437378-935270780.png\" alt=\"\" title=\"点击进入原题\" /></a></p>\n<p>其实道理是非常简单的，唯一的问题就是数据范围非常的大，导致无法直接计算。怎么办？<br />\n这时就可以运用离散化的思想了。</p>\n<blockquote>\n<p>但是，当我们再细细看题的时候： Bessie在她的行走中最远到达距起始点1,000,000,000个单位长度。<br/>我的天！！！这个天才Bessie走这么远，我们要是乖乖开数组的话空间会不够的！！！这时我们又可以从什么方向入手呢？<br/>我们回到我们一开始进行模拟的步骤，如果我们进行以下的移动的话会很简单： 3 R 2 L 3 R</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">0</th>\n<th style=\"text-align:center\">1</th>\n<th style=\"text-align:center\">2</th>\n<th style=\"text-align:center\">3</th>\n<th style=\"text-align:center\">4</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n</tbody>\n</table>\n<p>（第一行是位置，第二行是经过次数）但如果变成这样会很麻烦： 1000000 R 500000 L 1000000 R<br />\nMore Actions。。。这个要是要写表格的话会死人的吧；但是这简单来写的话是不是这样呢？</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:right\">。。。这个要是要写表格的话会死人的吧；但是这简单来写的话是不是这样呢？</th>\n<th style=\"text-align:right\">0</th>\n<th style=\"text-align:right\">1</th>\n<th style=\"text-align:right\">2</th>\n<th style=\"text-align:right\">3</th>\n<th style=\"text-align:right\">4</th>\n<th style=\"text-align:right\">5</th>\n<th style=\"text-align:right\">6</th>\n<th style=\"text-align:right\">7</th>\n<th style=\"text-align:right\">8</th>\n<th style=\"text-align:left\">9</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:right\"></td>\n<td style=\"text-align:right\">1</td>\n<td style=\"text-align:right\">1</td>\n<td style=\"text-align:right\">3</td>\n<td style=\"text-align:right\">3</td>\n<td style=\"text-align:right\">3</td>\n<td style=\"text-align:right\">3</td>\n<td style=\"text-align:right\">1</td>\n<td style=\"text-align:right\">1</td>\n<td style=\"text-align:right\">0</td>\n<td style=\"text-align:left\">0</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:right\">要是再简单点呢?</th>\n<th style=\"text-align:right\">0</th>\n<th style=\"text-align:right\">1</th>\n<th style=\"text-align:right\">2</th>\n<th style=\"text-align:right\">3</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:right\"></td>\n<td style=\"text-align:right\">1</td>\n<td style=\"text-align:right\">3</td>\n<td style=\"text-align:right\">3</td>\n<td style=\"text-align:right\">1</td>\n</tr>\n</tbody>\n</table>\n<p align=\"right\"><a href=\"https://www.luogu.com.cn/blog/uiievoli/solution-p2070\" target=\"_blank\" rel=\"noopener\">出处</a></p>\n</blockquote>\n<p>为了锻炼读者的代码阅读能力 <s>（懒）</s>,这个代码不添加任何注释。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn =  <span class=\"number\">2000010</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a[maxn],b[maxn],c[maxn],n,sum,ans;</span><br><span class=\"line\"><span class=\"keyword\">int</span> o;<span class=\"keyword\">char</span> p;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Paint</span><span class=\"params\">(<span class=\"keyword\">int</span> ll,<span class=\"keyword\">int</span> rr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> l = lower_bound(b,b+n+<span class=\"number\">1</span>,ll)-b;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> r = lower_bound(b,b+n+<span class=\"number\">1</span>,rr)-b;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(l&gt;r)swap(l,r);</span><br><span class=\"line\">\tc[l]++;c[r]--;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;a[i]&gt;&gt;p;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(p == <span class=\"string\">'L'</span>)a[i]=-a[i];</span><br><span class=\"line\">\t\tb[i] = b[i<span class=\"number\">-1</span>] + a[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tsort(b,b+n+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m = unique(b,b+n+<span class=\"number\">1</span>) - b;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tPaint(sum,sum+a[i]);</span><br><span class=\"line\">\t\tsum+=a[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tsum = c[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i&lt;m;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(sum &gt; <span class=\"number\">1</span>)ans+=b[i]-b[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">\t\tsum+=c[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;ans&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h2>\n<p>离散化，说白了，就是把大数化小数的过程。</p>\n<h1 id=\"center树状数组center\"><a class=\"markdownIt-Anchor\" href=\"#center树状数组center\"></a> <center>树状数组</center></h1>\n<h2 id=\"先看一道题\"><a class=\"markdownIt-Anchor\" href=\"#先看一道题\"></a> 先看一道题:</h2>\n<p><a href=\"https://www.luogu.com.cn/problem/P3372\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img2018.cnblogs.com/blog/1653262/202003/1653262-20200301221224487-999278411.png\" alt=\"\" title=\"树状数组模板题（名字大艹\" /></a></p>\n<h2 id=\"mathrmquz1何为树状数组\"><a class=\"markdownIt-Anchor\" href=\"#mathrmquz1何为树状数组\"></a> <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">Q</mi><mi mathvariant=\"normal\">u</mi><mi mathvariant=\"normal\">z</mi><mn>1</mn><mo>:</mo><mi mathvariant=\"normal\">何</mi><mi mathvariant=\"normal\">为</mi><mi mathvariant=\"normal\">树</mi><mi mathvariant=\"normal\">状</mi><mi mathvariant=\"normal\">数</mi><mi mathvariant=\"normal\">组</mi></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Quz1:何为树状数组}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Q</span><span class=\"mord mathrm\">u</span><span class=\"mord mathrm\">z</span><span class=\"mord mathrm\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord cjk_fallback\">何</span><span class=\"mord cjk_fallback\">为</span><span class=\"mord cjk_fallback\">树</span><span class=\"mord cjk_fallback\">状</span><span class=\"mord cjk_fallback\">数</span><span class=\"mord cjk_fallback\">组</span></span></span></span></span>？</h2>\n<p>就是没有右儿子的线段树。</p>\n<h2 id=\"处理的问题\"><a class=\"markdownIt-Anchor\" href=\"#处理的问题\"></a> 处理的问题：</h2>\n<ol>\n<li>单点修改，区间查询（比较特殊，最小值：（只能查找左端点在1或者右端点在n的），和：无限制）</li>\n<li>区间修改，单点查询（<s>基础</s>差分技巧）<br />\n保存差分数组，利用差分技巧加减区间，单点查询就是查前缀和。</li>\n<li>区间修改，区间查询（<s>高级</s>差分技巧）<br />\n维护两个数组，一个<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">tree1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">e</span><span class=\"mord\">1</span></span></span></span>保存<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>×</mo><mo stretchy=\"false\">(</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">tree[i]\\times (i-1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">e</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>，一个正常保存差分。<br />\n答案就是：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mi>y</mi><mo>×</mo><mi>a</mi><mi>s</mi><mi>k</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>×</mo><mi>a</mi><mi>s</mi><mi>k</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mo separator=\"true\">,</mo><mi>x</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>−</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mi>s</mi><mi>k</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mn>1</mn><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mi>a</mi><mi>s</mi><mi>k</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mn>1</mn><mo separator=\"true\">,</mo><mi>x</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(y \\times ask(tree,y)-(x-1)\\times ask(tree,x-1))-(ask(tree1,y)-ask(tree1,x-1))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">e</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">e</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">e</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">e</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span><br />\n具体的过程建议自己手推一下，加强记忆哦！</li>\n</ol>\n<h2 id=\"实现-3\"><a class=\"markdownIt-Anchor\" href=\"#实现-3\"></a> 实现:</h2>\n<ol>\n<li>lowbit</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lowbit(n) (n&amp;-n)</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>单点修改</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> pos,<span class=\"keyword\">int</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = pos;i &lt;= n;i+=i&amp;(-i))</span><br><span class=\"line\">\t\ttr[i]+=val;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">ask</span><span class=\"params\">(<span class=\"keyword\">int</span> *tr,<span class=\"keyword\">int</span> m)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = m;i&gt;<span class=\"number\">0</span>;i-=i&amp;(-i))</span><br><span class=\"line\">\t\tans+=tr[i];</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>区间</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> *tr,<span class=\"keyword\">int</span> pos,<span class=\"keyword\">int</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = pos;i &lt;= n;i+=i&amp;(-i))</span><br><span class=\"line\">\t\ttr[i]+=val;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add_ran</span><span class=\"params\">(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tadd(t1,l,val);</span><br><span class=\"line\">\tadd(t1,r+<span class=\"number\">1</span>,-val);</span><br><span class=\"line\">\tadd(t2,l,val*(l<span class=\"number\">-1</span>));</span><br><span class=\"line\">\tadd(t2,r+<span class=\"number\">1</span>,-val*r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">ask</span><span class=\"params\">(<span class=\"keyword\">int</span> *tr,<span class=\"keyword\">int</span> m)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = m;i&gt;<span class=\"number\">0</span>;i-=i&amp;(-i))</span><br><span class=\"line\">\t\tans+=tr[i];</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> r*ask(t1,r)-ask(t2,r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">get_ran</span><span class=\"params\">(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum(r)-sum(l<span class=\"number\">-1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"这时候我们已经可以完美的解决问题了就是\"><a class=\"markdownIt-Anchor\" href=\"#这时候我们已经可以完美的解决问题了就是\"></a> 这时候我们已经可以完美的解决问题了，就是：</h5>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//注意要开ll哦！</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> maxn = <span class=\"number\">100010</span>;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> n,m,t,l,r,val;<span class=\"comment\">//n个元素,m个询问.</span></span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> a,b;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> t1[maxn],t2[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> *tr,<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> pos,<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> i = pos;i &lt;= n;i+=i&amp;(-i))</span><br><span class=\"line\">\t\ttr[i]+=val;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add_ran</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> l,<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> r,<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tadd(t1,l,val);</span><br><span class=\"line\">\tadd(t1,r+<span class=\"number\">1</span>,-val);</span><br><span class=\"line\">\tadd(t2,l,val*(l<span class=\"number\">-1</span>));</span><br><span class=\"line\">\tadd(t2,r+<span class=\"number\">1</span>,-val*r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">ask</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> *tr,<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> m)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> i = m;i&gt;<span class=\"number\">0</span>;i-=i&amp;(-i))</span><br><span class=\"line\">\t\tans+=tr[i];</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> r*ask(t1,r)-ask(t2,r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">get_ran</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> l,<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum(r)-sum(l<span class=\"number\">-1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lld%lld\"</span>,&amp;n,&amp;m);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lld\"</span>,&amp;a);</span><br><span class=\"line\">\t\tb=a-b;<span class=\"comment\">//差分.</span></span><br><span class=\"line\">\t\tadd(t1,i,b);</span><br><span class=\"line\">\t\tadd(t2,i,b*(i<span class=\"number\">-1</span>));</span><br><span class=\"line\">\t\tb=a;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> i=<span class=\"number\">1</span>;i&lt;=m;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lld\"</span>,&amp;t);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(t == <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lld%lld%lld\"</span>,&amp;l,&amp;r,&amp;val);</span><br><span class=\"line\">\t\t\tadd_ran(l,r,val);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lld%lld\"</span>,&amp;l,&amp;r);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>,get_ran(l,r));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"JC2 递推，递归与分治","mathjax":true,"_content":"**递推，递归与分治**\n\n**递推**\n\n1.  什么是递推\n\n> 递推，就是从小的解开始，一步一步推到最优解的过程。\n\n2.  如何递推\n<!--more-->\n\n> 这就要看具体情况，想出递推式，然后一步一步递推即可。\n\n3.  递推如何应用\n\n> 讲这个之前，我们不妨先讲一讲递推如何具体实现。\n>\n> 第一步是先**初始化**。切记！\n>\n> 有两种表示方法：\n\n-   数组递推法，如 f\\[i\\] = f\\[i-1\\]+f\\[i-2\\];\n\n-   记忆化搜索，若冗余状态比较多则需要记忆化，否则直接调用即可。注意递归的结束，否则MLE或TLE后果自负。\n\n> 那么，什么是冗余状态呢？\n>\n> ![](https://tvax4.sinaimg.cn/large/006XR1Pfly1gdnip7eoy5j30m30e775x.jpg){width=\"5.768055555555556in\"\n> height=\"3.7069444444444444in\"}\n>\n> 这是一个关于f(5)的解答树，可以看见，红色的都是被重复计算的，很多节点被重复计算了多次，若数比较大，重复计算的可不止这几个，而是一颗巨大的子树。\n>\n> 那么，没有记忆化的f究竟有多慢呢？\n>\n> 我们可以做一个测试。\n>\n> 代码如下：\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdlib>\n#include<ctime>\nusing namespace std;\nint f(int i)\n{\n    if(i == 0)return 0;\n    if(i == 1)return 1;\n    return f(i-1)+f(i-2) % 233333333;\n}\nint main(int argc,char** argv)\n{\n    int i = atoi(argv[1]);\n    cout<<f(i)<<endl;\n    cout<<\"时间:\"<<clock()/double(CLOCKS_PER_SEC);\n}\n```\n \n1. ![](https://tva1.sinaimg.cn/large/006XR1Pfly1gdnip7mnotj30bb084ab5.jpg)![](https://tva4.sinaimg.cn/large/006XR1Pfly1gdnip7qj0bj303709gjsj.jpg)\n\n> 左图是笔者的vim截图，右图时代码在笔者机器上面的运行结果。\n>\n> 可以看出，速度的增长是指数级的。\n>\n>  \n>\n> 我们在计算时用数组记录已经算出的结果，就是记忆化搜索的核心思想。\n>\n> 但是，如果冗余状态比较少，或者没有，我们也可以不用记忆化。就像我们计算阶乘时，,很容易可以看出，每个状态只由前一个推出，所以，每个状态只被计算了一次。\n\n**递归**\n\n这个其实不用多说递归就是递推和回归，记忆化搜索就是递归的过程。\n\n**我们来看一个类似递归的故事：**\n\n1.  皇帝要计算f(5)（就是5!）.\n\n2.  皇帝问大臣:f(4)=?\n\n3.  大臣问师公:f(3)=?\n\n4.  师公问先生:f(2)=?\n\n5.  先生问小学生:f(1)=?\n\n6.  小学生口算:f(1)=1\n\n7.  先生口算:f(2)=2\n\n8.  师公口算:f(3)=6\n\n9.  大臣口算:f(4)=24\n\n10. 皇帝口算:f(5)=120\n\n皇帝满意了。\\\n虽然这个比喻不是特别恰当，但是也能说明一些事情。\n\n根据C++语言的特性，调用自己和调用其他函数并没有任何区别，都是压栈并修改当前代码行。\n","source":"_posts/JC2.md","raw":"---\ntitle: JC2 递推，递归与分治\ntags: 洛谷笔记\nmathjax: true\n---\n**递推，递归与分治**\n\n**递推**\n\n1.  什么是递推\n\n> 递推，就是从小的解开始，一步一步推到最优解的过程。\n\n2.  如何递推\n<!--more-->\n\n> 这就要看具体情况，想出递推式，然后一步一步递推即可。\n\n3.  递推如何应用\n\n> 讲这个之前，我们不妨先讲一讲递推如何具体实现。\n>\n> 第一步是先**初始化**。切记！\n>\n> 有两种表示方法：\n\n-   数组递推法，如 f\\[i\\] = f\\[i-1\\]+f\\[i-2\\];\n\n-   记忆化搜索，若冗余状态比较多则需要记忆化，否则直接调用即可。注意递归的结束，否则MLE或TLE后果自负。\n\n> 那么，什么是冗余状态呢？\n>\n> ![](https://tvax4.sinaimg.cn/large/006XR1Pfly1gdnip7eoy5j30m30e775x.jpg){width=\"5.768055555555556in\"\n> height=\"3.7069444444444444in\"}\n>\n> 这是一个关于f(5)的解答树，可以看见，红色的都是被重复计算的，很多节点被重复计算了多次，若数比较大，重复计算的可不止这几个，而是一颗巨大的子树。\n>\n> 那么，没有记忆化的f究竟有多慢呢？\n>\n> 我们可以做一个测试。\n>\n> 代码如下：\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdlib>\n#include<ctime>\nusing namespace std;\nint f(int i)\n{\n    if(i == 0)return 0;\n    if(i == 1)return 1;\n    return f(i-1)+f(i-2) % 233333333;\n}\nint main(int argc,char** argv)\n{\n    int i = atoi(argv[1]);\n    cout<<f(i)<<endl;\n    cout<<\"时间:\"<<clock()/double(CLOCKS_PER_SEC);\n}\n```\n \n1. ![](https://tva1.sinaimg.cn/large/006XR1Pfly1gdnip7mnotj30bb084ab5.jpg)![](https://tva4.sinaimg.cn/large/006XR1Pfly1gdnip7qj0bj303709gjsj.jpg)\n\n> 左图是笔者的vim截图，右图时代码在笔者机器上面的运行结果。\n>\n> 可以看出，速度的增长是指数级的。\n>\n>  \n>\n> 我们在计算时用数组记录已经算出的结果，就是记忆化搜索的核心思想。\n>\n> 但是，如果冗余状态比较少，或者没有，我们也可以不用记忆化。就像我们计算阶乘时，,很容易可以看出，每个状态只由前一个推出，所以，每个状态只被计算了一次。\n\n**递归**\n\n这个其实不用多说递归就是递推和回归，记忆化搜索就是递归的过程。\n\n**我们来看一个类似递归的故事：**\n\n1.  皇帝要计算f(5)（就是5!）.\n\n2.  皇帝问大臣:f(4)=?\n\n3.  大臣问师公:f(3)=?\n\n4.  师公问先生:f(2)=?\n\n5.  先生问小学生:f(1)=?\n\n6.  小学生口算:f(1)=1\n\n7.  先生口算:f(2)=2\n\n8.  师公口算:f(3)=6\n\n9.  大臣口算:f(4)=24\n\n10. 皇帝口算:f(5)=120\n\n皇帝满意了。\\\n虽然这个比喻不是特别恰当，但是也能说明一些事情。\n\n根据C++语言的特性，调用自己和调用其他函数并没有任何区别，都是压栈并修改当前代码行。\n","slug":"JC2","published":1,"date":"2020-04-09T06:54:10.982Z","updated":"2020-04-09T07:52:57.902Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck95gnh4q00025cvf87dthavi","content":"<p><strong>递推，递归与分治</strong></p>\n<p><strong>递推</strong></p>\n<ol>\n<li>什么是递推</li>\n</ol>\n<blockquote>\n<p>递推，就是从小的解开始，一步一步推到最优解的过程。</p>\n</blockquote>\n<ol start=\"2\">\n<li>如何递推</li>\n</ol>\n<a id=\"more\"></a>\n<blockquote>\n<p>这就要看具体情况，想出递推式，然后一步一步递推即可。</p>\n</blockquote>\n<ol start=\"3\">\n<li>递推如何应用</li>\n</ol>\n<blockquote>\n<p>讲这个之前，我们不妨先讲一讲递推如何具体实现。</p>\n<p>第一步是先<strong>初始化</strong>。切记！</p>\n<p>有两种表示方法：</p>\n</blockquote>\n<ul>\n<li>\n<p>数组递推法，如 f[i] = f[i-1]+f[i-2];</p>\n</li>\n<li>\n<p>记忆化搜索，若冗余状态比较多则需要记忆化，否则直接调用即可。注意递归的结束，否则MLE或TLE后果自负。</p>\n</li>\n</ul>\n<blockquote>\n<p>那么，什么是冗余状态呢？</p>\n<p><img src=\"https://tvax4.sinaimg.cn/large/006XR1Pfly1gdnip7eoy5j30m30e775x.jpg\" alt=\"\" />{width=“5.768055555555556in”<br />\nheight=“3.7069444444444444in”}</p>\n<p>这是一个关于f(5)的解答树，可以看见，红色的都是被重复计算的，很多节点被重复计算了多次，若数比较大，重复计算的可不止这几个，而是一颗巨大的子树。</p>\n<p>那么，没有记忆化的f究竟有多慢呢？</p>\n<p>我们可以做一个测试。</p>\n<p>代码如下：</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;ctime&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i == <span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i == <span class=\"number\">1</span>)<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f(i<span class=\"number\">-1</span>)+f(i<span class=\"number\">-2</span>) % <span class=\"number\">233333333</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc,<span class=\"keyword\">char</span>** argv)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = atoi(argv[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;f(i)&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"时间:\"</span>&lt;&lt;clock()/<span class=\"keyword\">double</span>(CLOCKS_PER_SEC);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p></p>\n<ol>\n<li><img src=\"https://tva1.sinaimg.cn/large/006XR1Pfly1gdnip7mnotj30bb084ab5.jpg\" alt=\"\" /><img src=\"https://tva4.sinaimg.cn/large/006XR1Pfly1gdnip7qj0bj303709gjsj.jpg\" alt=\"\" /></li>\n</ol>\n<blockquote>\n<p>左图是笔者的vim截图，右图时代码在笔者机器上面的运行结果。</p>\n<p>可以看出，速度的增长是指数级的。</p>\n<p></p>\n<p>我们在计算时用数组记录已经算出的结果，就是记忆化搜索的核心思想。</p>\n<p>但是，如果冗余状态比较少，或者没有，我们也可以不用记忆化。就像我们计算阶乘时，,很容易可以看出，每个状态只由前一个推出，所以，每个状态只被计算了一次。</p>\n</blockquote>\n<p><strong>递归</strong></p>\n<p>这个其实不用多说递归就是递推和回归，记忆化搜索就是递归的过程。</p>\n<p><strong>我们来看一个类似递归的故事：</strong></p>\n<ol>\n<li>\n<p>皇帝要计算f(5)（就是5!）.</p>\n</li>\n<li>\n<p>皇帝问大臣:f(4)=?</p>\n</li>\n<li>\n<p>大臣问师公:f(3)=?</p>\n</li>\n<li>\n<p>师公问先生:f(2)=?</p>\n</li>\n<li>\n<p>先生问小学生:f(1)=?</p>\n</li>\n<li>\n<p>小学生口算:f(1)=1</p>\n</li>\n<li>\n<p>先生口算:f(2)=2</p>\n</li>\n<li>\n<p>师公口算:f(3)=6</p>\n</li>\n<li>\n<p>大臣口算:f(4)=24</p>\n</li>\n<li>\n<p>皇帝口算:f(5)=120</p>\n</li>\n</ol>\n<p>皇帝满意了。<br />\n虽然这个比喻不是特别恰当，但是也能说明一些事情。</p>\n<p>根据C++语言的特性，调用自己和调用其他函数并没有任何区别，都是压栈并修改当前代码行。</p>\n","site":{"data":{}},"excerpt":"<p><strong>递推，递归与分治</strong></p>\n<p><strong>递推</strong></p>\n<ol>\n<li>什么是递推</li>\n</ol>\n<blockquote>\n<p>递推，就是从小的解开始，一步一步推到最优解的过程。</p>\n</blockquote>\n<ol start=\"2\">\n<li>如何递推</li>\n</ol>","more":"<blockquote>\n<p>这就要看具体情况，想出递推式，然后一步一步递推即可。</p>\n</blockquote>\n<ol start=\"3\">\n<li>递推如何应用</li>\n</ol>\n<blockquote>\n<p>讲这个之前，我们不妨先讲一讲递推如何具体实现。</p>\n<p>第一步是先<strong>初始化</strong>。切记！</p>\n<p>有两种表示方法：</p>\n</blockquote>\n<ul>\n<li>\n<p>数组递推法，如 f[i] = f[i-1]+f[i-2];</p>\n</li>\n<li>\n<p>记忆化搜索，若冗余状态比较多则需要记忆化，否则直接调用即可。注意递归的结束，否则MLE或TLE后果自负。</p>\n</li>\n</ul>\n<blockquote>\n<p>那么，什么是冗余状态呢？</p>\n<p><img src=\"https://tvax4.sinaimg.cn/large/006XR1Pfly1gdnip7eoy5j30m30e775x.jpg\" alt=\"\" />{width=“5.768055555555556in”<br />\nheight=“3.7069444444444444in”}</p>\n<p>这是一个关于f(5)的解答树，可以看见，红色的都是被重复计算的，很多节点被重复计算了多次，若数比较大，重复计算的可不止这几个，而是一颗巨大的子树。</p>\n<p>那么，没有记忆化的f究竟有多慢呢？</p>\n<p>我们可以做一个测试。</p>\n<p>代码如下：</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;ctime&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i == <span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i == <span class=\"number\">1</span>)<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f(i<span class=\"number\">-1</span>)+f(i<span class=\"number\">-2</span>) % <span class=\"number\">233333333</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc,<span class=\"keyword\">char</span>** argv)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = atoi(argv[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;f(i)&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"时间:\"</span>&lt;&lt;clock()/<span class=\"keyword\">double</span>(CLOCKS_PER_SEC);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p></p>\n<ol>\n<li><img src=\"https://tva1.sinaimg.cn/large/006XR1Pfly1gdnip7mnotj30bb084ab5.jpg\" alt=\"\" /><img src=\"https://tva4.sinaimg.cn/large/006XR1Pfly1gdnip7qj0bj303709gjsj.jpg\" alt=\"\" /></li>\n</ol>\n<blockquote>\n<p>左图是笔者的vim截图，右图时代码在笔者机器上面的运行结果。</p>\n<p>可以看出，速度的增长是指数级的。</p>\n<p></p>\n<p>我们在计算时用数组记录已经算出的结果，就是记忆化搜索的核心思想。</p>\n<p>但是，如果冗余状态比较少，或者没有，我们也可以不用记忆化。就像我们计算阶乘时，,很容易可以看出，每个状态只由前一个推出，所以，每个状态只被计算了一次。</p>\n</blockquote>\n<p><strong>递归</strong></p>\n<p>这个其实不用多说递归就是递推和回归，记忆化搜索就是递归的过程。</p>\n<p><strong>我们来看一个类似递归的故事：</strong></p>\n<ol>\n<li>\n<p>皇帝要计算f(5)（就是5!）.</p>\n</li>\n<li>\n<p>皇帝问大臣:f(4)=?</p>\n</li>\n<li>\n<p>大臣问师公:f(3)=?</p>\n</li>\n<li>\n<p>师公问先生:f(2)=?</p>\n</li>\n<li>\n<p>先生问小学生:f(1)=?</p>\n</li>\n<li>\n<p>小学生口算:f(1)=1</p>\n</li>\n<li>\n<p>先生口算:f(2)=2</p>\n</li>\n<li>\n<p>师公口算:f(3)=6</p>\n</li>\n<li>\n<p>大臣口算:f(4)=24</p>\n</li>\n<li>\n<p>皇帝口算:f(5)=120</p>\n</li>\n</ol>\n<p>皇帝满意了。<br />\n虽然这个比喻不是特别恰当，但是也能说明一些事情。</p>\n<p>根据C++语言的特性，调用自己和调用其他函数并没有任何区别，都是压栈并修改当前代码行。</p>"},{"title":"JC1 排序模拟枚举","mathjax":true,"_content":"\n# 1.排序模拟枚举\n## 复杂度\n\n* 一般（最坏）复杂度 ：记号为 O(……)\n    均摊复杂度 $\\qquad\\quad\\,$ ：记号为 Θ(……),但一般写成O(……)\n* 约定\n    1. 省略系数O(100n)=O(10n)=O($\\frac{1}{2}$n)=O(n).\n    2. log底数省略\n\n<!--more-->\n\n## 排序\n\n* 选择排序\n        这个大家都会，就不详细解释了 ~~（逃~~\n        \n![选择](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9mb3J1bS5taWFuYmFvYmFuLmNuL2RhdGEvYXR0YWNobWVudC9mb3J1bS8yMDE4MDMvMjAvMTQwMTU0ajBjaThuOW52dm4zNTNuMC5naWY '选择排序')\n\n* 插入排序\n\n![插入](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9mb3J1bS5taWFuYmFvYmFuLmNuL2RhdGEvYXR0YWNobWVudC9mb3J1bS8yMDE4MDMvMjAvMTQwMTU1aDBhdDEzMWZrejMzajFhZi5naWY '插入')\n\n\n* 冒泡排序\n\n\n ![冒泡](https://images2018.cnblogs.com/blog/1391679/201806/1391679-20180618163321525-1936669878.gif '冒泡排序')\n\n\n* 归并排序\n\n\n     详情请见[点我](https://www.cnblogs.com/lhy-cblog/p/merge-sort.html)\n        \n        \n![归并1](https://img2018.cnblogs.com/blog/1653262/202001/1653262-20200123085200050-668412306.png '归并1')\n\n![归并2](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9mb3J1bS5taWFuYmFvYmFuLmNuL2RhdGEvYXR0YWNobWVudC9mb3J1bS8yMDE4MDMvMjAvMTQwMTU3Z2tybmtrc3BwcG90b3Jrcy5naWY '归并2')\n\n```cpp\nvoid ms(int b, int e)\n{\n\tif(e-b <= 0) return ;\n\tint m = (b + e) / 2, p1 = b, p2 = m+1,   i = b;\n\tms(b, m); ms(m+1, e);\n\twhile(p1 <= m || p2 <= e)\n\t\tif(p2 > e || (p1 <= m && a[p1] <= a [p2]))\n\t\t\tt[i++] = a[p1++];\n\t\t\telse t[i++] = a[p2++];\n\tfor(i = b; i <= e; ++i) a[i] = t[i];\n}\n```\n\n\n* 快速排序\n\n```cpp\n void Sort(int l, int r)\n{\n\tint i  = l, j = r, x = a[(l + r)/ 2];\n\tdo{\n\t\twhile(a[i] < x) ++i; while(a[j] > x) --j;\n\t\tif(i <= j) swap(a[i++], a[j--]);\n\t}while(i < j);\n\tif(i < r) Sort(i, r); if(j > l) Sort(l, j);\n}\n```\n\n## 模拟\n模拟，顾名思义，就是题目让你干嘛你就干嘛。\n\n### 例题 校门外的树\n![](https://img2018.cnblogs.com/blog/1653262/202001/1653262-20200130133815952-2119019624.png)\n\n\n思路：可以建一个数组，保存地铁每一个位置的情况，每次输入l,r，就把这个数组[l,r]部分都变成1，最后再统计有多少0即可\n\n代码如下（勿喷）\n```cpp\n#include <iostream>\nusing namespace std;\nconst int maxn = 10010;\nint tree[maxn];\nint main(void)\n{\n\tint l,m,b,e,ans = 0;\n\tcin>>l>>m;\n\tfor(int i = 0;i < m;i++)\n\t{\n\t\tcin>>b>>e;\n\t\tfor(int j = b;j <= e;j++)\n\t\t\ttree[j] = 1;\n\t}\n\tfor(int i = 0;i <= l;i++)\n\t\tans+=!tree[i];\n\tcout<<ans;\n}\n```\n\n## 枚举\n枚举，顾名思义，就是把所有可能的情况都试一遍直到找到正确的答案。\n### 例题 P1219 八皇后    \n【题目描述】\n\n一个如下的 $6×6$ 的跳棋棋盘，有六个棋子被放置在棋盘上，使得每行、每列有且只有一个，每条对角线（包括两条主对角线的所有平行线）上至多有一个棋子。\n![](https://cdn.luogu.com.cn/upload/pic/60.png)\n上面的布局可以用序列$2\\ 4\\ 6\\ 1\\ 3\\ 5$来描述，第 $i$ 个数字表示在第 $i$ 行的相应位置有一个棋子，如下：\n\n行号 $1\\ 2\\ 3\\ 4\\ 5\\ 6$\n\n列号 $2\\ 4\\ 6\\ 1\\ 3\\ 5$\n\n这只是棋子放置的一个解。请编一个程序找出所有棋子放置的解。\n并把它们以上面的序列方法输出，解按字典顺序排列。\n请输出前 $3$ 个解。最后一行是解的总个数。\n【输入格式】\n一行一个正整数 $n$，表示棋盘是 $n \\times n$ 大小的。\n【输出格式】\n前三行为前三个解，每个解的两个数字之间用一个空格隔开。第四行只有一个数字，表示解的总数。\n输入输出样例\n### 输入 #1  $\\qquad\\qquad\\qquad$ 输出 #1\n6  $\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\quad$ 2 4 6 1 3 5\n$\\quad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\quad$ 3 6 2 5 1 4\n$\\quad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\quad$ 4 1 5 2 6 3\n$\\quad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\quad$ 4\n\n\n\n【数据范围】\n对于 $100\\%$ 的数据，$6 \\leq n \\leq 136$\n\nUSACO Training Section 1.5\n\n\n代码\n```cpp\n#include <iostream>\n#include <algorithm>\n#include <vector>\nusing namespace std;\nint tot = 0,n;\nint C[10000] = { 0 };\nint vis[10000][10000] = { 0 };\nvector<vector<int> >ans;\nvoid search(int cur)\n{\n\tif (cur == n)\n\t{\n\t\ttot++;\n\t\tvector<int> v;\n\t\tfor (int i = 0; i < n; ++i)\n\t\t{\n\t\t\tv.push_back(C[i]);\n\t\t}\n\t\tans.push_back(v);\n\t}\n\telse for (int i = 0; i < n; ++i)\n\t{\n\t\tif (!vis[0][i] && !vis[1][cur + i] && !vis[2][cur - i + n])\n\t\t{\n\t\t\tC[cur] = i;\n\t\t\tvis[0][i] = vis[1][cur + i] = vis[2][cur - i + n] = 1;\n\t\t\tsearch(cur + 1);\n\t\t\tvis[0][i] = vis[1][cur + i] = vis[2][cur - i + n] = 0;\n\t\t}\n\t}\n}\nbool cmp(vector<int>& a, vector<int>& b)\n{\n\tfor (int i = 0; i < a.size() && i < b.size(); ++i)\n\t{\n\t\tif (a[i] != b[i])return a[i] < b[i];\n\t}\n\treturn a.size() < b.size();\n}\nint main()\n{\n\tcin >> n;\n\tsearch(0);\n\tsort(ans.begin(), ans.end(), cmp);\n\tint i = 0;\n\tfor (vector<vector<int> >::iterator it1 = ans.begin(); it1 != ans.end(); it1++,i++)\n\t{\n\t\tif (!(i < 3))break;\n\t\tfor (vector<int>::iterator it2 = it1->begin(); it2 != it1->end(); it2++)\n\t\t{\n\t\t\tcout << (*it2)+1 << \" \";\n\t\t}\n\t\tcout << endl;\n\t}\n\tcout << tot;\n}\n```\n","source":"_posts/JC1.md","raw":"---\ntitle: JC1 排序模拟枚举\ntags: 洛谷笔记\nmathjax: true\n---\n\n# 1.排序模拟枚举\n## 复杂度\n\n* 一般（最坏）复杂度 ：记号为 O(……)\n    均摊复杂度 $\\qquad\\quad\\,$ ：记号为 Θ(……),但一般写成O(……)\n* 约定\n    1. 省略系数O(100n)=O(10n)=O($\\frac{1}{2}$n)=O(n).\n    2. log底数省略\n\n<!--more-->\n\n## 排序\n\n* 选择排序\n        这个大家都会，就不详细解释了 ~~（逃~~\n        \n![选择](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9mb3J1bS5taWFuYmFvYmFuLmNuL2RhdGEvYXR0YWNobWVudC9mb3J1bS8yMDE4MDMvMjAvMTQwMTU0ajBjaThuOW52dm4zNTNuMC5naWY '选择排序')\n\n* 插入排序\n\n![插入](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9mb3J1bS5taWFuYmFvYmFuLmNuL2RhdGEvYXR0YWNobWVudC9mb3J1bS8yMDE4MDMvMjAvMTQwMTU1aDBhdDEzMWZrejMzajFhZi5naWY '插入')\n\n\n* 冒泡排序\n\n\n ![冒泡](https://images2018.cnblogs.com/blog/1391679/201806/1391679-20180618163321525-1936669878.gif '冒泡排序')\n\n\n* 归并排序\n\n\n     详情请见[点我](https://www.cnblogs.com/lhy-cblog/p/merge-sort.html)\n        \n        \n![归并1](https://img2018.cnblogs.com/blog/1653262/202001/1653262-20200123085200050-668412306.png '归并1')\n\n![归并2](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9mb3J1bS5taWFuYmFvYmFuLmNuL2RhdGEvYXR0YWNobWVudC9mb3J1bS8yMDE4MDMvMjAvMTQwMTU3Z2tybmtrc3BwcG90b3Jrcy5naWY '归并2')\n\n```cpp\nvoid ms(int b, int e)\n{\n\tif(e-b <= 0) return ;\n\tint m = (b + e) / 2, p1 = b, p2 = m+1,   i = b;\n\tms(b, m); ms(m+1, e);\n\twhile(p1 <= m || p2 <= e)\n\t\tif(p2 > e || (p1 <= m && a[p1] <= a [p2]))\n\t\t\tt[i++] = a[p1++];\n\t\t\telse t[i++] = a[p2++];\n\tfor(i = b; i <= e; ++i) a[i] = t[i];\n}\n```\n\n\n* 快速排序\n\n```cpp\n void Sort(int l, int r)\n{\n\tint i  = l, j = r, x = a[(l + r)/ 2];\n\tdo{\n\t\twhile(a[i] < x) ++i; while(a[j] > x) --j;\n\t\tif(i <= j) swap(a[i++], a[j--]);\n\t}while(i < j);\n\tif(i < r) Sort(i, r); if(j > l) Sort(l, j);\n}\n```\n\n## 模拟\n模拟，顾名思义，就是题目让你干嘛你就干嘛。\n\n### 例题 校门外的树\n![](https://img2018.cnblogs.com/blog/1653262/202001/1653262-20200130133815952-2119019624.png)\n\n\n思路：可以建一个数组，保存地铁每一个位置的情况，每次输入l,r，就把这个数组[l,r]部分都变成1，最后再统计有多少0即可\n\n代码如下（勿喷）\n```cpp\n#include <iostream>\nusing namespace std;\nconst int maxn = 10010;\nint tree[maxn];\nint main(void)\n{\n\tint l,m,b,e,ans = 0;\n\tcin>>l>>m;\n\tfor(int i = 0;i < m;i++)\n\t{\n\t\tcin>>b>>e;\n\t\tfor(int j = b;j <= e;j++)\n\t\t\ttree[j] = 1;\n\t}\n\tfor(int i = 0;i <= l;i++)\n\t\tans+=!tree[i];\n\tcout<<ans;\n}\n```\n\n## 枚举\n枚举，顾名思义，就是把所有可能的情况都试一遍直到找到正确的答案。\n### 例题 P1219 八皇后    \n【题目描述】\n\n一个如下的 $6×6$ 的跳棋棋盘，有六个棋子被放置在棋盘上，使得每行、每列有且只有一个，每条对角线（包括两条主对角线的所有平行线）上至多有一个棋子。\n![](https://cdn.luogu.com.cn/upload/pic/60.png)\n上面的布局可以用序列$2\\ 4\\ 6\\ 1\\ 3\\ 5$来描述，第 $i$ 个数字表示在第 $i$ 行的相应位置有一个棋子，如下：\n\n行号 $1\\ 2\\ 3\\ 4\\ 5\\ 6$\n\n列号 $2\\ 4\\ 6\\ 1\\ 3\\ 5$\n\n这只是棋子放置的一个解。请编一个程序找出所有棋子放置的解。\n并把它们以上面的序列方法输出，解按字典顺序排列。\n请输出前 $3$ 个解。最后一行是解的总个数。\n【输入格式】\n一行一个正整数 $n$，表示棋盘是 $n \\times n$ 大小的。\n【输出格式】\n前三行为前三个解，每个解的两个数字之间用一个空格隔开。第四行只有一个数字，表示解的总数。\n输入输出样例\n### 输入 #1  $\\qquad\\qquad\\qquad$ 输出 #1\n6  $\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\quad$ 2 4 6 1 3 5\n$\\quad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\quad$ 3 6 2 5 1 4\n$\\quad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\quad$ 4 1 5 2 6 3\n$\\quad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\quad$ 4\n\n\n\n【数据范围】\n对于 $100\\%$ 的数据，$6 \\leq n \\leq 136$\n\nUSACO Training Section 1.5\n\n\n代码\n```cpp\n#include <iostream>\n#include <algorithm>\n#include <vector>\nusing namespace std;\nint tot = 0,n;\nint C[10000] = { 0 };\nint vis[10000][10000] = { 0 };\nvector<vector<int> >ans;\nvoid search(int cur)\n{\n\tif (cur == n)\n\t{\n\t\ttot++;\n\t\tvector<int> v;\n\t\tfor (int i = 0; i < n; ++i)\n\t\t{\n\t\t\tv.push_back(C[i]);\n\t\t}\n\t\tans.push_back(v);\n\t}\n\telse for (int i = 0; i < n; ++i)\n\t{\n\t\tif (!vis[0][i] && !vis[1][cur + i] && !vis[2][cur - i + n])\n\t\t{\n\t\t\tC[cur] = i;\n\t\t\tvis[0][i] = vis[1][cur + i] = vis[2][cur - i + n] = 1;\n\t\t\tsearch(cur + 1);\n\t\t\tvis[0][i] = vis[1][cur + i] = vis[2][cur - i + n] = 0;\n\t\t}\n\t}\n}\nbool cmp(vector<int>& a, vector<int>& b)\n{\n\tfor (int i = 0; i < a.size() && i < b.size(); ++i)\n\t{\n\t\tif (a[i] != b[i])return a[i] < b[i];\n\t}\n\treturn a.size() < b.size();\n}\nint main()\n{\n\tcin >> n;\n\tsearch(0);\n\tsort(ans.begin(), ans.end(), cmp);\n\tint i = 0;\n\tfor (vector<vector<int> >::iterator it1 = ans.begin(); it1 != ans.end(); it1++,i++)\n\t{\n\t\tif (!(i < 3))break;\n\t\tfor (vector<int>::iterator it2 = it1->begin(); it2 != it1->end(); it2++)\n\t\t{\n\t\t\tcout << (*it2)+1 << \" \";\n\t\t}\n\t\tcout << endl;\n\t}\n\tcout << tot;\n}\n```\n","slug":"JC1","published":1,"date":"2020-04-09T06:55:28.149Z","updated":"2020-04-09T12:34:21.804Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck95gnh5b00075cvfh6ez63ss","content":"<h1 id=\"1排序模拟枚举\"><a class=\"markdownIt-Anchor\" href=\"#1排序模拟枚举\"></a> 1.排序模拟枚举</h1>\n<h2 id=\"复杂度\"><a class=\"markdownIt-Anchor\" href=\"#复杂度\"></a> 复杂度</h2>\n<ul>\n<li>一般（最坏）复杂度 ：记号为 O(……)<br />\n均摊复杂度 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mspace width=\"2em\"/><mspace width=\"1em\"/><mtext> </mtext></mrow><annotation encoding=\"application/x-tex\">\\qquad\\quad\\,</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span></span></span></span> ：记号为 Θ(……),但一般写成O(……)</li>\n<li>约定\n<ol>\n<li>省略系数O(100n)=O(10n)=O(<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mfrac><mn>1</mn><mn>2</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{1}{2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>n)=O(n).</li>\n<li>log底数省略</li>\n</ol>\n</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"排序\"><a class=\"markdownIt-Anchor\" href=\"#排序\"></a> 排序</h2>\n<ul>\n<li>选择排序<br />\n这个大家都会，就不详细解释了 <s>（逃</s></li>\n</ul>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9mb3J1bS5taWFuYmFvYmFuLmNuL2RhdGEvYXR0YWNobWVudC9mb3J1bS8yMDE4MDMvMjAvMTQwMTU0ajBjaThuOW52dm4zNTNuMC5naWY\" alt=\"选择\" title=\"选择排序\" /></p>\n<ul>\n<li>插入排序</li>\n</ul>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9mb3J1bS5taWFuYmFvYmFuLmNuL2RhdGEvYXR0YWNobWVudC9mb3J1bS8yMDE4MDMvMjAvMTQwMTU1aDBhdDEzMWZrejMzajFhZi5naWY\" alt=\"插入\" title=\"插入\" /></p>\n<ul>\n<li>冒泡排序</li>\n</ul>\n<p><img src=\"https://images2018.cnblogs.com/blog/1391679/201806/1391679-20180618163321525-1936669878.gif\" alt=\"冒泡\" title=\"冒泡排序\" /></p>\n<ul>\n<li>\n<p>归并排序</p>\n<p>详情请见<a href=\"https://www.cnblogs.com/lhy-cblog/p/merge-sort.html\" target=\"_blank\" rel=\"noopener\">点我</a></p>\n</li>\n</ul>\n<p><img src=\"https://img2018.cnblogs.com/blog/1653262/202001/1653262-20200123085200050-668412306.png\" alt=\"归并1\" title=\"归并1\" /></p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9mb3J1bS5taWFuYmFvYmFuLmNuL2RhdGEvYXR0YWNobWVudC9mb3J1bS8yMDE4MDMvMjAvMTQwMTU3Z2tybmtrc3BwcG90b3Jrcy5naWY\" alt=\"归并2\" title=\"归并2\" /></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ms</span><span class=\"params\">(<span class=\"keyword\">int</span> b, <span class=\"keyword\">int</span> e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(e-b &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m = (b + e) / <span class=\"number\">2</span>, p1 = b, p2 = m+<span class=\"number\">1</span>,   i = b;</span><br><span class=\"line\">\tms(b, m); ms(m+<span class=\"number\">1</span>, e);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p1 &lt;= m || p2 &lt;= e)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(p2 &gt; e || (p1 &lt;= m &amp;&amp; a[p1] &lt;= a [p2]))</span><br><span class=\"line\">\t\t\tt[i++] = a[p1++];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> t[i++] = a[p2++];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = b; i &lt;= e; ++i) a[i] = t[i];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>快速排序</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Sort</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i  = l, j = r, x = a[(l + r)/ <span class=\"number\">2</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(a[i] &lt; x) ++i; <span class=\"keyword\">while</span>(a[j] &gt; x) --j;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(i &lt;= j) swap(a[i++], a[j--]);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">while</span>(i &lt; j);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(i &lt; r) Sort(i, r); <span class=\"keyword\">if</span>(j &gt; l) Sort(l, j);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"模拟\"><a class=\"markdownIt-Anchor\" href=\"#模拟\"></a> 模拟</h2>\n<p>模拟，顾名思义，就是题目让你干嘛你就干嘛。</p>\n<h3 id=\"例题-校门外的树\"><a class=\"markdownIt-Anchor\" href=\"#例题-校门外的树\"></a> 例题 校门外的树</h3>\n<p><img src=\"https://img2018.cnblogs.com/blog/1653262/202001/1653262-20200130133815952-2119019624.png\" alt=\"\" /></p>\n<p>思路：可以建一个数组，保存地铁每一个位置的情况，每次输入l,r，就把这个数组[l,r]部分都变成1，最后再统计有多少0即可</p>\n<p>代码如下（勿喷）</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">10010</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> tree[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> l,m,b,e,ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;l&gt;&gt;m;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; m;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;b&gt;&gt;e;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = b;j &lt;= e;j++)</span><br><span class=\"line\">\t\t\ttree[j] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt;= l;i++)</span><br><span class=\"line\">\t\tans+=!tree[i];</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"枚举\"><a class=\"markdownIt-Anchor\" href=\"#枚举\"></a> 枚举</h2>\n<p>枚举，顾名思义，就是把所有可能的情况都试一遍直到找到正确的答案。</p>\n<h3 id=\"例题-p1219-八皇后\"><a class=\"markdownIt-Anchor\" href=\"#例题-p1219-八皇后\"></a> 例题 P1219 八皇后</h3>\n<p>【题目描述】</p>\n<p>一个如下的 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>6</mn><mo>×</mo><mn>6</mn></mrow><annotation encoding=\"application/x-tex\">6×6</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">6</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">6</span></span></span></span> 的跳棋棋盘，有六个棋子被放置在棋盘上，使得每行、每列有且只有一个，每条对角线（包括两条主对角线的所有平行线）上至多有一个棋子。<br />\n<img src=\"https://cdn.luogu.com.cn/upload/pic/60.png\" alt=\"\" /><br />\n上面的布局可以用序列<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>2</mn><mtext> </mtext><mn>4</mn><mtext> </mtext><mn>6</mn><mtext> </mtext><mn>1</mn><mtext> </mtext><mn>3</mn><mtext> </mtext><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">2\\ 4\\ 6\\ 1\\ 3\\ 5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mspace\"> </span><span class=\"mord\">4</span><span class=\"mspace\"> </span><span class=\"mord\">6</span><span class=\"mspace\"> </span><span class=\"mord\">1</span><span class=\"mspace\"> </span><span class=\"mord\">3</span><span class=\"mspace\"> </span><span class=\"mord\">5</span></span></span></span>来描述，第 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">i</span></span></span></span> 个数字表示在第 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">i</span></span></span></span> 行的相应位置有一个棋子，如下：</p>\n<p>行号 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn><mtext> </mtext><mn>2</mn><mtext> </mtext><mn>3</mn><mtext> </mtext><mn>4</mn><mtext> </mtext><mn>5</mn><mtext> </mtext><mn>6</mn></mrow><annotation encoding=\"application/x-tex\">1\\ 2\\ 3\\ 4\\ 5\\ 6</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\"> </span><span class=\"mord\">2</span><span class=\"mspace\"> </span><span class=\"mord\">3</span><span class=\"mspace\"> </span><span class=\"mord\">4</span><span class=\"mspace\"> </span><span class=\"mord\">5</span><span class=\"mspace\"> </span><span class=\"mord\">6</span></span></span></span></p>\n<p>列号 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>2</mn><mtext> </mtext><mn>4</mn><mtext> </mtext><mn>6</mn><mtext> </mtext><mn>1</mn><mtext> </mtext><mn>3</mn><mtext> </mtext><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">2\\ 4\\ 6\\ 1\\ 3\\ 5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mspace\"> </span><span class=\"mord\">4</span><span class=\"mspace\"> </span><span class=\"mord\">6</span><span class=\"mspace\"> </span><span class=\"mord\">1</span><span class=\"mspace\"> </span><span class=\"mord\">3</span><span class=\"mspace\"> </span><span class=\"mord\">5</span></span></span></span></p>\n<p>这只是棋子放置的一个解。请编一个程序找出所有棋子放置的解。<br />\n并把它们以上面的序列方法输出，解按字典顺序排列。<br />\n请输出前 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span></span></span></span> 个解。最后一行是解的总个数。<br />\n【输入格式】<br />\n一行一个正整数 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>，表示棋盘是 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo>×</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n \\times n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span> 大小的。<br />\n【输出格式】<br />\n前三行为前三个解，每个解的两个数字之间用一个空格隔开。第四行只有一个数字，表示解的总数。<br />\n输入输出样例</p>\n<h3 id=\"输入-1-qquadqquadqquad-输出-1\"><a class=\"markdownIt-Anchor\" href=\"#输入-1-qquadqquadqquad-输出-1\"></a> 输入 #1  <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mspace width=\"2em\"/><mspace width=\"2em\"/><mspace width=\"2em\"/></mrow><annotation encoding=\"application/x-tex\">\\qquad\\qquad\\qquad</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span></span></span></span> 输出 #1</h3>\n<p>6  <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mspace width=\"2em\"/><mspace width=\"2em\"/><mspace width=\"2em\"/><mspace width=\"2em\"/><mspace width=\"2em\"/><mspace width=\"2em\"/><mspace width=\"1em\"/></mrow><annotation encoding=\"application/x-tex\">\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\quad</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:1em;\"></span></span></span></span> 2 4 6 1 3 5<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mspace width=\"1em\"/><mspace width=\"2em\"/><mspace width=\"2em\"/><mspace width=\"2em\"/><mspace width=\"2em\"/><mspace width=\"2em\"/><mspace width=\"2em\"/><mspace width=\"1em\"/></mrow><annotation encoding=\"application/x-tex\">\\quad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\quad</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:1em;\"></span></span></span></span> 3 6 2 5 1 4<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mspace width=\"1em\"/><mspace width=\"2em\"/><mspace width=\"2em\"/><mspace width=\"2em\"/><mspace width=\"2em\"/><mspace width=\"2em\"/><mspace width=\"2em\"/><mspace width=\"1em\"/></mrow><annotation encoding=\"application/x-tex\">\\quad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\quad</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:1em;\"></span></span></span></span> 4 1 5 2 6 3<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mspace width=\"1em\"/><mspace width=\"2em\"/><mspace width=\"2em\"/><mspace width=\"2em\"/><mspace width=\"2em\"/><mspace width=\"2em\"/><mspace width=\"2em\"/><mspace width=\"1em\"/></mrow><annotation encoding=\"application/x-tex\">\\quad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\quad</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:1em;\"></span></span></span></span> 4</p>\n<p>【数据范围】<br />\n对于 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>100</mn><mi mathvariant=\"normal\">%</mi></mrow><annotation encoding=\"application/x-tex\">100\\%</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.80556em;vertical-align:-0.05556em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">%</span></span></span></span> 的数据，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>6</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>136</mn></mrow><annotation encoding=\"application/x-tex\">6 \\leq n \\leq 136</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.78041em;vertical-align:-0.13597em;\"></span><span class=\"mord\">6</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">3</span><span class=\"mord\">6</span></span></span></span></p>\n<p>USACO Training Section 1.5</p>\n<p>代码</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> tot = <span class=\"number\">0</span>,n;</span><br><span class=\"line\"><span class=\"keyword\">int</span> C[<span class=\"number\">10000</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> vis[<span class=\"number\">10000</span>][<span class=\"number\">10000</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &gt;ans;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">search</span><span class=\"params\">(<span class=\"keyword\">int</span> cur)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (cur == n)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ttot++;</span><br><span class=\"line\">\t\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tv.push_back(C[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tans.push_back(v);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!vis[<span class=\"number\">0</span>][i] &amp;&amp; !vis[<span class=\"number\">1</span>][cur + i] &amp;&amp; !vis[<span class=\"number\">2</span>][cur - i + n])</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tC[cur] = i;</span><br><span class=\"line\">\t\t\tvis[<span class=\"number\">0</span>][i] = vis[<span class=\"number\">1</span>][cur + i] = vis[<span class=\"number\">2</span>][cur - i + n] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tsearch(cur + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\tvis[<span class=\"number\">0</span>][i] = vis[<span class=\"number\">1</span>][cur + i] = vis[<span class=\"number\">2</span>][cur - i + n] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; a, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.size() &amp;&amp; i &lt; b.size(); ++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (a[i] != b[i])<span class=\"keyword\">return</span> a[i] &lt; b[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a.size() &lt; b.size();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">\tsearch(<span class=\"number\">0</span>);</span><br><span class=\"line\">\tsort(ans.begin(), ans.end(), cmp);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &gt;::iterator it1 = ans.begin(); it1 != ans.end(); it1++,i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!(i &lt; <span class=\"number\">3</span>))<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator it2 = it1-&gt;begin(); it2 != it1-&gt;end(); it2++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; (*it2)+<span class=\"number\">1</span> &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; tot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"1排序模拟枚举\"><a class=\"markdownIt-Anchor\" href=\"#1排序模拟枚举\"></a> 1.排序模拟枚举</h1>\n<h2 id=\"复杂度\"><a class=\"markdownIt-Anchor\" href=\"#复杂度\"></a> 复杂度</h2>\n<ul>\n<li>一般（最坏）复杂度 ：记号为 O(……)<br />\n均摊复杂度 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mspace width=\"2em\"/><mspace width=\"1em\"/><mtext> </mtext></mrow><annotation encoding=\"application/x-tex\">\\qquad\\quad\\,</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span></span></span></span> ：记号为 Θ(……),但一般写成O(……)</li>\n<li>约定\n<ol>\n<li>省略系数O(100n)=O(10n)=O(<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mfrac><mn>1</mn><mn>2</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{1}{2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>n)=O(n).</li>\n<li>log底数省略</li>\n</ol>\n</li>\n</ul>","more":"<h2 id=\"排序\"><a class=\"markdownIt-Anchor\" href=\"#排序\"></a> 排序</h2>\n<ul>\n<li>选择排序<br />\n这个大家都会，就不详细解释了 <s>（逃</s></li>\n</ul>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9mb3J1bS5taWFuYmFvYmFuLmNuL2RhdGEvYXR0YWNobWVudC9mb3J1bS8yMDE4MDMvMjAvMTQwMTU0ajBjaThuOW52dm4zNTNuMC5naWY\" alt=\"选择\" title=\"选择排序\" /></p>\n<ul>\n<li>插入排序</li>\n</ul>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9mb3J1bS5taWFuYmFvYmFuLmNuL2RhdGEvYXR0YWNobWVudC9mb3J1bS8yMDE4MDMvMjAvMTQwMTU1aDBhdDEzMWZrejMzajFhZi5naWY\" alt=\"插入\" title=\"插入\" /></p>\n<ul>\n<li>冒泡排序</li>\n</ul>\n<p><img src=\"https://images2018.cnblogs.com/blog/1391679/201806/1391679-20180618163321525-1936669878.gif\" alt=\"冒泡\" title=\"冒泡排序\" /></p>\n<ul>\n<li>\n<p>归并排序</p>\n<p>详情请见<a href=\"https://www.cnblogs.com/lhy-cblog/p/merge-sort.html\" target=\"_blank\" rel=\"noopener\">点我</a></p>\n</li>\n</ul>\n<p><img src=\"https://img2018.cnblogs.com/blog/1653262/202001/1653262-20200123085200050-668412306.png\" alt=\"归并1\" title=\"归并1\" /></p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9mb3J1bS5taWFuYmFvYmFuLmNuL2RhdGEvYXR0YWNobWVudC9mb3J1bS8yMDE4MDMvMjAvMTQwMTU3Z2tybmtrc3BwcG90b3Jrcy5naWY\" alt=\"归并2\" title=\"归并2\" /></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ms</span><span class=\"params\">(<span class=\"keyword\">int</span> b, <span class=\"keyword\">int</span> e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(e-b &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m = (b + e) / <span class=\"number\">2</span>, p1 = b, p2 = m+<span class=\"number\">1</span>,   i = b;</span><br><span class=\"line\">\tms(b, m); ms(m+<span class=\"number\">1</span>, e);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p1 &lt;= m || p2 &lt;= e)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(p2 &gt; e || (p1 &lt;= m &amp;&amp; a[p1] &lt;= a [p2]))</span><br><span class=\"line\">\t\t\tt[i++] = a[p1++];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> t[i++] = a[p2++];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = b; i &lt;= e; ++i) a[i] = t[i];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>快速排序</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Sort</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i  = l, j = r, x = a[(l + r)/ <span class=\"number\">2</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(a[i] &lt; x) ++i; <span class=\"keyword\">while</span>(a[j] &gt; x) --j;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(i &lt;= j) swap(a[i++], a[j--]);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">while</span>(i &lt; j);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(i &lt; r) Sort(i, r); <span class=\"keyword\">if</span>(j &gt; l) Sort(l, j);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"模拟\"><a class=\"markdownIt-Anchor\" href=\"#模拟\"></a> 模拟</h2>\n<p>模拟，顾名思义，就是题目让你干嘛你就干嘛。</p>\n<h3 id=\"例题-校门外的树\"><a class=\"markdownIt-Anchor\" href=\"#例题-校门外的树\"></a> 例题 校门外的树</h3>\n<p><img src=\"https://img2018.cnblogs.com/blog/1653262/202001/1653262-20200130133815952-2119019624.png\" alt=\"\" /></p>\n<p>思路：可以建一个数组，保存地铁每一个位置的情况，每次输入l,r，就把这个数组[l,r]部分都变成1，最后再统计有多少0即可</p>\n<p>代码如下（勿喷）</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">10010</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> tree[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> l,m,b,e,ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;l&gt;&gt;m;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; m;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;b&gt;&gt;e;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = b;j &lt;= e;j++)</span><br><span class=\"line\">\t\t\ttree[j] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt;= l;i++)</span><br><span class=\"line\">\t\tans+=!tree[i];</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"枚举\"><a class=\"markdownIt-Anchor\" href=\"#枚举\"></a> 枚举</h2>\n<p>枚举，顾名思义，就是把所有可能的情况都试一遍直到找到正确的答案。</p>\n<h3 id=\"例题-p1219-八皇后\"><a class=\"markdownIt-Anchor\" href=\"#例题-p1219-八皇后\"></a> 例题 P1219 八皇后</h3>\n<p>【题目描述】</p>\n<p>一个如下的 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>6</mn><mo>×</mo><mn>6</mn></mrow><annotation encoding=\"application/x-tex\">6×6</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">6</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">6</span></span></span></span> 的跳棋棋盘，有六个棋子被放置在棋盘上，使得每行、每列有且只有一个，每条对角线（包括两条主对角线的所有平行线）上至多有一个棋子。<br />\n<img src=\"https://cdn.luogu.com.cn/upload/pic/60.png\" alt=\"\" /><br />\n上面的布局可以用序列<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>2</mn><mtext> </mtext><mn>4</mn><mtext> </mtext><mn>6</mn><mtext> </mtext><mn>1</mn><mtext> </mtext><mn>3</mn><mtext> </mtext><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">2\\ 4\\ 6\\ 1\\ 3\\ 5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mspace\"> </span><span class=\"mord\">4</span><span class=\"mspace\"> </span><span class=\"mord\">6</span><span class=\"mspace\"> </span><span class=\"mord\">1</span><span class=\"mspace\"> </span><span class=\"mord\">3</span><span class=\"mspace\"> </span><span class=\"mord\">5</span></span></span></span>来描述，第 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">i</span></span></span></span> 个数字表示在第 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">i</span></span></span></span> 行的相应位置有一个棋子，如下：</p>\n<p>行号 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn><mtext> </mtext><mn>2</mn><mtext> </mtext><mn>3</mn><mtext> </mtext><mn>4</mn><mtext> </mtext><mn>5</mn><mtext> </mtext><mn>6</mn></mrow><annotation encoding=\"application/x-tex\">1\\ 2\\ 3\\ 4\\ 5\\ 6</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\"> </span><span class=\"mord\">2</span><span class=\"mspace\"> </span><span class=\"mord\">3</span><span class=\"mspace\"> </span><span class=\"mord\">4</span><span class=\"mspace\"> </span><span class=\"mord\">5</span><span class=\"mspace\"> </span><span class=\"mord\">6</span></span></span></span></p>\n<p>列号 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>2</mn><mtext> </mtext><mn>4</mn><mtext> </mtext><mn>6</mn><mtext> </mtext><mn>1</mn><mtext> </mtext><mn>3</mn><mtext> </mtext><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">2\\ 4\\ 6\\ 1\\ 3\\ 5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mspace\"> </span><span class=\"mord\">4</span><span class=\"mspace\"> </span><span class=\"mord\">6</span><span class=\"mspace\"> </span><span class=\"mord\">1</span><span class=\"mspace\"> </span><span class=\"mord\">3</span><span class=\"mspace\"> </span><span class=\"mord\">5</span></span></span></span></p>\n<p>这只是棋子放置的一个解。请编一个程序找出所有棋子放置的解。<br />\n并把它们以上面的序列方法输出，解按字典顺序排列。<br />\n请输出前 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span></span></span></span> 个解。最后一行是解的总个数。<br />\n【输入格式】<br />\n一行一个正整数 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>，表示棋盘是 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo>×</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n \\times n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span> 大小的。<br />\n【输出格式】<br />\n前三行为前三个解，每个解的两个数字之间用一个空格隔开。第四行只有一个数字，表示解的总数。<br />\n输入输出样例</p>\n<h3 id=\"输入-1-qquadqquadqquad-输出-1\"><a class=\"markdownIt-Anchor\" href=\"#输入-1-qquadqquadqquad-输出-1\"></a> 输入 #1  <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mspace width=\"2em\"/><mspace width=\"2em\"/><mspace width=\"2em\"/></mrow><annotation encoding=\"application/x-tex\">\\qquad\\qquad\\qquad</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span></span></span></span> 输出 #1</h3>\n<p>6  <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mspace width=\"2em\"/><mspace width=\"2em\"/><mspace width=\"2em\"/><mspace width=\"2em\"/><mspace width=\"2em\"/><mspace width=\"2em\"/><mspace width=\"1em\"/></mrow><annotation encoding=\"application/x-tex\">\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\quad</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:1em;\"></span></span></span></span> 2 4 6 1 3 5<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mspace width=\"1em\"/><mspace width=\"2em\"/><mspace width=\"2em\"/><mspace width=\"2em\"/><mspace width=\"2em\"/><mspace width=\"2em\"/><mspace width=\"2em\"/><mspace width=\"1em\"/></mrow><annotation encoding=\"application/x-tex\">\\quad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\quad</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:1em;\"></span></span></span></span> 3 6 2 5 1 4<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mspace width=\"1em\"/><mspace width=\"2em\"/><mspace width=\"2em\"/><mspace width=\"2em\"/><mspace width=\"2em\"/><mspace width=\"2em\"/><mspace width=\"2em\"/><mspace width=\"1em\"/></mrow><annotation encoding=\"application/x-tex\">\\quad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\quad</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:1em;\"></span></span></span></span> 4 1 5 2 6 3<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mspace width=\"1em\"/><mspace width=\"2em\"/><mspace width=\"2em\"/><mspace width=\"2em\"/><mspace width=\"2em\"/><mspace width=\"2em\"/><mspace width=\"2em\"/><mspace width=\"1em\"/></mrow><annotation encoding=\"application/x-tex\">\\quad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\quad</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:1em;\"></span></span></span></span> 4</p>\n<p>【数据范围】<br />\n对于 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>100</mn><mi mathvariant=\"normal\">%</mi></mrow><annotation encoding=\"application/x-tex\">100\\%</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.80556em;vertical-align:-0.05556em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">%</span></span></span></span> 的数据，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>6</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>136</mn></mrow><annotation encoding=\"application/x-tex\">6 \\leq n \\leq 136</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.78041em;vertical-align:-0.13597em;\"></span><span class=\"mord\">6</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">3</span><span class=\"mord\">6</span></span></span></span></p>\n<p>USACO Training Section 1.5</p>\n<p>代码</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> tot = <span class=\"number\">0</span>,n;</span><br><span class=\"line\"><span class=\"keyword\">int</span> C[<span class=\"number\">10000</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> vis[<span class=\"number\">10000</span>][<span class=\"number\">10000</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &gt;ans;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">search</span><span class=\"params\">(<span class=\"keyword\">int</span> cur)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (cur == n)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ttot++;</span><br><span class=\"line\">\t\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tv.push_back(C[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tans.push_back(v);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!vis[<span class=\"number\">0</span>][i] &amp;&amp; !vis[<span class=\"number\">1</span>][cur + i] &amp;&amp; !vis[<span class=\"number\">2</span>][cur - i + n])</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tC[cur] = i;</span><br><span class=\"line\">\t\t\tvis[<span class=\"number\">0</span>][i] = vis[<span class=\"number\">1</span>][cur + i] = vis[<span class=\"number\">2</span>][cur - i + n] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tsearch(cur + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\tvis[<span class=\"number\">0</span>][i] = vis[<span class=\"number\">1</span>][cur + i] = vis[<span class=\"number\">2</span>][cur - i + n] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; a, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.size() &amp;&amp; i &lt; b.size(); ++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (a[i] != b[i])<span class=\"keyword\">return</span> a[i] &lt; b[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a.size() &lt; b.size();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">\tsearch(<span class=\"number\">0</span>);</span><br><span class=\"line\">\tsort(ans.begin(), ans.end(), cmp);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &gt;::iterator it1 = ans.begin(); it1 != ans.end(); it1++,i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!(i &lt; <span class=\"number\">3</span>))<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator it2 = it1-&gt;begin(); it2 != it1-&gt;end(); it2++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; (*it2)+<span class=\"number\">1</span> &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; tot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"归并排序逆序对+快读","date":"2020-04-09T06:57:43.000Z","_content":"## 归并排序原理\n![](https://img2018.cnblogs.com/blog/1653262/202001/1653262-20200123085200050-668412306.png)\n先对源数组拆拆拆！拆成最小的**单个元素**，再分别合并，合并时保证两数组有序（单元素有序，尽管非常平凡），\n然后再一路合并下去，就得到有序的大数组了。\n这种思想叫分治，就是\"**分而治之**\"\n\n\n\n归并排序模版\n\n<!--more-->\n\n*使用前须将cnt置为0*\n```cpp\nvoid merge_sort(int *A,int x,int y,int *T,int &cnt)\n{\n\tif(y-x>1)\n\t{\n\t\tint m = x+(y-x)/2;\n\t\tint p = x,q = m,i = x;\n\t\tmerge_sort(A,x,m,T,cnt);\n\t\tmerge_sort(A,m,y,T,cnt);\n                //此时左半右半都有序\n\t\twhile(p<m || q<y)\n\t\t{\n\t\t\tif(q >= y || (p<m && A[p]<=A[q])) T[i++] = A[p++];\n\t\t\telse {T[i++] = A[q++];cnt += m - p; }\n\t\t}\n\t\tfor(int i = x;i < y;i++)A[i] = T[i];\n\t}\n}\n```\n### 逆序对解释：\n因为数组是从小到大复制的，从$A[q]$复制到$T[i]$时，**左边还没来得及复制的那一些元素**就是左边所有比$A[q]$大的数，此时只需要在**左边加上$m-p$**即可。\n\n###快读模版\n```cpp\ninline int read()\n{\n\tint x = 0,f = 1;char c = getchar();\n\twhile(!isdigit(c)){if(c=='-')f=-1;else f=1;c=getchar();}\n\twhile(isdigit(c)){x=(x<<1)+(x<<3)+(c^48);c=getchar();}\n\treturn x*f;\n}\ninline void write_num(int x)\n{\n\tif(x>9)write_num(x/10);\n\tputchar((x%10)+48);\n}\ninline void write(int x)\n{\n\tif(x < 0)putchar('-'),x=-x;\n\twrite_num(x);\n} \n```\n\n### test\n####以下便是完整的代码~~，欢迎拍砖~~\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn = 1e5+10;\nint a[maxn],t[maxn];\nvoid merge_sort(int *A,int x,int y,int *T,int &cnt)\n{\n\tif(y-x>1)\n\t{\n\t\tint m = x+(y-x)/2;\n\t\tint p = x,q = m,i = x;\n\t\tmerge_sort(A,x,m,T,cnt);\n\t\tmerge_sort(A,m,y,T,cnt);\n\t\twhile(p<m || q<y)\n\t\t{\n\t\t\tif(q >= y || (p<m && A[p]<=A[q])) T[i++] = A[p++];\n\t\t\telse {T[i++] = A[q++];cnt += m - p; }\n\t\t}\n\t\tfor(int i = x;i < y;i++)A[i] = T[i];\n\t}\n}\ninline int read()\n{\n\tint x = 0,f = 1;char c = getchar();\n\twhile(!isdigit(c)){if(c=='-')f=-1;else f=1;c=getchar();}\n\twhile(isdigit(c)){x=(x<<1)+(x<<3)+(c^48);c=getchar();}\n\treturn x*f;\n}\ninline void write_num(int x)\n{\n\tif(x>9)write_num(x/10);\n\tputchar((x%10)+48);\n}\ninline void write(int x)\n{\n\tif(x < 0)putchar('-'),x=-x;\n\twrite_num(x);\n} \nint main()\n{\n\tint n = read(),cnt = 0;\n\tfor(int i = 0;i < n;i++)\n\t\ta[i] = read();\n\tmerge_sort(a,0,n,t,cnt);\n\twrite(cnt),putchar('\\n');\n\tfor(int i = 0;i < n;i++)\n\t\twrite(a[i]),putchar(' ');\n\treturn 0;\n}\n```\n","source":"_posts/归并排序逆序对-快读.md","raw":"---\ntitle: 归并排序逆序对+快读\ndate: 2020-04-09 14:57:43\ntags: 心得分享\n---\n## 归并排序原理\n![](https://img2018.cnblogs.com/blog/1653262/202001/1653262-20200123085200050-668412306.png)\n先对源数组拆拆拆！拆成最小的**单个元素**，再分别合并，合并时保证两数组有序（单元素有序，尽管非常平凡），\n然后再一路合并下去，就得到有序的大数组了。\n这种思想叫分治，就是\"**分而治之**\"\n\n\n\n归并排序模版\n\n<!--more-->\n\n*使用前须将cnt置为0*\n```cpp\nvoid merge_sort(int *A,int x,int y,int *T,int &cnt)\n{\n\tif(y-x>1)\n\t{\n\t\tint m = x+(y-x)/2;\n\t\tint p = x,q = m,i = x;\n\t\tmerge_sort(A,x,m,T,cnt);\n\t\tmerge_sort(A,m,y,T,cnt);\n                //此时左半右半都有序\n\t\twhile(p<m || q<y)\n\t\t{\n\t\t\tif(q >= y || (p<m && A[p]<=A[q])) T[i++] = A[p++];\n\t\t\telse {T[i++] = A[q++];cnt += m - p; }\n\t\t}\n\t\tfor(int i = x;i < y;i++)A[i] = T[i];\n\t}\n}\n```\n### 逆序对解释：\n因为数组是从小到大复制的，从$A[q]$复制到$T[i]$时，**左边还没来得及复制的那一些元素**就是左边所有比$A[q]$大的数，此时只需要在**左边加上$m-p$**即可。\n\n###快读模版\n```cpp\ninline int read()\n{\n\tint x = 0,f = 1;char c = getchar();\n\twhile(!isdigit(c)){if(c=='-')f=-1;else f=1;c=getchar();}\n\twhile(isdigit(c)){x=(x<<1)+(x<<3)+(c^48);c=getchar();}\n\treturn x*f;\n}\ninline void write_num(int x)\n{\n\tif(x>9)write_num(x/10);\n\tputchar((x%10)+48);\n}\ninline void write(int x)\n{\n\tif(x < 0)putchar('-'),x=-x;\n\twrite_num(x);\n} \n```\n\n### test\n####以下便是完整的代码~~，欢迎拍砖~~\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn = 1e5+10;\nint a[maxn],t[maxn];\nvoid merge_sort(int *A,int x,int y,int *T,int &cnt)\n{\n\tif(y-x>1)\n\t{\n\t\tint m = x+(y-x)/2;\n\t\tint p = x,q = m,i = x;\n\t\tmerge_sort(A,x,m,T,cnt);\n\t\tmerge_sort(A,m,y,T,cnt);\n\t\twhile(p<m || q<y)\n\t\t{\n\t\t\tif(q >= y || (p<m && A[p]<=A[q])) T[i++] = A[p++];\n\t\t\telse {T[i++] = A[q++];cnt += m - p; }\n\t\t}\n\t\tfor(int i = x;i < y;i++)A[i] = T[i];\n\t}\n}\ninline int read()\n{\n\tint x = 0,f = 1;char c = getchar();\n\twhile(!isdigit(c)){if(c=='-')f=-1;else f=1;c=getchar();}\n\twhile(isdigit(c)){x=(x<<1)+(x<<3)+(c^48);c=getchar();}\n\treturn x*f;\n}\ninline void write_num(int x)\n{\n\tif(x>9)write_num(x/10);\n\tputchar((x%10)+48);\n}\ninline void write(int x)\n{\n\tif(x < 0)putchar('-'),x=-x;\n\twrite_num(x);\n} \nint main()\n{\n\tint n = read(),cnt = 0;\n\tfor(int i = 0;i < n;i++)\n\t\ta[i] = read();\n\tmerge_sort(a,0,n,t,cnt);\n\twrite(cnt),putchar('\\n');\n\tfor(int i = 0;i < n;i++)\n\t\twrite(a[i]),putchar(' ');\n\treturn 0;\n}\n```\n","slug":"归并排序逆序对-快读","published":1,"updated":"2020-04-09T07:52:39.070Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck95gnh5c00085cvf5f738r2j","content":"<h2 id=\"归并排序原理\"><a class=\"markdownIt-Anchor\" href=\"#归并排序原理\"></a> 归并排序原理</h2>\n<p><img src=\"https://img2018.cnblogs.com/blog/1653262/202001/1653262-20200123085200050-668412306.png\" alt=\"\" /><br />\n先对源数组拆拆拆！拆成最小的<strong>单个元素</strong>，再分别合并，合并时保证两数组有序（单元素有序，尽管非常平凡），<br />\n然后再一路合并下去，就得到有序的大数组了。<br />\n这种思想叫分治，就是&quot;<strong>分而治之</strong>&quot;</p>\n<p>归并排序模版</p>\n<a id=\"more\"></a>\n<p><em>使用前须将cnt置为0</em></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> *A,<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y,<span class=\"keyword\">int</span> *T,<span class=\"keyword\">int</span> &amp;cnt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(y-x&gt;<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> m = x+(y-x)/<span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> p = x,q = m,i = x;</span><br><span class=\"line\">\t\tmerge_sort(A,x,m,T,cnt);</span><br><span class=\"line\">\t\tmerge_sort(A,m,y,T,cnt);</span><br><span class=\"line\">                <span class=\"comment\">//此时左半右半都有序</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(p&lt;m || q&lt;y)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(q &gt;= y || (p&lt;m &amp;&amp; A[p]&lt;=A[q])) T[i++] = A[p++];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> &#123;T[i++] = A[q++];cnt += m - p; &#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = x;i &lt; y;i++)A[i] = T[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"逆序对解释\"><a class=\"markdownIt-Anchor\" href=\"#逆序对解释\"></a> 逆序对解释：</h3>\n<p>因为数组是从小到大复制的，从<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mo stretchy=\"false\">[</mo><mi>q</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">A[q]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">q</span><span class=\"mclose\">]</span></span></span></span>复制到<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>T</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">T[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span>时，<strong>左边还没来得及复制的那一些元素</strong>就是左边所有比<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mo stretchy=\"false\">[</mo><mi>q</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">A[q]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">q</span><span class=\"mclose\">]</span></span></span></span>大的数，此时只需要在**左边加上<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi><mo>−</mo><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">m-p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">p</span></span></span></span>**即可。</p>\n<p>###快读模版</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>,f = <span class=\"number\">1</span>;<span class=\"keyword\">char</span> c = getchar();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(!<span class=\"built_in\">isdigit</span>(c))&#123;<span class=\"keyword\">if</span>(c==<span class=\"string\">'-'</span>)f=<span class=\"number\">-1</span>;<span class=\"keyword\">else</span> f=<span class=\"number\">1</span>;c=getchar();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"built_in\">isdigit</span>(c))&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(c^<span class=\"number\">48</span>);c=getchar();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x*f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">write_num</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(x&gt;<span class=\"number\">9</span>)write_num(x/<span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">putchar</span>((x%<span class=\"number\">10</span>)+<span class=\"number\">48</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(x &lt; <span class=\"number\">0</span>)<span class=\"built_in\">putchar</span>(<span class=\"string\">'-'</span>),x=-x;</span><br><span class=\"line\">\twrite_num(x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"test\"><a class=\"markdownIt-Anchor\" href=\"#test\"></a> test</h3>\n<p>####以下便是完整的代码~~，欢迎拍砖~~</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a[maxn],t[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> *A,<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y,<span class=\"keyword\">int</span> *T,<span class=\"keyword\">int</span> &amp;cnt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(y-x&gt;<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> m = x+(y-x)/<span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> p = x,q = m,i = x;</span><br><span class=\"line\">\t\tmerge_sort(A,x,m,T,cnt);</span><br><span class=\"line\">\t\tmerge_sort(A,m,y,T,cnt);</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(p&lt;m || q&lt;y)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(q &gt;= y || (p&lt;m &amp;&amp; A[p]&lt;=A[q])) T[i++] = A[p++];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> &#123;T[i++] = A[q++];cnt += m - p; &#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = x;i &lt; y;i++)A[i] = T[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>,f = <span class=\"number\">1</span>;<span class=\"keyword\">char</span> c = getchar();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(!<span class=\"built_in\">isdigit</span>(c))&#123;<span class=\"keyword\">if</span>(c==<span class=\"string\">'-'</span>)f=<span class=\"number\">-1</span>;<span class=\"keyword\">else</span> f=<span class=\"number\">1</span>;c=getchar();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"built_in\">isdigit</span>(c))&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(c^<span class=\"number\">48</span>);c=getchar();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x*f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">write_num</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(x&gt;<span class=\"number\">9</span>)write_num(x/<span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">putchar</span>((x%<span class=\"number\">10</span>)+<span class=\"number\">48</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(x &lt; <span class=\"number\">0</span>)<span class=\"built_in\">putchar</span>(<span class=\"string\">'-'</span>),x=-x;</span><br><span class=\"line\">\twrite_num(x);</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n = read(),cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">\t\ta[i] = read();</span><br><span class=\"line\">\tmerge_sort(a,<span class=\"number\">0</span>,n,t,cnt);</span><br><span class=\"line\">\twrite(cnt),<span class=\"built_in\">putchar</span>(<span class=\"string\">'\\n'</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">\t\twrite(a[i]),<span class=\"built_in\">putchar</span>(<span class=\"string\">' '</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"归并排序原理\"><a class=\"markdownIt-Anchor\" href=\"#归并排序原理\"></a> 归并排序原理</h2>\n<p><img src=\"https://img2018.cnblogs.com/blog/1653262/202001/1653262-20200123085200050-668412306.png\" alt=\"\" /><br />\n先对源数组拆拆拆！拆成最小的<strong>单个元素</strong>，再分别合并，合并时保证两数组有序（单元素有序，尽管非常平凡），<br />\n然后再一路合并下去，就得到有序的大数组了。<br />\n这种思想叫分治，就是&quot;<strong>分而治之</strong>&quot;</p>\n<p>归并排序模版</p>","more":"<p><em>使用前须将cnt置为0</em></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> *A,<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y,<span class=\"keyword\">int</span> *T,<span class=\"keyword\">int</span> &amp;cnt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(y-x&gt;<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> m = x+(y-x)/<span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> p = x,q = m,i = x;</span><br><span class=\"line\">\t\tmerge_sort(A,x,m,T,cnt);</span><br><span class=\"line\">\t\tmerge_sort(A,m,y,T,cnt);</span><br><span class=\"line\">                <span class=\"comment\">//此时左半右半都有序</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(p&lt;m || q&lt;y)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(q &gt;= y || (p&lt;m &amp;&amp; A[p]&lt;=A[q])) T[i++] = A[p++];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> &#123;T[i++] = A[q++];cnt += m - p; &#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = x;i &lt; y;i++)A[i] = T[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"逆序对解释\"><a class=\"markdownIt-Anchor\" href=\"#逆序对解释\"></a> 逆序对解释：</h3>\n<p>因为数组是从小到大复制的，从<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mo stretchy=\"false\">[</mo><mi>q</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">A[q]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">q</span><span class=\"mclose\">]</span></span></span></span>复制到<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>T</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">T[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span>时，<strong>左边还没来得及复制的那一些元素</strong>就是左边所有比<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mo stretchy=\"false\">[</mo><mi>q</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">A[q]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">q</span><span class=\"mclose\">]</span></span></span></span>大的数，此时只需要在**左边加上<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi><mo>−</mo><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">m-p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">p</span></span></span></span>**即可。</p>\n<p>###快读模版</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>,f = <span class=\"number\">1</span>;<span class=\"keyword\">char</span> c = getchar();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(!<span class=\"built_in\">isdigit</span>(c))&#123;<span class=\"keyword\">if</span>(c==<span class=\"string\">'-'</span>)f=<span class=\"number\">-1</span>;<span class=\"keyword\">else</span> f=<span class=\"number\">1</span>;c=getchar();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"built_in\">isdigit</span>(c))&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(c^<span class=\"number\">48</span>);c=getchar();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x*f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">write_num</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(x&gt;<span class=\"number\">9</span>)write_num(x/<span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">putchar</span>((x%<span class=\"number\">10</span>)+<span class=\"number\">48</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(x &lt; <span class=\"number\">0</span>)<span class=\"built_in\">putchar</span>(<span class=\"string\">'-'</span>),x=-x;</span><br><span class=\"line\">\twrite_num(x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"test\"><a class=\"markdownIt-Anchor\" href=\"#test\"></a> test</h3>\n<p>####以下便是完整的代码~~，欢迎拍砖~~</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a[maxn],t[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> *A,<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y,<span class=\"keyword\">int</span> *T,<span class=\"keyword\">int</span> &amp;cnt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(y-x&gt;<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> m = x+(y-x)/<span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> p = x,q = m,i = x;</span><br><span class=\"line\">\t\tmerge_sort(A,x,m,T,cnt);</span><br><span class=\"line\">\t\tmerge_sort(A,m,y,T,cnt);</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(p&lt;m || q&lt;y)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(q &gt;= y || (p&lt;m &amp;&amp; A[p]&lt;=A[q])) T[i++] = A[p++];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> &#123;T[i++] = A[q++];cnt += m - p; &#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = x;i &lt; y;i++)A[i] = T[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>,f = <span class=\"number\">1</span>;<span class=\"keyword\">char</span> c = getchar();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(!<span class=\"built_in\">isdigit</span>(c))&#123;<span class=\"keyword\">if</span>(c==<span class=\"string\">'-'</span>)f=<span class=\"number\">-1</span>;<span class=\"keyword\">else</span> f=<span class=\"number\">1</span>;c=getchar();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"built_in\">isdigit</span>(c))&#123;x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(c^<span class=\"number\">48</span>);c=getchar();&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x*f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">write_num</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(x&gt;<span class=\"number\">9</span>)write_num(x/<span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">putchar</span>((x%<span class=\"number\">10</span>)+<span class=\"number\">48</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(x &lt; <span class=\"number\">0</span>)<span class=\"built_in\">putchar</span>(<span class=\"string\">'-'</span>),x=-x;</span><br><span class=\"line\">\twrite_num(x);</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n = read(),cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">\t\ta[i] = read();</span><br><span class=\"line\">\tmerge_sort(a,<span class=\"number\">0</span>,n,t,cnt);</span><br><span class=\"line\">\twrite(cnt),<span class=\"built_in\">putchar</span>(<span class=\"string\">'\\n'</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">\t\twrite(a[i]),<span class=\"built_in\">putchar</span>(<span class=\"string\">' '</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Vector","date":"2020-04-09T07:05:18.000Z","_content":"这是我第一次写博客，请多指教！\n\nvector是一种向量容器，说白了就是可以改变大小的数组。\n\nvector是一个模板类，如果直接这样会报错：\n```cpp\nvector a; //报错，因为要指定模板。 \n```\n需要像这样：\n<!--more-->\n```cpp\nvector<int> a;\n       ^/*这里可以改成别的类型,float,long等等......*/\n```\n\n\n那么，什么是 *****模板***** 呢？\n\n> 模板是C++支持**参数化**多态的工具，使用模板可以使用户为类或者函数声明一种一般模式，使得类中的某些数据成员或者成\n员函数的参数、返回值取得任意类型。\n\n> 　　模板是一种对**类型**进行**参数化**的工具；\n\n> 　　通常有两种形式：**函数模板**和**类模板**；\n\n> 　　函数模板针对仅**参数类型**不同的**函数**；\n\n> 　　类模板针对仅**数据成员**和**成员函数类型**不同的类。\n\n> **使用模板的目的就是能够让程序员编写与类型无关的代码。**比如编写了一个交换两个整型int\n\n> 类型的swap函数，这个函数就只能实现**int**\n\n> 型，对**double**，字符这些类型无法实现，要实现这些类型的交换就要重新编写另一个**swap**函数。使用模板的目的就是\n要让这程序的实现与类型无关，比如一个**swap**模板函数，即可以实现**int**\n\n> 型，又可以实现double型的交换。模板可以应用于函数和类。下面分别介绍。\n\n> **注意：模板的声明或定义只能在全局，命名空间或类范围内进行。即不能在局部范围，函数内进行，比如不能在main函数中\n声明或定义一个模板。**\n\n**具体的请看\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\--\\>**[点我点我!](http://www.\ncnblogs.com/gw811/archive/2012/10/25/2736224.html)\n\n```cpp\n\n在此就不多讲了。\n\nC++vector函数:\n\nint size():\n\n作用：获取vector大小。\n\nresize(int x)\n\n作用：变长为x。\n\nclear()\n\n作用：清空vector。\n\npush_back(),pop_back():\n\n栈操作。\n\n \n\nvector                 // 创建一个空的vector。\nvector c1(c2)          // 复制一个vector\nvector c(n)            // 创建一个vector，含有n个数据，数据均已缺省构造产生\nvector c(n, elem)      // 创建一个含有n个elem拷贝的vector\nvector c(beg,end)      // 创建一个含有n个elem拷贝的vector\n\n\n1. 析构函数\nc.~vector ()           // 销毁所有数据，释放内存\n\n\n2. 成员函数\nc.assign(beg,end)c.assign(n,elem)\n　　将[beg; end)区间中的数据赋值给c。将n个elem的拷贝赋值给c。\nc.at(idx)\n　　传回索引idx所指的数据，如果idx越界，抛出out_of_range。\n\n\nc.back()      // 传回最后一个数据，不检查这个数据是否存在。\nc.begin()     // 传回迭代器中的第一个数据地址。\nc.capacity()  // 返回容器中数据个数。\nc.clear()     // 移除容器中所有数据。\nc.empty()     // 判断容器是否为空。\nc.end()       // 指向迭代器中末端元素的下一个，指向一个不存在元素。\nc.erase(pos)  // 删除pos位置的数据，传回下一个数据的位置。\nc.erase(beg,end)  //删除[beg,end)区间的数据，传回下一个数据的位置。\nc.front()     // 传回第一个数据。\n\n\nget_allocator // 使用构造函数返回一个拷贝。\n\n\nc.insert(pos,elem)    // 在pos位置插入一个elem拷贝，传回新数据位置。\nc.insert(pos,n,elem)  // 在pos位置插入n个elem数据。无返回值。\nc.insert(pos,beg,end) // 在pos位置插入在[beg,end)区间的数据。无返回值。\n　　\nc.max_size()       // 返回容器中最大数据的数量。\nc.pop_back()       // 删除最后一个数据。\nc.push_back(elem)  // 在尾部加入一个数据。\nc.rbegin()         // 传回一个逆向队列的第一个数据。\nc.rend()           // 传回一个逆向队列的最后一个数据的下一个位置。\nc.resize(num)      // 重新指定队列的长度。\nc.reserve()        // 保留适当的容量。\nc.size()           // 返回容器中实际数据的个数。\nc1.swap(c2)\nswap(c1,c2)        // 将c1和c2元素互换。同上操作。\n\noperator[]         // 返回容器中指定位置的一个引用。\n```\n\n**举个例子吧！**\n```cpp\n#include <iostream>\n#include <vector>\nusing namespace std;\n\n\nint main()\n{\n    vector<int> s;\n    s.resize(10);            //变长为10\n    s[0] = 1;\n    s[1] = 2;\n    s[2] = 3;\n    s[3] = 4;\n    s[4] = 5;\n    s[5] = 6;\n    s[6] = 7;\n    s[7] = 8;\n    s[8] = 9;\n    s[9] = 10;\n    cout << \"vector:\" << endl;\n    for (auto i = s.cbegin(); i != s.cend(); i++)\n        cout << *i << \"  \";\n\n\n    cout << \"\\n栈操作push_back加入18\\n\";\n    s.push_back(18);\n    for (auto i = s.cbegin(); i != s.cend(); i++)\n        cout << *i << \"  \";\n    cout << endl;\n\n\n    cout << \"\\n栈操作push_back加入19\\n\";\n    s.push_back(19);\n    for (auto i = s.cbegin(); i != s.cend(); i++)\n        cout << *i << \"  \";\n    cout << endl;\n\n\n    cout << \"\\n栈操作pop_back放走了最后的元素:\\n\";\n    s.pop_back();\n    for (auto i = s.cbegin(); i != s.cend(); i++)\n        cout << *i << \"  \";\n    cout << endl;\n\n    cout << \"\\n操作erase(s.begin+3):\\n\";\n    s.erase(s.begin()+3);\n    for (auto i = s.cbegin(); i != s.cend(); i++)\n        cout << *i << \"  \";\n    cout << endl;\n}\n```\n\n运行截图：\n\n![](Pictures/10000201000002DA000001DE39091E0CCD706666.png)","source":"_posts/Vector.md","raw":"---\ntitle: Vector\ndate: 2020-04-09 15:05:18\ntags: 心得分享\n---\n这是我第一次写博客，请多指教！\n\nvector是一种向量容器，说白了就是可以改变大小的数组。\n\nvector是一个模板类，如果直接这样会报错：\n```cpp\nvector a; //报错，因为要指定模板。 \n```\n需要像这样：\n<!--more-->\n```cpp\nvector<int> a;\n       ^/*这里可以改成别的类型,float,long等等......*/\n```\n\n\n那么，什么是 *****模板***** 呢？\n\n> 模板是C++支持**参数化**多态的工具，使用模板可以使用户为类或者函数声明一种一般模式，使得类中的某些数据成员或者成\n员函数的参数、返回值取得任意类型。\n\n> 　　模板是一种对**类型**进行**参数化**的工具；\n\n> 　　通常有两种形式：**函数模板**和**类模板**；\n\n> 　　函数模板针对仅**参数类型**不同的**函数**；\n\n> 　　类模板针对仅**数据成员**和**成员函数类型**不同的类。\n\n> **使用模板的目的就是能够让程序员编写与类型无关的代码。**比如编写了一个交换两个整型int\n\n> 类型的swap函数，这个函数就只能实现**int**\n\n> 型，对**double**，字符这些类型无法实现，要实现这些类型的交换就要重新编写另一个**swap**函数。使用模板的目的就是\n要让这程序的实现与类型无关，比如一个**swap**模板函数，即可以实现**int**\n\n> 型，又可以实现double型的交换。模板可以应用于函数和类。下面分别介绍。\n\n> **注意：模板的声明或定义只能在全局，命名空间或类范围内进行。即不能在局部范围，函数内进行，比如不能在main函数中\n声明或定义一个模板。**\n\n**具体的请看\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\--\\>**[点我点我!](http://www.\ncnblogs.com/gw811/archive/2012/10/25/2736224.html)\n\n```cpp\n\n在此就不多讲了。\n\nC++vector函数:\n\nint size():\n\n作用：获取vector大小。\n\nresize(int x)\n\n作用：变长为x。\n\nclear()\n\n作用：清空vector。\n\npush_back(),pop_back():\n\n栈操作。\n\n \n\nvector                 // 创建一个空的vector。\nvector c1(c2)          // 复制一个vector\nvector c(n)            // 创建一个vector，含有n个数据，数据均已缺省构造产生\nvector c(n, elem)      // 创建一个含有n个elem拷贝的vector\nvector c(beg,end)      // 创建一个含有n个elem拷贝的vector\n\n\n1. 析构函数\nc.~vector ()           // 销毁所有数据，释放内存\n\n\n2. 成员函数\nc.assign(beg,end)c.assign(n,elem)\n　　将[beg; end)区间中的数据赋值给c。将n个elem的拷贝赋值给c。\nc.at(idx)\n　　传回索引idx所指的数据，如果idx越界，抛出out_of_range。\n\n\nc.back()      // 传回最后一个数据，不检查这个数据是否存在。\nc.begin()     // 传回迭代器中的第一个数据地址。\nc.capacity()  // 返回容器中数据个数。\nc.clear()     // 移除容器中所有数据。\nc.empty()     // 判断容器是否为空。\nc.end()       // 指向迭代器中末端元素的下一个，指向一个不存在元素。\nc.erase(pos)  // 删除pos位置的数据，传回下一个数据的位置。\nc.erase(beg,end)  //删除[beg,end)区间的数据，传回下一个数据的位置。\nc.front()     // 传回第一个数据。\n\n\nget_allocator // 使用构造函数返回一个拷贝。\n\n\nc.insert(pos,elem)    // 在pos位置插入一个elem拷贝，传回新数据位置。\nc.insert(pos,n,elem)  // 在pos位置插入n个elem数据。无返回值。\nc.insert(pos,beg,end) // 在pos位置插入在[beg,end)区间的数据。无返回值。\n　　\nc.max_size()       // 返回容器中最大数据的数量。\nc.pop_back()       // 删除最后一个数据。\nc.push_back(elem)  // 在尾部加入一个数据。\nc.rbegin()         // 传回一个逆向队列的第一个数据。\nc.rend()           // 传回一个逆向队列的最后一个数据的下一个位置。\nc.resize(num)      // 重新指定队列的长度。\nc.reserve()        // 保留适当的容量。\nc.size()           // 返回容器中实际数据的个数。\nc1.swap(c2)\nswap(c1,c2)        // 将c1和c2元素互换。同上操作。\n\noperator[]         // 返回容器中指定位置的一个引用。\n```\n\n**举个例子吧！**\n```cpp\n#include <iostream>\n#include <vector>\nusing namespace std;\n\n\nint main()\n{\n    vector<int> s;\n    s.resize(10);            //变长为10\n    s[0] = 1;\n    s[1] = 2;\n    s[2] = 3;\n    s[3] = 4;\n    s[4] = 5;\n    s[5] = 6;\n    s[6] = 7;\n    s[7] = 8;\n    s[8] = 9;\n    s[9] = 10;\n    cout << \"vector:\" << endl;\n    for (auto i = s.cbegin(); i != s.cend(); i++)\n        cout << *i << \"  \";\n\n\n    cout << \"\\n栈操作push_back加入18\\n\";\n    s.push_back(18);\n    for (auto i = s.cbegin(); i != s.cend(); i++)\n        cout << *i << \"  \";\n    cout << endl;\n\n\n    cout << \"\\n栈操作push_back加入19\\n\";\n    s.push_back(19);\n    for (auto i = s.cbegin(); i != s.cend(); i++)\n        cout << *i << \"  \";\n    cout << endl;\n\n\n    cout << \"\\n栈操作pop_back放走了最后的元素:\\n\";\n    s.pop_back();\n    for (auto i = s.cbegin(); i != s.cend(); i++)\n        cout << *i << \"  \";\n    cout << endl;\n\n    cout << \"\\n操作erase(s.begin+3):\\n\";\n    s.erase(s.begin()+3);\n    for (auto i = s.cbegin(); i != s.cend(); i++)\n        cout << *i << \"  \";\n    cout << endl;\n}\n```\n\n运行截图：\n\n![](Pictures/10000201000002DA000001DE39091E0CCD706666.png)","slug":"Vector","published":1,"updated":"2020-04-09T07:53:12.360Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck95gnh5d000a5cvf8q3t34wz","content":"<p>这是我第一次写博客，请多指教！</p>\n<p>vector是一种向量容器，说白了就是可以改变大小的数组。</p>\n<p>vector是一个模板类，如果直接这样会报错：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">vector</span> a; <span class=\"comment\">//报错，因为要指定模板。</span></span><br></pre></td></tr></table></figure>\n<p>需要像这样：</p>\n<a id=\"more\"></a>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; a;</span><br><span class=\"line\">       ^<span class=\"comment\">/*这里可以改成别的类型,float,long等等......*/</span></span><br></pre></td></tr></table></figure>\n<p>那么，什么是 <em><strong><strong>模板</strong></strong></em> 呢？</p>\n<blockquote>\n<p>模板是C++支持<strong>参数化</strong>多态的工具，使用模板可以使用户为类或者函数声明一种一般模式，使得类中的某些数据成员或者成<br />\n员函数的参数、返回值取得任意类型。</p>\n</blockquote>\n<blockquote>\n<p>模板是一种对<strong>类型</strong>进行<strong>参数化</strong>的工具；</p>\n</blockquote>\n<blockquote>\n<p>通常有两种形式：<strong>函数模板</strong>和<strong>类模板</strong>；</p>\n</blockquote>\n<blockquote>\n<p>函数模板针对仅<strong>参数类型</strong>不同的<strong>函数</strong>；</p>\n</blockquote>\n<blockquote>\n<p>类模板针对仅<strong>数据成员</strong>和<strong>成员函数类型</strong>不同的类。</p>\n</blockquote>\n<blockquote>\n<p>**使用模板的目的就是能够让程序员编写与类型无关的代码。**比如编写了一个交换两个整型int</p>\n</blockquote>\n<blockquote>\n<p>类型的swap函数，这个函数就只能实现<strong>int</strong></p>\n</blockquote>\n<blockquote>\n<p>型，对<strong>double</strong>，字符这些类型无法实现，要实现这些类型的交换就要重新编写另一个<strong>swap</strong>函数。使用模板的目的就是<br />\n要让这程序的实现与类型无关，比如一个<strong>swap</strong>模板函数，即可以实现<strong>int</strong></p>\n</blockquote>\n<blockquote>\n<p>型，又可以实现double型的交换。模板可以应用于函数和类。下面分别介绍。</p>\n</blockquote>\n<blockquote>\n<p><strong>注意：模板的声明或定义只能在全局，命名空间或类范围内进行。即不能在局部范围，函数内进行，比如不能在main函数中<br />\n声明或定义一个模板。</strong></p>\n</blockquote>\n<p><strong>具体的请看------------------------------------&gt;</strong>[点我点我!](<a href=\"http://www\" target=\"_blank\" rel=\"noopener\">http://www</a>.<br />\n<a href=\"http://cnblogs.com/gw811/archive/2012/10/25/2736224.html\" target=\"_blank\" rel=\"noopener\">cnblogs.com/gw811/archive/2012/10/25/2736224.html</a>)</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">在此就不多讲了。</span><br><span class=\"line\"></span><br><span class=\"line\">C++<span class=\"built_in\">vector</span>函数:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\">作用：获取vector大小。</span><br><span class=\"line\"></span><br><span class=\"line\">resize(<span class=\"keyword\">int</span> x)</span><br><span class=\"line\"></span><br><span class=\"line\">作用：变长为x。</span><br><span class=\"line\"></span><br><span class=\"line\">clear()</span><br><span class=\"line\"></span><br><span class=\"line\">作用：清空<span class=\"built_in\">vector</span>。</span><br><span class=\"line\"></span><br><span class=\"line\">push_back(),pop_back():</span><br><span class=\"line\"></span><br><span class=\"line\">栈操作。</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">vector</span>                 <span class=\"comment\">// 创建一个空的vector。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">vector</span> <span class=\"title\">c1</span><span class=\"params\">(c2)</span>          <span class=\"comment\">// 复制一个vector</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">vector</span> <span class=\"title\">c</span><span class=\"params\">(n)</span>            <span class=\"comment\">// 创建一个vector，含有n个数据，数据均已缺省构造产生</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">vector</span> <span class=\"title\">c</span><span class=\"params\">(n, elem)</span>      <span class=\"comment\">// 创建一个含有n个elem拷贝的vector</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">vector</span> <span class=\"title\">c</span><span class=\"params\">(beg,end)</span>      <span class=\"comment\">// 创建一个含有n个elem拷贝的vector</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\">1. 析构函数</span><br><span class=\"line\">c.~<span class=\"built_in\">vector</span> ()           <span class=\"comment\">// 销毁所有数据，释放内存</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span> 成员函数</span><br><span class=\"line\">c.assign(beg,end)c.assign(n,elem)</span><br><span class=\"line\">　　将[beg; end)区间中的数据赋值给c。将n个elem的拷贝赋值给c。</span><br><span class=\"line\">c.at(idx)</span><br><span class=\"line\">　　传回索引idx所指的数据，如果idx越界，抛出out_of_range。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">c.back()      <span class=\"comment\">// 传回最后一个数据，不检查这个数据是否存在。</span></span><br><span class=\"line\">c.begin()     <span class=\"comment\">// 传回迭代器中的第一个数据地址。</span></span><br><span class=\"line\">c.capacity()  <span class=\"comment\">// 返回容器中数据个数。</span></span><br><span class=\"line\">c.clear()     <span class=\"comment\">// 移除容器中所有数据。</span></span><br><span class=\"line\">c.empty()     <span class=\"comment\">// 判断容器是否为空。</span></span><br><span class=\"line\">c.end()       <span class=\"comment\">// 指向迭代器中末端元素的下一个，指向一个不存在元素。</span></span><br><span class=\"line\">c.erase(pos)  <span class=\"comment\">// 删除pos位置的数据，传回下一个数据的位置。</span></span><br><span class=\"line\">c.erase(beg,end)  <span class=\"comment\">//删除[beg,end)区间的数据，传回下一个数据的位置。</span></span><br><span class=\"line\">c.front()     <span class=\"comment\">// 传回第一个数据。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">get_allocator <span class=\"comment\">// 使用构造函数返回一个拷贝。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">c.insert(pos,elem)    <span class=\"comment\">// 在pos位置插入一个elem拷贝，传回新数据位置。</span></span><br><span class=\"line\">c.insert(pos,n,elem)  <span class=\"comment\">// 在pos位置插入n个elem数据。无返回值。</span></span><br><span class=\"line\">c.insert(pos,beg,end) <span class=\"comment\">// 在pos位置插入在[beg,end)区间的数据。无返回值。</span></span><br><span class=\"line\">　　</span><br><span class=\"line\">c.max_size()       <span class=\"comment\">// 返回容器中最大数据的数量。</span></span><br><span class=\"line\">c.pop_back()       <span class=\"comment\">// 删除最后一个数据。</span></span><br><span class=\"line\">c.push_back(elem)  <span class=\"comment\">// 在尾部加入一个数据。</span></span><br><span class=\"line\">c.rbegin()         <span class=\"comment\">// 传回一个逆向队列的第一个数据。</span></span><br><span class=\"line\">c.rend()           <span class=\"comment\">// 传回一个逆向队列的最后一个数据的下一个位置。</span></span><br><span class=\"line\">c.resize(num)      <span class=\"comment\">// 重新指定队列的长度。</span></span><br><span class=\"line\">c.reserve()        <span class=\"comment\">// 保留适当的容量。</span></span><br><span class=\"line\">c.size()           <span class=\"comment\">// 返回容器中实际数据的个数。</span></span><br><span class=\"line\">c1.swap(c2)</span><br><span class=\"line\">swap(c1,c2)        <span class=\"comment\">// 将c1和c2元素互换。同上操作。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">operator</span>[]         <span class=\"comment\">// 返回容器中指定位置的一个引用。</span></span><br></pre></td></tr></table></figure>\n<p><strong>举个例子吧！</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; s;</span><br><span class=\"line\">    s.resize(<span class=\"number\">10</span>);            <span class=\"comment\">//变长为10</span></span><br><span class=\"line\">    s[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    s[<span class=\"number\">1</span>] = <span class=\"number\">2</span>;</span><br><span class=\"line\">    s[<span class=\"number\">2</span>] = <span class=\"number\">3</span>;</span><br><span class=\"line\">    s[<span class=\"number\">3</span>] = <span class=\"number\">4</span>;</span><br><span class=\"line\">    s[<span class=\"number\">4</span>] = <span class=\"number\">5</span>;</span><br><span class=\"line\">    s[<span class=\"number\">5</span>] = <span class=\"number\">6</span>;</span><br><span class=\"line\">    s[<span class=\"number\">6</span>] = <span class=\"number\">7</span>;</span><br><span class=\"line\">    s[<span class=\"number\">7</span>] = <span class=\"number\">8</span>;</span><br><span class=\"line\">    s[<span class=\"number\">8</span>] = <span class=\"number\">9</span>;</span><br><span class=\"line\">    s[<span class=\"number\">9</span>] = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"vector:\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i = s.cbegin(); i != s.cend(); i++)</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; *i &lt;&lt; <span class=\"string\">\"  \"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"\\n栈操作push_back加入18\\n\"</span>;</span><br><span class=\"line\">    s.push_back(<span class=\"number\">18</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i = s.cbegin(); i != s.cend(); i++)</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; *i &lt;&lt; <span class=\"string\">\"  \"</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"\\n栈操作push_back加入19\\n\"</span>;</span><br><span class=\"line\">    s.push_back(<span class=\"number\">19</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i = s.cbegin(); i != s.cend(); i++)</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; *i &lt;&lt; <span class=\"string\">\"  \"</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"\\n栈操作pop_back放走了最后的元素:\\n\"</span>;</span><br><span class=\"line\">    s.pop_back();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i = s.cbegin(); i != s.cend(); i++)</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; *i &lt;&lt; <span class=\"string\">\"  \"</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"\\n操作erase(s.begin+3):\\n\"</span>;</span><br><span class=\"line\">    s.erase(s.begin()+<span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i = s.cbegin(); i != s.cend(); i++)</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; *i &lt;&lt; <span class=\"string\">\"  \"</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行截图：</p>\n<p><img src=\"Pictures/10000201000002DA000001DE39091E0CCD706666.png\" alt=\"\" /></p>\n","site":{"data":{}},"excerpt":"<p>这是我第一次写博客，请多指教！</p>\n<p>vector是一种向量容器，说白了就是可以改变大小的数组。</p>\n<p>vector是一个模板类，如果直接这样会报错：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">vector</span> a; <span class=\"comment\">//报错，因为要指定模板。</span></span><br></pre></td></tr></table></figure>\n<p>需要像这样：</p>","more":"<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; a;</span><br><span class=\"line\">       ^<span class=\"comment\">/*这里可以改成别的类型,float,long等等......*/</span></span><br></pre></td></tr></table></figure>\n<p>那么，什么是 <em><strong><strong>模板</strong></strong></em> 呢？</p>\n<blockquote>\n<p>模板是C++支持<strong>参数化</strong>多态的工具，使用模板可以使用户为类或者函数声明一种一般模式，使得类中的某些数据成员或者成<br />\n员函数的参数、返回值取得任意类型。</p>\n</blockquote>\n<blockquote>\n<p>模板是一种对<strong>类型</strong>进行<strong>参数化</strong>的工具；</p>\n</blockquote>\n<blockquote>\n<p>通常有两种形式：<strong>函数模板</strong>和<strong>类模板</strong>；</p>\n</blockquote>\n<blockquote>\n<p>函数模板针对仅<strong>参数类型</strong>不同的<strong>函数</strong>；</p>\n</blockquote>\n<blockquote>\n<p>类模板针对仅<strong>数据成员</strong>和<strong>成员函数类型</strong>不同的类。</p>\n</blockquote>\n<blockquote>\n<p>**使用模板的目的就是能够让程序员编写与类型无关的代码。**比如编写了一个交换两个整型int</p>\n</blockquote>\n<blockquote>\n<p>类型的swap函数，这个函数就只能实现<strong>int</strong></p>\n</blockquote>\n<blockquote>\n<p>型，对<strong>double</strong>，字符这些类型无法实现，要实现这些类型的交换就要重新编写另一个<strong>swap</strong>函数。使用模板的目的就是<br />\n要让这程序的实现与类型无关，比如一个<strong>swap</strong>模板函数，即可以实现<strong>int</strong></p>\n</blockquote>\n<blockquote>\n<p>型，又可以实现double型的交换。模板可以应用于函数和类。下面分别介绍。</p>\n</blockquote>\n<blockquote>\n<p><strong>注意：模板的声明或定义只能在全局，命名空间或类范围内进行。即不能在局部范围，函数内进行，比如不能在main函数中<br />\n声明或定义一个模板。</strong></p>\n</blockquote>\n<p><strong>具体的请看------------------------------------&gt;</strong>[点我点我!](<a href=\"http://www\" target=\"_blank\" rel=\"noopener\">http://www</a>.<br />\n<a href=\"http://cnblogs.com/gw811/archive/2012/10/25/2736224.html\" target=\"_blank\" rel=\"noopener\">cnblogs.com/gw811/archive/2012/10/25/2736224.html</a>)</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">在此就不多讲了。</span><br><span class=\"line\"></span><br><span class=\"line\">C++<span class=\"built_in\">vector</span>函数:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\">作用：获取vector大小。</span><br><span class=\"line\"></span><br><span class=\"line\">resize(<span class=\"keyword\">int</span> x)</span><br><span class=\"line\"></span><br><span class=\"line\">作用：变长为x。</span><br><span class=\"line\"></span><br><span class=\"line\">clear()</span><br><span class=\"line\"></span><br><span class=\"line\">作用：清空<span class=\"built_in\">vector</span>。</span><br><span class=\"line\"></span><br><span class=\"line\">push_back(),pop_back():</span><br><span class=\"line\"></span><br><span class=\"line\">栈操作。</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">vector</span>                 <span class=\"comment\">// 创建一个空的vector。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">vector</span> <span class=\"title\">c1</span><span class=\"params\">(c2)</span>          <span class=\"comment\">// 复制一个vector</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">vector</span> <span class=\"title\">c</span><span class=\"params\">(n)</span>            <span class=\"comment\">// 创建一个vector，含有n个数据，数据均已缺省构造产生</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">vector</span> <span class=\"title\">c</span><span class=\"params\">(n, elem)</span>      <span class=\"comment\">// 创建一个含有n个elem拷贝的vector</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">vector</span> <span class=\"title\">c</span><span class=\"params\">(beg,end)</span>      <span class=\"comment\">// 创建一个含有n个elem拷贝的vector</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\">1. 析构函数</span><br><span class=\"line\">c.~<span class=\"built_in\">vector</span> ()           <span class=\"comment\">// 销毁所有数据，释放内存</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span> 成员函数</span><br><span class=\"line\">c.assign(beg,end)c.assign(n,elem)</span><br><span class=\"line\">　　将[beg; end)区间中的数据赋值给c。将n个elem的拷贝赋值给c。</span><br><span class=\"line\">c.at(idx)</span><br><span class=\"line\">　　传回索引idx所指的数据，如果idx越界，抛出out_of_range。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">c.back()      <span class=\"comment\">// 传回最后一个数据，不检查这个数据是否存在。</span></span><br><span class=\"line\">c.begin()     <span class=\"comment\">// 传回迭代器中的第一个数据地址。</span></span><br><span class=\"line\">c.capacity()  <span class=\"comment\">// 返回容器中数据个数。</span></span><br><span class=\"line\">c.clear()     <span class=\"comment\">// 移除容器中所有数据。</span></span><br><span class=\"line\">c.empty()     <span class=\"comment\">// 判断容器是否为空。</span></span><br><span class=\"line\">c.end()       <span class=\"comment\">// 指向迭代器中末端元素的下一个，指向一个不存在元素。</span></span><br><span class=\"line\">c.erase(pos)  <span class=\"comment\">// 删除pos位置的数据，传回下一个数据的位置。</span></span><br><span class=\"line\">c.erase(beg,end)  <span class=\"comment\">//删除[beg,end)区间的数据，传回下一个数据的位置。</span></span><br><span class=\"line\">c.front()     <span class=\"comment\">// 传回第一个数据。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">get_allocator <span class=\"comment\">// 使用构造函数返回一个拷贝。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">c.insert(pos,elem)    <span class=\"comment\">// 在pos位置插入一个elem拷贝，传回新数据位置。</span></span><br><span class=\"line\">c.insert(pos,n,elem)  <span class=\"comment\">// 在pos位置插入n个elem数据。无返回值。</span></span><br><span class=\"line\">c.insert(pos,beg,end) <span class=\"comment\">// 在pos位置插入在[beg,end)区间的数据。无返回值。</span></span><br><span class=\"line\">　　</span><br><span class=\"line\">c.max_size()       <span class=\"comment\">// 返回容器中最大数据的数量。</span></span><br><span class=\"line\">c.pop_back()       <span class=\"comment\">// 删除最后一个数据。</span></span><br><span class=\"line\">c.push_back(elem)  <span class=\"comment\">// 在尾部加入一个数据。</span></span><br><span class=\"line\">c.rbegin()         <span class=\"comment\">// 传回一个逆向队列的第一个数据。</span></span><br><span class=\"line\">c.rend()           <span class=\"comment\">// 传回一个逆向队列的最后一个数据的下一个位置。</span></span><br><span class=\"line\">c.resize(num)      <span class=\"comment\">// 重新指定队列的长度。</span></span><br><span class=\"line\">c.reserve()        <span class=\"comment\">// 保留适当的容量。</span></span><br><span class=\"line\">c.size()           <span class=\"comment\">// 返回容器中实际数据的个数。</span></span><br><span class=\"line\">c1.swap(c2)</span><br><span class=\"line\">swap(c1,c2)        <span class=\"comment\">// 将c1和c2元素互换。同上操作。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">operator</span>[]         <span class=\"comment\">// 返回容器中指定位置的一个引用。</span></span><br></pre></td></tr></table></figure>\n<p><strong>举个例子吧！</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; s;</span><br><span class=\"line\">    s.resize(<span class=\"number\">10</span>);            <span class=\"comment\">//变长为10</span></span><br><span class=\"line\">    s[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    s[<span class=\"number\">1</span>] = <span class=\"number\">2</span>;</span><br><span class=\"line\">    s[<span class=\"number\">2</span>] = <span class=\"number\">3</span>;</span><br><span class=\"line\">    s[<span class=\"number\">3</span>] = <span class=\"number\">4</span>;</span><br><span class=\"line\">    s[<span class=\"number\">4</span>] = <span class=\"number\">5</span>;</span><br><span class=\"line\">    s[<span class=\"number\">5</span>] = <span class=\"number\">6</span>;</span><br><span class=\"line\">    s[<span class=\"number\">6</span>] = <span class=\"number\">7</span>;</span><br><span class=\"line\">    s[<span class=\"number\">7</span>] = <span class=\"number\">8</span>;</span><br><span class=\"line\">    s[<span class=\"number\">8</span>] = <span class=\"number\">9</span>;</span><br><span class=\"line\">    s[<span class=\"number\">9</span>] = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"vector:\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i = s.cbegin(); i != s.cend(); i++)</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; *i &lt;&lt; <span class=\"string\">\"  \"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"\\n栈操作push_back加入18\\n\"</span>;</span><br><span class=\"line\">    s.push_back(<span class=\"number\">18</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i = s.cbegin(); i != s.cend(); i++)</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; *i &lt;&lt; <span class=\"string\">\"  \"</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"\\n栈操作push_back加入19\\n\"</span>;</span><br><span class=\"line\">    s.push_back(<span class=\"number\">19</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i = s.cbegin(); i != s.cend(); i++)</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; *i &lt;&lt; <span class=\"string\">\"  \"</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"\\n栈操作pop_back放走了最后的元素:\\n\"</span>;</span><br><span class=\"line\">    s.pop_back();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i = s.cbegin(); i != s.cend(); i++)</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; *i &lt;&lt; <span class=\"string\">\"  \"</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"\\n操作erase(s.begin+3):\\n\"</span>;</span><br><span class=\"line\">    s.erase(s.begin()+<span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i = s.cbegin(); i != s.cend(); i++)</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; *i &lt;&lt; <span class=\"string\">\"  \"</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行截图：</p>\n<p><img src=\"Pictures/10000201000002DA000001DE39091E0CCD706666.png\" alt=\"\" /></p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ck95gnh4n00015cvfay8t2wwg","tag_id":"ck95gnh4t00035cvf300o8nx7","_id":"ck95gnh4x00055cvf0w2s0ik9"},{"post_id":"ck95gnh4q00025cvf87dthavi","tag_id":"ck95gnh4t00035cvf300o8nx7","_id":"ck95gnh4x00065cvfdj1i6ebj"},{"post_id":"ck95gnh5b00075cvfh6ez63ss","tag_id":"ck95gnh4t00035cvf300o8nx7","_id":"ck95gnh5d00095cvf1tvv52g1"},{"post_id":"ck95gnh5c00085cvf5f738r2j","tag_id":"ck95gnh5e000b5cvfh3e5h093","_id":"ck95gnh5f000d5cvfc3sjaox7"},{"post_id":"ck95gnh5d000a5cvf8q3t34wz","tag_id":"ck95gnh5e000b5cvfh3e5h093","_id":"ck95gnh5f000e5cvf4kur0f67"}],"Tag":[{"name":"洛谷笔记","_id":"ck95gnh4t00035cvf300o8nx7"},{"name":"心得分享","_id":"ck95gnh5e000b5cvfh3e5h093"}]}}