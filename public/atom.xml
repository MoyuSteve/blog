<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>墨宇的博客</title>
  
  <subtitle>Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://0a1v37.coding-pages.com/"/>
  <updated>2020-04-09T07:53:12.360Z</updated>
  <id>https://0a1v37.coding-pages.com/</id>
  
  <author>
    <name>墨宇</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vector</title>
    <link href="https://0a1v37.coding-pages.com/2020/04/09/Vector/"/>
    <id>https://0a1v37.coding-pages.com/2020/04/09/Vector/</id>
    <published>2020-04-09T07:05:18.000Z</published>
    <updated>2020-04-09T07:53:12.360Z</updated>
    
    <content type="html"><![CDATA[<p>这是我第一次写博客，请多指教！</p><p>vector是一种向量容器，说白了就是可以改变大小的数组。</p><p>vector是一个模板类，如果直接这样会报错：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span> a; <span class="comment">//报错，因为要指定模板。</span></span><br></pre></td></tr></table></figure><p>需要像这样：</p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line">       ^<span class="comment">/*这里可以改成别的类型,float,long等等......*/</span></span><br></pre></td></tr></table></figure><p>那么，什么是 <em><strong><strong>模板</strong></strong></em> 呢？</p><blockquote><p>模板是C++支持<strong>参数化</strong>多态的工具，使用模板可以使用户为类或者函数声明一种一般模式，使得类中的某些数据成员或者成<br />员函数的参数、返回值取得任意类型。</p></blockquote><blockquote><p>模板是一种对<strong>类型</strong>进行<strong>参数化</strong>的工具；</p></blockquote><blockquote><p>通常有两种形式：<strong>函数模板</strong>和<strong>类模板</strong>；</p></blockquote><blockquote><p>函数模板针对仅<strong>参数类型</strong>不同的<strong>函数</strong>；</p></blockquote><blockquote><p>类模板针对仅<strong>数据成员</strong>和<strong>成员函数类型</strong>不同的类。</p></blockquote><blockquote><p>**使用模板的目的就是能够让程序员编写与类型无关的代码。**比如编写了一个交换两个整型int</p></blockquote><blockquote><p>类型的swap函数，这个函数就只能实现<strong>int</strong></p></blockquote><blockquote><p>型，对<strong>double</strong>，字符这些类型无法实现，要实现这些类型的交换就要重新编写另一个<strong>swap</strong>函数。使用模板的目的就是<br />要让这程序的实现与类型无关，比如一个<strong>swap</strong>模板函数，即可以实现<strong>int</strong></p></blockquote><blockquote><p>型，又可以实现double型的交换。模板可以应用于函数和类。下面分别介绍。</p></blockquote><blockquote><p><strong>注意：模板的声明或定义只能在全局，命名空间或类范围内进行。即不能在局部范围，函数内进行，比如不能在main函数中<br />声明或定义一个模板。</strong></p></blockquote><p><strong>具体的请看------------------------------------&gt;</strong>[点我点我!](<a href="http://www" target="_blank" rel="noopener">http://www</a>.<br /><a href="http://cnblogs.com/gw811/archive/2012/10/25/2736224.html" target="_blank" rel="noopener">cnblogs.com/gw811/archive/2012/10/25/2736224.html</a>)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">在此就不多讲了。</span><br><span class="line"></span><br><span class="line">C++<span class="built_in">vector</span>函数:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span>:</span></span><br><span class="line"><span class="function"></span></span><br><span class="line">作用：获取vector大小。</span><br><span class="line"></span><br><span class="line">resize(<span class="keyword">int</span> x)</span><br><span class="line"></span><br><span class="line">作用：变长为x。</span><br><span class="line"></span><br><span class="line">clear()</span><br><span class="line"></span><br><span class="line">作用：清空<span class="built_in">vector</span>。</span><br><span class="line"></span><br><span class="line">push_back(),pop_back():</span><br><span class="line"></span><br><span class="line">栈操作。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>                 <span class="comment">// 创建一个空的vector。</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span> <span class="title">c1</span><span class="params">(c2)</span>          <span class="comment">// 复制一个vector</span></span></span><br><span class="line"><span class="function"><span class="built_in">vector</span> <span class="title">c</span><span class="params">(n)</span>            <span class="comment">// 创建一个vector，含有n个数据，数据均已缺省构造产生</span></span></span><br><span class="line"><span class="function"><span class="built_in">vector</span> <span class="title">c</span><span class="params">(n, elem)</span>      <span class="comment">// 创建一个含有n个elem拷贝的vector</span></span></span><br><span class="line"><span class="function"><span class="built_in">vector</span> <span class="title">c</span><span class="params">(beg,end)</span>      <span class="comment">// 创建一个含有n个elem拷贝的vector</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line">1. 析构函数</span><br><span class="line">c.~<span class="built_in">vector</span> ()           <span class="comment">// 销毁所有数据，释放内存</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 成员函数</span><br><span class="line">c.assign(beg,end)c.assign(n,elem)</span><br><span class="line">　　将[beg; end)区间中的数据赋值给c。将n个elem的拷贝赋值给c。</span><br><span class="line">c.at(idx)</span><br><span class="line">　　传回索引idx所指的数据，如果idx越界，抛出out_of_range。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c.back()      <span class="comment">// 传回最后一个数据，不检查这个数据是否存在。</span></span><br><span class="line">c.begin()     <span class="comment">// 传回迭代器中的第一个数据地址。</span></span><br><span class="line">c.capacity()  <span class="comment">// 返回容器中数据个数。</span></span><br><span class="line">c.clear()     <span class="comment">// 移除容器中所有数据。</span></span><br><span class="line">c.empty()     <span class="comment">// 判断容器是否为空。</span></span><br><span class="line">c.end()       <span class="comment">// 指向迭代器中末端元素的下一个，指向一个不存在元素。</span></span><br><span class="line">c.erase(pos)  <span class="comment">// 删除pos位置的数据，传回下一个数据的位置。</span></span><br><span class="line">c.erase(beg,end)  <span class="comment">//删除[beg,end)区间的数据，传回下一个数据的位置。</span></span><br><span class="line">c.front()     <span class="comment">// 传回第一个数据。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">get_allocator <span class="comment">// 使用构造函数返回一个拷贝。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c.insert(pos,elem)    <span class="comment">// 在pos位置插入一个elem拷贝，传回新数据位置。</span></span><br><span class="line">c.insert(pos,n,elem)  <span class="comment">// 在pos位置插入n个elem数据。无返回值。</span></span><br><span class="line">c.insert(pos,beg,end) <span class="comment">// 在pos位置插入在[beg,end)区间的数据。无返回值。</span></span><br><span class="line">　　</span><br><span class="line">c.max_size()       <span class="comment">// 返回容器中最大数据的数量。</span></span><br><span class="line">c.pop_back()       <span class="comment">// 删除最后一个数据。</span></span><br><span class="line">c.push_back(elem)  <span class="comment">// 在尾部加入一个数据。</span></span><br><span class="line">c.rbegin()         <span class="comment">// 传回一个逆向队列的第一个数据。</span></span><br><span class="line">c.rend()           <span class="comment">// 传回一个逆向队列的最后一个数据的下一个位置。</span></span><br><span class="line">c.resize(num)      <span class="comment">// 重新指定队列的长度。</span></span><br><span class="line">c.reserve()        <span class="comment">// 保留适当的容量。</span></span><br><span class="line">c.size()           <span class="comment">// 返回容器中实际数据的个数。</span></span><br><span class="line">c1.swap(c2)</span><br><span class="line">swap(c1,c2)        <span class="comment">// 将c1和c2元素互换。同上操作。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">operator</span>[]         <span class="comment">// 返回容器中指定位置的一个引用。</span></span><br></pre></td></tr></table></figure><p><strong>举个例子吧！</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">    s.resize(<span class="number">10</span>);            <span class="comment">//变长为10</span></span><br><span class="line">    s[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    s[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">    s[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">    s[<span class="number">3</span>] = <span class="number">4</span>;</span><br><span class="line">    s[<span class="number">4</span>] = <span class="number">5</span>;</span><br><span class="line">    s[<span class="number">5</span>] = <span class="number">6</span>;</span><br><span class="line">    s[<span class="number">6</span>] = <span class="number">7</span>;</span><br><span class="line">    s[<span class="number">7</span>] = <span class="number">8</span>;</span><br><span class="line">    s[<span class="number">8</span>] = <span class="number">9</span>;</span><br><span class="line">    s[<span class="number">9</span>] = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"vector:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i = s.cbegin(); i != s.cend(); i++)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *i &lt;&lt; <span class="string">"  "</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n栈操作push_back加入18\n"</span>;</span><br><span class="line">    s.push_back(<span class="number">18</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i = s.cbegin(); i != s.cend(); i++)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *i &lt;&lt; <span class="string">"  "</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n栈操作push_back加入19\n"</span>;</span><br><span class="line">    s.push_back(<span class="number">19</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i = s.cbegin(); i != s.cend(); i++)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *i &lt;&lt; <span class="string">"  "</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n栈操作pop_back放走了最后的元素:\n"</span>;</span><br><span class="line">    s.pop_back();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i = s.cbegin(); i != s.cend(); i++)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *i &lt;&lt; <span class="string">"  "</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n操作erase(s.begin+3):\n"</span>;</span><br><span class="line">    s.erase(s.begin()+<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i = s.cbegin(); i != s.cend(); i++)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *i &lt;&lt; <span class="string">"  "</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行截图：</p><p><img src="Pictures/10000201000002DA000001DE39091E0CCD706666.png" alt="" /></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是我第一次写博客，请多指教！&lt;/p&gt;
&lt;p&gt;vector是一种向量容器，说白了就是可以改变大小的数组。&lt;/p&gt;
&lt;p&gt;vector是一个模板类，如果直接这样会报错：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt; a; &lt;span class=&quot;comment&quot;&gt;//报错，因为要指定模板。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;需要像这样：&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="心得分享" scheme="https://0a1v37.coding-pages.com/tags/%E5%BF%83%E5%BE%97%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>归并排序逆序对+快读</title>
    <link href="https://0a1v37.coding-pages.com/2020/04/09/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E9%80%86%E5%BA%8F%E5%AF%B9-%E5%BF%AB%E8%AF%BB/"/>
    <id>https://0a1v37.coding-pages.com/2020/04/09/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E9%80%86%E5%BA%8F%E5%AF%B9-%E5%BF%AB%E8%AF%BB/</id>
    <published>2020-04-09T06:57:43.000Z</published>
    <updated>2020-04-09T07:52:39.070Z</updated>
    
    <content type="html"><![CDATA[<h2 id="归并排序原理"><a class="markdownIt-Anchor" href="#归并排序原理"></a> 归并排序原理</h2><p><img src="https://img2018.cnblogs.com/blog/1653262/202001/1653262-20200123085200050-668412306.png" alt="" /><br />先对源数组拆拆拆！拆成最小的<strong>单个元素</strong>，再分别合并，合并时保证两数组有序（单元素有序，尽管非常平凡），<br />然后再一路合并下去，就得到有序的大数组了。<br />这种思想叫分治，就是&quot;<strong>分而治之</strong>&quot;</p><p>归并排序模版</p><a id="more"></a><p><em>使用前须将cnt置为0</em></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> *A,<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> *T,<span class="keyword">int</span> &amp;cnt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(y-x&gt;<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> m = x+(y-x)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> p = x,q = m,i = x;</span><br><span class="line">merge_sort(A,x,m,T,cnt);</span><br><span class="line">merge_sort(A,m,y,T,cnt);</span><br><span class="line">                <span class="comment">//此时左半右半都有序</span></span><br><span class="line"><span class="keyword">while</span>(p&lt;m || q&lt;y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(q &gt;= y || (p&lt;m &amp;&amp; A[p]&lt;=A[q])) T[i++] = A[p++];</span><br><span class="line"><span class="keyword">else</span> &#123;T[i++] = A[q++];cnt += m - p; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = x;i &lt; y;i++)A[i] = T[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="逆序对解释"><a class="markdownIt-Anchor" href="#逆序对解释"></a> 逆序对解释：</h3><p>因为数组是从小到大复制的，从<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo stretchy="false">[</mo><mi>q</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">A[q]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">A</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mclose">]</span></span></span></span>复制到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">T[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span>时，<strong>左边还没来得及复制的那一些元素</strong>就是左边所有比<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo stretchy="false">[</mo><mi>q</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">A[q]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">A</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mclose">]</span></span></span></span>大的数，此时只需要在**左边加上<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mo>−</mo><mi>p</mi></mrow><annotation encoding="application/x-tex">m-p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span></span></span></span>**即可。</p><p>###快读模版</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>,f = <span class="number">1</span>;<span class="keyword">char</span> c = getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))&#123;<span class="keyword">if</span>(c==<span class="string">'-'</span>)f=<span class="number">-1</span>;<span class="keyword">else</span> f=<span class="number">1</span>;c=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))&#123;x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>);c=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write_num</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&gt;<span class="number">9</span>)write_num(x/<span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>((x%<span class="number">10</span>)+<span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x &lt; <span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">write_num(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="test"><a class="markdownIt-Anchor" href="#test"></a> test</h3><p>####以下便是完整的代码~~，欢迎拍砖~~</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn],t[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> *A,<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> *T,<span class="keyword">int</span> &amp;cnt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(y-x&gt;<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> m = x+(y-x)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> p = x,q = m,i = x;</span><br><span class="line">merge_sort(A,x,m,T,cnt);</span><br><span class="line">merge_sort(A,m,y,T,cnt);</span><br><span class="line"><span class="keyword">while</span>(p&lt;m || q&lt;y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(q &gt;= y || (p&lt;m &amp;&amp; A[p]&lt;=A[q])) T[i++] = A[p++];</span><br><span class="line"><span class="keyword">else</span> &#123;T[i++] = A[q++];cnt += m - p; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = x;i &lt; y;i++)A[i] = T[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>,f = <span class="number">1</span>;<span class="keyword">char</span> c = getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))&#123;<span class="keyword">if</span>(c==<span class="string">'-'</span>)f=<span class="number">-1</span>;<span class="keyword">else</span> f=<span class="number">1</span>;c=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))&#123;x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>);c=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write_num</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&gt;<span class="number">9</span>)write_num(x/<span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>((x%<span class="number">10</span>)+<span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x &lt; <span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">write_num(x);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = read(),cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">a[i] = read();</span><br><span class="line">merge_sort(a,<span class="number">0</span>,n,t,cnt);</span><br><span class="line">write(cnt),<span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">write(a[i]),<span class="built_in">putchar</span>(<span class="string">' '</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;归并排序原理&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#归并排序原理&quot;&gt;&lt;/a&gt; 归并排序原理&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1653262/202001/1653262-20200123085200050-668412306.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
先对源数组拆拆拆！拆成最小的&lt;strong&gt;单个元素&lt;/strong&gt;，再分别合并，合并时保证两数组有序（单元素有序，尽管非常平凡），&lt;br /&gt;
然后再一路合并下去，就得到有序的大数组了。&lt;br /&gt;
这种思想叫分治，就是&amp;quot;&lt;strong&gt;分而治之&lt;/strong&gt;&amp;quot;&lt;/p&gt;
&lt;p&gt;归并排序模版&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="心得分享" scheme="https://0a1v37.coding-pages.com/tags/%E5%BF%83%E5%BE%97%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>JC1 排序模拟枚举</title>
    <link href="https://0a1v37.coding-pages.com/2020/04/09/JC1/"/>
    <id>https://0a1v37.coding-pages.com/2020/04/09/JC1/</id>
    <published>2020-04-09T06:55:28.149Z</published>
    <updated>2020-04-09T12:34:21.804Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1排序模拟枚举"><a class="markdownIt-Anchor" href="#1排序模拟枚举"></a> 1.排序模拟枚举</h1><h2 id="复杂度"><a class="markdownIt-Anchor" href="#复杂度"></a> 复杂度</h2><ul><li>一般（最坏）复杂度 ：记号为 O(……)<br />均摊复杂度 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mspace width="2em"/><mspace width="1em"/><mtext> </mtext></mrow><annotation encoding="application/x-tex">\qquad\quad\,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span></span></span></span> ：记号为 Θ(……),但一般写成O(……)</li><li>约定<ol><li>省略系数O(100n)=O(10n)=O(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>1</mn><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>n)=O(n).</li><li>log底数省略</li></ol></li></ul><a id="more"></a><h2 id="排序"><a class="markdownIt-Anchor" href="#排序"></a> 排序</h2><ul><li>选择排序<br />这个大家都会，就不详细解释了 <s>（逃</s></li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9mb3J1bS5taWFuYmFvYmFuLmNuL2RhdGEvYXR0YWNobWVudC9mb3J1bS8yMDE4MDMvMjAvMTQwMTU0ajBjaThuOW52dm4zNTNuMC5naWY" alt="选择" title="选择排序" /></p><ul><li>插入排序</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9mb3J1bS5taWFuYmFvYmFuLmNuL2RhdGEvYXR0YWNobWVudC9mb3J1bS8yMDE4MDMvMjAvMTQwMTU1aDBhdDEzMWZrejMzajFhZi5naWY" alt="插入" title="插入" /></p><ul><li>冒泡排序</li></ul><p><img src="https://images2018.cnblogs.com/blog/1391679/201806/1391679-20180618163321525-1936669878.gif" alt="冒泡" title="冒泡排序" /></p><ul><li><p>归并排序</p><p>详情请见<a href="https://www.cnblogs.com/lhy-cblog/p/merge-sort.html" target="_blank" rel="noopener">点我</a></p></li></ul><p><img src="https://img2018.cnblogs.com/blog/1653262/202001/1653262-20200123085200050-668412306.png" alt="归并1" title="归并1" /></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9mb3J1bS5taWFuYmFvYmFuLmNuL2RhdGEvYXR0YWNobWVudC9mb3J1bS8yMDE4MDMvMjAvMTQwMTU3Z2tybmtrc3BwcG90b3Jrcy5naWY" alt="归并2" title="归并2" /></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ms</span><span class="params">(<span class="keyword">int</span> b, <span class="keyword">int</span> e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(e-b &lt;= <span class="number">0</span>) <span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">int</span> m = (b + e) / <span class="number">2</span>, p1 = b, p2 = m+<span class="number">1</span>,   i = b;</span><br><span class="line">ms(b, m); ms(m+<span class="number">1</span>, e);</span><br><span class="line"><span class="keyword">while</span>(p1 &lt;= m || p2 &lt;= e)</span><br><span class="line"><span class="keyword">if</span>(p2 &gt; e || (p1 &lt;= m &amp;&amp; a[p1] &lt;= a [p2]))</span><br><span class="line">t[i++] = a[p1++];</span><br><span class="line"><span class="keyword">else</span> t[i++] = a[p2++];</span><br><span class="line"><span class="keyword">for</span>(i = b; i &lt;= e; ++i) a[i] = t[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>快速排序</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">Sort</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i  = l, j = r, x = a[(l + r)/ <span class="number">2</span>];</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(a[i] &lt; x) ++i; <span class="keyword">while</span>(a[j] &gt; x) --j;</span><br><span class="line"><span class="keyword">if</span>(i &lt;= j) swap(a[i++], a[j--]);</span><br><span class="line">&#125;<span class="keyword">while</span>(i &lt; j);</span><br><span class="line"><span class="keyword">if</span>(i &lt; r) Sort(i, r); <span class="keyword">if</span>(j &gt; l) Sort(l, j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模拟"><a class="markdownIt-Anchor" href="#模拟"></a> 模拟</h2><p>模拟，顾名思义，就是题目让你干嘛你就干嘛。</p><h3 id="例题-校门外的树"><a class="markdownIt-Anchor" href="#例题-校门外的树"></a> 例题 校门外的树</h3><p><img src="https://img2018.cnblogs.com/blog/1653262/202001/1653262-20200130133815952-2119019624.png" alt="" /></p><p>思路：可以建一个数组，保存地铁每一个位置的情况，每次输入l,r，就把这个数组[l,r]部分都变成1，最后再统计有多少0即可</p><p>代码如下（勿喷）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10010</span>;</span><br><span class="line"><span class="keyword">int</span> tree[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> l,m,b,e,ans = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;l&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;b&gt;&gt;e;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = b;j &lt;= e;j++)</span><br><span class="line">tree[j] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= l;i++)</span><br><span class="line">ans+=!tree[i];</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="枚举"><a class="markdownIt-Anchor" href="#枚举"></a> 枚举</h2><p>枚举，顾名思义，就是把所有可能的情况都试一遍直到找到正确的答案。</p><h3 id="例题-p1219-八皇后"><a class="markdownIt-Anchor" href="#例题-p1219-八皇后"></a> 例题 P1219 八皇后</h3><p>【题目描述】</p><p>一个如下的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>6</mn><mo>×</mo><mn>6</mn></mrow><annotation encoding="application/x-tex">6×6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">6</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span></span></span></span> 的跳棋棋盘，有六个棋子被放置在棋盘上，使得每行、每列有且只有一个，每条对角线（包括两条主对角线的所有平行线）上至多有一个棋子。<br /><img src="https://cdn.luogu.com.cn/upload/pic/60.png" alt="" /><br />上面的布局可以用序列<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mtext> </mtext><mn>4</mn><mtext> </mtext><mn>6</mn><mtext> </mtext><mn>1</mn><mtext> </mtext><mn>3</mn><mtext> </mtext><mn>5</mn></mrow><annotation encoding="application/x-tex">2\ 4\ 6\ 1\ 3\ 5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace"> </span><span class="mord">4</span><span class="mspace"> </span><span class="mord">6</span><span class="mspace"> </span><span class="mord">1</span><span class="mspace"> </span><span class="mord">3</span><span class="mspace"> </span><span class="mord">5</span></span></span></span>来描述，第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 个数字表示在第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 行的相应位置有一个棋子，如下：</p><p>行号 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mtext> </mtext><mn>2</mn><mtext> </mtext><mn>3</mn><mtext> </mtext><mn>4</mn><mtext> </mtext><mn>5</mn><mtext> </mtext><mn>6</mn></mrow><annotation encoding="application/x-tex">1\ 2\ 3\ 4\ 5\ 6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace"> </span><span class="mord">2</span><span class="mspace"> </span><span class="mord">3</span><span class="mspace"> </span><span class="mord">4</span><span class="mspace"> </span><span class="mord">5</span><span class="mspace"> </span><span class="mord">6</span></span></span></span></p><p>列号 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mtext> </mtext><mn>4</mn><mtext> </mtext><mn>6</mn><mtext> </mtext><mn>1</mn><mtext> </mtext><mn>3</mn><mtext> </mtext><mn>5</mn></mrow><annotation encoding="application/x-tex">2\ 4\ 6\ 1\ 3\ 5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace"> </span><span class="mord">4</span><span class="mspace"> </span><span class="mord">6</span><span class="mspace"> </span><span class="mord">1</span><span class="mspace"> </span><span class="mord">3</span><span class="mspace"> </span><span class="mord">5</span></span></span></span></p><p>这只是棋子放置的一个解。请编一个程序找出所有棋子放置的解。<br />并把它们以上面的序列方法输出，解按字典顺序排列。<br />请输出前 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn></mrow><annotation encoding="application/x-tex">3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span> 个解。最后一行是解的总个数。<br />【输入格式】<br />一行一个正整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>，表示棋盘是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>×</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">n \times n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 大小的。<br />【输出格式】<br />前三行为前三个解，每个解的两个数字之间用一个空格隔开。第四行只有一个数字，表示解的总数。<br />输入输出样例</p><h3 id="输入-1-qquadqquadqquad-输出-1"><a class="markdownIt-Anchor" href="#输入-1-qquadqquadqquad-输出-1"></a> 输入 #1  <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mspace width="2em"/><mspace width="2em"/><mspace width="2em"/></mrow><annotation encoding="application/x-tex">\qquad\qquad\qquad</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span></span></span></span> 输出 #1</h3><p>6  <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mspace width="2em"/><mspace width="2em"/><mspace width="2em"/><mspace width="2em"/><mspace width="2em"/><mspace width="2em"/><mspace width="1em"/></mrow><annotation encoding="application/x-tex">\qquad\qquad\qquad\qquad\qquad\qquad\quad</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:1em;"></span></span></span></span> 2 4 6 1 3 5<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mspace width="1em"/><mspace width="2em"/><mspace width="2em"/><mspace width="2em"/><mspace width="2em"/><mspace width="2em"/><mspace width="2em"/><mspace width="1em"/></mrow><annotation encoding="application/x-tex">\quad\qquad\qquad\qquad\qquad\qquad\qquad\quad</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:1em;"></span></span></span></span> 3 6 2 5 1 4<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mspace width="1em"/><mspace width="2em"/><mspace width="2em"/><mspace width="2em"/><mspace width="2em"/><mspace width="2em"/><mspace width="2em"/><mspace width="1em"/></mrow><annotation encoding="application/x-tex">\quad\qquad\qquad\qquad\qquad\qquad\qquad\quad</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:1em;"></span></span></span></span> 4 1 5 2 6 3<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mspace width="1em"/><mspace width="2em"/><mspace width="2em"/><mspace width="2em"/><mspace width="2em"/><mspace width="2em"/><mspace width="2em"/><mspace width="1em"/></mrow><annotation encoding="application/x-tex">\quad\qquad\qquad\qquad\qquad\qquad\qquad\quad</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:1em;"></span></span></span></span> 4</p><p>【数据范围】<br />对于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>100</mn><mi mathvariant="normal">%</mi></mrow><annotation encoding="application/x-tex">100\%</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80556em;vertical-align:-0.05556em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">%</span></span></span></span> 的数据，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>6</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>136</mn></mrow><annotation encoding="application/x-tex">6 \leq n \leq 136</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">6</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">3</span><span class="mord">6</span></span></span></span></p><p>USACO Training Section 1.5</p><p>代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> tot = <span class="number">0</span>,n;</span><br><span class="line"><span class="keyword">int</span> C[<span class="number">10000</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">10000</span>][<span class="number">10000</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span> cur)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (cur == n)</span><br><span class="line">&#123;</span><br><span class="line">tot++;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">&#123;</span><br><span class="line">v.push_back(C[i]);</span><br><span class="line">&#125;</span><br><span class="line">ans.push_back(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!vis[<span class="number">0</span>][i] &amp;&amp; !vis[<span class="number">1</span>][cur + i] &amp;&amp; !vis[<span class="number">2</span>][cur - i + n])</span><br><span class="line">&#123;</span><br><span class="line">C[cur] = i;</span><br><span class="line">vis[<span class="number">0</span>][i] = vis[<span class="number">1</span>][cur + i] = vis[<span class="number">2</span>][cur - i + n] = <span class="number">1</span>;</span><br><span class="line">search(cur + <span class="number">1</span>);</span><br><span class="line">vis[<span class="number">0</span>][i] = vis[<span class="number">1</span>][cur + i] = vis[<span class="number">2</span>][cur - i + n] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; a, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.size() &amp;&amp; i &lt; b.size(); ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[i] != b[i])<span class="keyword">return</span> a[i] &lt; b[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a.size() &lt; b.size();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">search(<span class="number">0</span>);</span><br><span class="line">sort(ans.begin(), ans.end(), cmp);</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;::iterator it1 = ans.begin(); it1 != ans.end(); it1++,i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!(i &lt; <span class="number">3</span>))<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it2 = it1-&gt;begin(); it2 != it1-&gt;end(); it2++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (*it2)+<span class="number">1</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; tot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1排序模拟枚举&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1排序模拟枚举&quot;&gt;&lt;/a&gt; 1.排序模拟枚举&lt;/h1&gt;
&lt;h2 id=&quot;复杂度&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#复杂度&quot;&gt;&lt;/a&gt; 复杂度&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一般（最坏）复杂度 ：记号为 O(……)&lt;br /&gt;
均摊复杂度 &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mspace width=&quot;2em&quot;/&gt;&lt;mspace width=&quot;1em&quot;/&gt;&lt;mtext&gt; &lt;/mtext&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\qquad\quad\,&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:2em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:1em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.16666666666666666em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; ：记号为 Θ(……),但一般写成O(……)&lt;/li&gt;
&lt;li&gt;约定
&lt;ol&gt;
&lt;li&gt;省略系数O(100n)=O(10n)=O(&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mfrac&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/mfrac&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\frac{1}{2}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:1.190108em;vertical-align:-0.345em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mopen nulldelimiter&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mfrac&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.845108em;&quot;&gt;&lt;span style=&quot;top:-2.6550000000000002em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;top:-3.23em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;frac-line&quot; style=&quot;border-bottom-width:0.04em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;top:-3.394em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.345em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mclose nulldelimiter&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;n)=O(n).&lt;/li&gt;
&lt;li&gt;log底数省略&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="洛谷笔记" scheme="https://0a1v37.coding-pages.com/tags/%E6%B4%9B%E8%B0%B7%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>JC2 递推，递归与分治</title>
    <link href="https://0a1v37.coding-pages.com/2020/04/09/JC2/"/>
    <id>https://0a1v37.coding-pages.com/2020/04/09/JC2/</id>
    <published>2020-04-09T06:54:10.982Z</published>
    <updated>2020-04-09T07:52:57.902Z</updated>
    
    <content type="html"><![CDATA[<p><strong>递推，递归与分治</strong></p><p><strong>递推</strong></p><ol><li>什么是递推</li></ol><blockquote><p>递推，就是从小的解开始，一步一步推到最优解的过程。</p></blockquote><ol start="2"><li>如何递推</li></ol><a id="more"></a><blockquote><p>这就要看具体情况，想出递推式，然后一步一步递推即可。</p></blockquote><ol start="3"><li>递推如何应用</li></ol><blockquote><p>讲这个之前，我们不妨先讲一讲递推如何具体实现。</p><p>第一步是先<strong>初始化</strong>。切记！</p><p>有两种表示方法：</p></blockquote><ul><li><p>数组递推法，如 f[i] = f[i-1]+f[i-2];</p></li><li><p>记忆化搜索，若冗余状态比较多则需要记忆化，否则直接调用即可。注意递归的结束，否则MLE或TLE后果自负。</p></li></ul><blockquote><p>那么，什么是冗余状态呢？</p><p><img src="https://tvax4.sinaimg.cn/large/006XR1Pfly1gdnip7eoy5j30m30e775x.jpg" alt="" />{width=“5.768055555555556in”<br />height=“3.7069444444444444in”}</p><p>这是一个关于f(5)的解答树，可以看见，红色的都是被重复计算的，很多节点被重复计算了多次，若数比较大，重复计算的可不止这几个，而是一颗巨大的子树。</p><p>那么，没有记忆化的f究竟有多慢呢？</p><p>我们可以做一个测试。</p><p>代码如下：</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">1</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> f(i<span class="number">-1</span>)+f(i<span class="number">-2</span>) % <span class="number">233333333</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;f(i)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"时间:"</span>&lt;&lt;clock()/<span class="keyword">double</span>(CLOCKS_PER_SEC);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><ol><li><img src="https://tva1.sinaimg.cn/large/006XR1Pfly1gdnip7mnotj30bb084ab5.jpg" alt="" /><img src="https://tva4.sinaimg.cn/large/006XR1Pfly1gdnip7qj0bj303709gjsj.jpg" alt="" /></li></ol><blockquote><p>左图是笔者的vim截图，右图时代码在笔者机器上面的运行结果。</p><p>可以看出，速度的增长是指数级的。</p><p></p><p>我们在计算时用数组记录已经算出的结果，就是记忆化搜索的核心思想。</p><p>但是，如果冗余状态比较少，或者没有，我们也可以不用记忆化。就像我们计算阶乘时，,很容易可以看出，每个状态只由前一个推出，所以，每个状态只被计算了一次。</p></blockquote><p><strong>递归</strong></p><p>这个其实不用多说递归就是递推和回归，记忆化搜索就是递归的过程。</p><p><strong>我们来看一个类似递归的故事：</strong></p><ol><li><p>皇帝要计算f(5)（就是5!）.</p></li><li><p>皇帝问大臣:f(4)=?</p></li><li><p>大臣问师公:f(3)=?</p></li><li><p>师公问先生:f(2)=?</p></li><li><p>先生问小学生:f(1)=?</p></li><li><p>小学生口算:f(1)=1</p></li><li><p>先生口算:f(2)=2</p></li><li><p>师公口算:f(3)=6</p></li><li><p>大臣口算:f(4)=24</p></li><li><p>皇帝口算:f(5)=120</p></li></ol><p>皇帝满意了。<br />虽然这个比喻不是特别恰当，但是也能说明一些事情。</p><p>根据C++语言的特性，调用自己和调用其他函数并没有任何区别，都是压栈并修改当前代码行。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;递推，递归与分治&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;递推&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;什么是递推&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;递推，就是从小的解开始，一步一步推到最优解的过程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;如何递推&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="洛谷笔记" scheme="https://0a1v37.coding-pages.com/tags/%E6%B4%9B%E8%B0%B7%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>TG1 基础数据结构</title>
    <link href="https://0a1v37.coding-pages.com/2020/04/09/TG1/"/>
    <id>https://0a1v37.coding-pages.com/2020/04/09/TG1/</id>
    <published>2020-04-09T05:41:52.781Z</published>
    <updated>2020-04-09T07:53:01.893Z</updated>
    
    <content type="html"><![CDATA[<style>body{font-family:"Ubuntu Mono";}</style><blockquote><p>约定：本文的下标从1开始，代码尽量从1开始（我在努力习惯），一般使用<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>LaTeX</mtext></mrow><annotation encoding="application/x-tex">\LaTeX</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.89883em;vertical-align:-0.2155em;"></span><span class="mord text"><span class="mord textrm">L</span><span class="mspace" style="margin-right:-0.36em;"></span><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.68333em;"><span style="top:-2.904999em;"><span class="pstrut" style="height:2.7em;"></span><span class="mord text"><span class="mord textrm sizing reset-size6 size3">A</span></span></span></span></span></span><span class="mspace" style="margin-right:-0.15em;"></span><span class="mord text"><span class="mord textrm">T</span><span class="mspace" style="margin-right:-0.1667em;"></span><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.46782999999999997em;"><span style="top:-2.7845em;"><span class="pstrut" style="height:3em;"></span><span class="mord text"><span class="mord textrm">E</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2155em;"><span></span></span></span></span><span class="mspace" style="margin-right:-0.125em;"></span><span class="mord textrm">X</span></span></span></span></span></span>美化</p></blockquote><p>这一节主要介绍了一些基础的数据结构 <s>（废话）</s>，前缀和，差分，二分查找，离散化，ST表，线段树等。</p><p>来给大家一一介绍一下</p><a id="more"></a><h1 id="center前缀和center"><a class="markdownIt-Anchor" href="#center前缀和center"></a> <center>前缀和</center></h1><h2 id="求解问题"><a class="markdownIt-Anchor" href="#求解问题"></a> 求解问题:</h2><p>给你一个数组<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>次询问，每次输入<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mo separator="true">,</mo><mi>r</mi></mrow><annotation encoding="application/x-tex">l,r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span>,求<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mi>l</mi></mrow><mi>r</mi></msubsup><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">\sum\limits_{i=l}^ra[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.35351em;vertical-align:-1.002113em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.351397em;"><span style="top:-2.097887em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span><span style="top:-3.000005em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop op-symbol small-op">∑</span></span></span><span style="top:-3.950005em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.002113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span> <s>(就是a[l…r]的和)</s>。</p><h2 id="基本思想"><a class="markdownIt-Anchor" href="#基本思想"></a> 基本思想:</h2><p>计算数组<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span>，对于每一个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">b[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span>,值就是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>i</mi></msubsup><mi>a</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">\sum\limits_{j=1}^ia[j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.625446em;vertical-align:-1.113777em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5116690000000004em;"><span style="top:-2.122331em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0000050000000003em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop op-symbol small-op">∑</span></span></span><span style="top:-3.950005em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.113777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span>.<br />对于每次的l,r询问，答案就是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><mo stretchy="false">[</mo><mi>r</mi><mo stretchy="false">]</mo><mo>−</mo><mi>b</mi><mo stretchy="false">[</mo><mi>l</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">b[r]-b[l-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>.</p><p> 问题来了：如何快速计算<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><mo stretchy="false">?</mo></mrow><annotation encoding="application/x-tex">b?</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mclose">?</span></span></span></span></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">b[i] = a[i] + b[i<span class="number">-1</span>];</span><br></pre></td></tr></table></figure><p> 我们只需要将前缀和累加即可。</p><p> 如果我们不需要原来的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span>了，这样写代码可以减少内存的浪费 <s>（别和我扯空间复杂度）</s>,<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>   </mtext><mstyle mathcolor="red"><mtext>注意,a[0]一定要=0！</mtext></mstyle></mrow><annotation encoding="application/x-tex">\ \ \ \text{\color{red}注意,a[0]一定要=0！}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mord text"><span class="mord cjk_fallback" style="color:red;">注意</span><span class="mord" style="color:red;">,a[0]</span><span class="mord cjk_fallback" style="color:red;">一定要</span><span class="mord" style="color:red;">=0</span><span class="mord cjk_fallback" style="color:red;">！</span></span></span></span></span></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">a[i] += a[i<span class="number">-1</span>];</span><br></pre></td></tr></table></figure><h1 id="center差分center"><a class="markdownIt-Anchor" href="#center差分center"></a> <center>差分</center></h1><h2 id="求解问题-2"><a class="markdownIt-Anchor" href="#求解问题-2"></a> 求解问题:</h2><p> 给定一个数组<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>次操作,每次给定<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mo separator="true">,</mo><mi>r</mi><mo separator="true">,</mo><mi>v</mi></mrow><annotation encoding="application/x-tex">l,r,v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>,使区间a[l,r]都加上v.输出最后的数组</p><p>差分其实就是前缀和的逆运算（可以这样理解），计算差分和计算前缀和一样简单：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mspace linebreak="newline"></mspace><mstyle mathcolor="red"><mtext>注意，像有损前缀和一样的，for语句要倒着写！</mtext><mspace linebreak="newline"></mspace><mstyle mathcolor="black"><mtext>为啥呢？请看下面这个：</mtext><mspace linebreak="newline"></mspace><mi>a</mi><mo>=</mo><mrow><mn>1</mn><mo separator="true">,</mo><mn>9</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>6</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mn>8</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mn>7</mn></mrow><mspace linebreak="newline"></mspace><mtext>我们手玩是这样的（也就是无损的）</mtext><mi>b</mi><mo>=</mo><mrow><mn>1</mn><mo separator="true">,</mo><mn>8</mn><mo separator="true">,</mo><mo>−</mo><mn>7</mn><mo separator="true">,</mo><mn>4</mn><mo separator="true">,</mo><mo>−</mo><mn>5</mn><mo separator="true">,</mo><mn>7</mn><mo separator="true">,</mo><mo>−</mo><mn>7</mn><mo separator="true">,</mo><mn>6</mn></mrow><mspace linebreak="newline"></mspace><mtext>但是如果正着减的话，就会变成这样：</mtext><mspace linebreak="newline"></mspace><mi>a</mi><mo>=</mo><mrow><mn>1</mn><mo separator="true">,</mo><mn>8</mn><mo separator="true">,</mo><mo>−</mo><mn>6</mn><mo separator="true">,</mo><mn>12</mn><mo separator="true">,</mo><mo>−</mo><mn>12</mn><mo separator="true">,</mo><mn>20</mn><mo separator="true">,</mo><mo>−</mo><mn>19</mn><mo separator="true">,</mo><mn>26</mn></mrow><mspace linebreak="newline"></mspace></mstyle></mstyle></mrow><annotation encoding="application/x-tex">\\ \color{red}{\text{注意，像有损前缀和一样的，for语句要倒着写！}}\\\color{black}\text{为啥呢？请看下面这个：}\\a={1,9,2,6,1,8,1,7}\\\text{我们手玩是这样的（也就是无损的）}b={1,8,-7,4,-5,7,-7,6}\\\text{但是如果正着减的话，就会变成这样：}\\a={1,8,-6,12,-12,20,-19,26}\\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord" style="color:red;"><span class="mord text" style="color:red;"><span class="mord cjk_fallback" style="color:red;">注意，像有损前缀和一样的，</span><span class="mord" style="color:red;">for</span><span class="mord cjk_fallback" style="color:red;">语句要倒着写！</span></span></span></span><span class="mspace newline" style="color:red;"></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord text" style="color:black;"><span class="mord cjk_fallback" style="color:black;">为啥呢？请看下面这个：</span></span></span><span class="mspace newline" style="color:black;"></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="color:black;">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel" style="color:black;">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord" style="color:black;"><span class="mord" style="color:black;">1</span><span class="mpunct" style="color:black;">,</span><span class="mspace" style="color:black;margin-right:0.16666666666666666em;"></span><span class="mord" style="color:black;">9</span><span class="mpunct" style="color:black;">,</span><span class="mspace" style="color:black;margin-right:0.16666666666666666em;"></span><span class="mord" style="color:black;">2</span><span class="mpunct" style="color:black;">,</span><span class="mspace" style="color:black;margin-right:0.16666666666666666em;"></span><span class="mord" style="color:black;">6</span><span class="mpunct" style="color:black;">,</span><span class="mspace" style="color:black;margin-right:0.16666666666666666em;"></span><span class="mord" style="color:black;">1</span><span class="mpunct" style="color:black;">,</span><span class="mspace" style="color:black;margin-right:0.16666666666666666em;"></span><span class="mord" style="color:black;">8</span><span class="mpunct" style="color:black;">,</span><span class="mspace" style="color:black;margin-right:0.16666666666666666em;"></span><span class="mord" style="color:black;">1</span><span class="mpunct" style="color:black;">,</span><span class="mspace" style="color:black;margin-right:0.16666666666666666em;"></span><span class="mord" style="color:black;">7</span></span></span><span class="mspace newline" style="color:black;"></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord text" style="color:black;"><span class="mord cjk_fallback" style="color:black;">我们手玩是这样的（也就是无损的）</span></span><span class="mord mathdefault" style="color:black;">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel" style="color:black;">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord" style="color:black;"><span class="mord" style="color:black;">1</span><span class="mpunct" style="color:black;">,</span><span class="mspace" style="color:black;margin-right:0.16666666666666666em;"></span><span class="mord" style="color:black;">8</span><span class="mpunct" style="color:black;">,</span><span class="mspace" style="color:black;margin-right:0.16666666666666666em;"></span><span class="mord" style="color:black;">−</span><span class="mord" style="color:black;">7</span><span class="mpunct" style="color:black;">,</span><span class="mspace" style="color:black;margin-right:0.16666666666666666em;"></span><span class="mord" style="color:black;">4</span><span class="mpunct" style="color:black;">,</span><span class="mspace" style="color:black;margin-right:0.16666666666666666em;"></span><span class="mord" style="color:black;">−</span><span class="mord" style="color:black;">5</span><span class="mpunct" style="color:black;">,</span><span class="mspace" style="color:black;margin-right:0.16666666666666666em;"></span><span class="mord" style="color:black;">7</span><span class="mpunct" style="color:black;">,</span><span class="mspace" style="color:black;margin-right:0.16666666666666666em;"></span><span class="mord" style="color:black;">−</span><span class="mord" style="color:black;">7</span><span class="mpunct" style="color:black;">,</span><span class="mspace" style="color:black;margin-right:0.16666666666666666em;"></span><span class="mord" style="color:black;">6</span></span></span><span class="mspace newline" style="color:black;"></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord text" style="color:black;"><span class="mord cjk_fallback" style="color:black;">但是如果正着减的话，就会变成这样：</span></span></span><span class="mspace newline" style="color:black;"></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="color:black;">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel" style="color:black;">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord" style="color:black;"><span class="mord" style="color:black;">1</span><span class="mpunct" style="color:black;">,</span><span class="mspace" style="color:black;margin-right:0.16666666666666666em;"></span><span class="mord" style="color:black;">8</span><span class="mpunct" style="color:black;">,</span><span class="mspace" style="color:black;margin-right:0.16666666666666666em;"></span><span class="mord" style="color:black;">−</span><span class="mord" style="color:black;">6</span><span class="mpunct" style="color:black;">,</span><span class="mspace" style="color:black;margin-right:0.16666666666666666em;"></span><span class="mord" style="color:black;">1</span><span class="mord" style="color:black;">2</span><span class="mpunct" style="color:black;">,</span><span class="mspace" style="color:black;margin-right:0.16666666666666666em;"></span><span class="mord" style="color:black;">−</span><span class="mord" style="color:black;">1</span><span class="mord" style="color:black;">2</span><span class="mpunct" style="color:black;">,</span><span class="mspace" style="color:black;margin-right:0.16666666666666666em;"></span><span class="mord" style="color:black;">2</span><span class="mord" style="color:black;">0</span><span class="mpunct" style="color:black;">,</span><span class="mspace" style="color:black;margin-right:0.16666666666666666em;"></span><span class="mord" style="color:black;">−</span><span class="mord" style="color:black;">1</span><span class="mord" style="color:black;">9</span><span class="mpunct" style="color:black;">,</span><span class="mspace" style="color:black;margin-right:0.16666666666666666em;"></span><span class="mord" style="color:black;">2</span><span class="mord" style="color:black;">6</span></span></span><span class="mspace newline" style="color:black;"></span></span></span></span></p><ol><li>无损<br /> </li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">b[i] = a[i] - a[i<span class="number">-1</span>];</span><br></pre></td></tr></table></figure><ol start="2"><li>有损<br /> </li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = n;i;i--)</span><br><span class="line">b[i] -= b[i - <span class="number">1</span>];</span><br></pre></td></tr></table></figure><h1 id="center二分查找center"><a class="markdownIt-Anchor" href="#center二分查找center"></a> <center>二分查找</center></h1><h2 id="求解问题-3"><a class="markdownIt-Anchor" href="#求解问题-3"></a> 求解问题</h2><p>求函数零点。</p><h2 id="实现"><a class="markdownIt-Anchor" href="#实现"></a> 实现</h2><p><code>upper_bound</code>和<code>lower_bound</code></p><p><s>非常的简单</s></p><h1 id="center离散化center"><a class="markdownIt-Anchor" href="#center离散化center"></a> <center>离散化</center></h1><h2 id="求解问题-4"><a class="markdownIt-Anchor" href="#求解问题-4"></a> 求解问题</h2><p> 当数很大的时候，我们往往不能直接拿来存数组，这就是离散化的思想了。</p><h2 id="实现-2"><a class="markdownIt-Anchor" href="#实现-2"></a> 实现</h2><h3 id="三部曲"><a class="markdownIt-Anchor" href="#三部曲"></a> 三部曲</h3><ol><li>sort</li><li>unique</li><li>lower_bound 或者 upper_bound</li></ol><h2 id="例题"><a class="markdownIt-Anchor" href="#例题"></a> 例题：</h2><p><a href="https://www.luogu.com.cn/problem/P2070" target="_blank" rel="noopener"><img src="https://img2018.cnblogs.com/blog/1653262/202003/1653262-20200301214437378-935270780.png" alt="" title="点击进入原题" /></a></p><p>其实道理是非常简单的，唯一的问题就是数据范围非常的大，导致无法直接计算。怎么办？<br />这时就可以运用离散化的思想了。</p><blockquote><p>但是，当我们再细细看题的时候： Bessie在她的行走中最远到达距起始点1,000,000,000个单位长度。<br/>我的天！！！这个天才Bessie走这么远，我们要是乖乖开数组的话空间会不够的！！！这时我们又可以从什么方向入手呢？<br/>我们回到我们一开始进行模拟的步骤，如果我们进行以下的移动的话会很简单： 3 R 2 L 3 R</p><table><thead><tr><th style="text-align:center">0</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center">1</td></tr></tbody></table><p>（第一行是位置，第二行是经过次数）但如果变成这样会很麻烦： 1000000 R 500000 L 1000000 R<br />More Actions。。。这个要是要写表格的话会死人的吧；但是这简单来写的话是不是这样呢？</p><table><thead><tr><th style="text-align:right">。。。这个要是要写表格的话会死人的吧；但是这简单来写的话是不是这样呢？</th><th style="text-align:right">0</th><th style="text-align:right">1</th><th style="text-align:right">2</th><th style="text-align:right">3</th><th style="text-align:right">4</th><th style="text-align:right">5</th><th style="text-align:right">6</th><th style="text-align:right">7</th><th style="text-align:right">8</th><th style="text-align:left">9</th></tr></thead><tbody><tr><td style="text-align:right"></td><td style="text-align:right">1</td><td style="text-align:right">1</td><td style="text-align:right">3</td><td style="text-align:right">3</td><td style="text-align:right">3</td><td style="text-align:right">3</td><td style="text-align:right">1</td><td style="text-align:right">1</td><td style="text-align:right">0</td><td style="text-align:left">0</td></tr></tbody></table><table><thead><tr><th style="text-align:right">要是再简单点呢?</th><th style="text-align:right">0</th><th style="text-align:right">1</th><th style="text-align:right">2</th><th style="text-align:right">3</th></tr></thead><tbody><tr><td style="text-align:right"></td><td style="text-align:right">1</td><td style="text-align:right">3</td><td style="text-align:right">3</td><td style="text-align:right">1</td></tr></tbody></table><p align="right"><a href="https://www.luogu.com.cn/blog/uiievoli/solution-p2070" target="_blank" rel="noopener">出处</a></p></blockquote><p>为了锻炼读者的代码阅读能力 <s>（懒）</s>,这个代码不添加任何注释。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn =  <span class="number">2000010</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn],c[maxn],n,sum,ans;</span><br><span class="line"><span class="keyword">int</span> o;<span class="keyword">char</span> p;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Paint</span><span class="params">(<span class="keyword">int</span> ll,<span class="keyword">int</span> rr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> l = lower_bound(b,b+n+<span class="number">1</span>,ll)-b;</span><br><span class="line"><span class="keyword">int</span> r = lower_bound(b,b+n+<span class="number">1</span>,rr)-b;</span><br><span class="line"><span class="keyword">if</span>(l&gt;r)swap(l,r);</span><br><span class="line">c[l]++;c[r]--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i]&gt;&gt;p;</span><br><span class="line"><span class="keyword">if</span>(p == <span class="string">'L'</span>)a[i]=-a[i];</span><br><span class="line">b[i] = b[i<span class="number">-1</span>] + a[i];</span><br><span class="line">&#125;</span><br><span class="line">sort(b,b+n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> m = unique(b,b+n+<span class="number">1</span>) - b;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">&#123;</span><br><span class="line">Paint(sum,sum+a[i]);</span><br><span class="line">sum+=a[i];</span><br><span class="line">&#125;</span><br><span class="line">sum = c[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(sum &gt; <span class="number">1</span>)ans+=b[i]-b[i<span class="number">-1</span>];</span><br><span class="line">sum+=c[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>离散化，说白了，就是把大数化小数的过程。</p><h1 id="center树状数组center"><a class="markdownIt-Anchor" href="#center树状数组center"></a> <center>树状数组</center></h1><h2 id="先看一道题"><a class="markdownIt-Anchor" href="#先看一道题"></a> 先看一道题:</h2><p><a href="https://www.luogu.com.cn/problem/P3372" target="_blank" rel="noopener"><img src="https://img2018.cnblogs.com/blog/1653262/202003/1653262-20200301221224487-999278411.png" alt="" title="树状数组模板题（名字大艹" /></a></p><h2 id="mathrmquz1何为树状数组"><a class="markdownIt-Anchor" href="#mathrmquz1何为树状数组"></a> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Q</mi><mi mathvariant="normal">u</mi><mi mathvariant="normal">z</mi><mn>1</mn><mo>:</mo><mi mathvariant="normal">何</mi><mi mathvariant="normal">为</mi><mi mathvariant="normal">树</mi><mi mathvariant="normal">状</mi><mi mathvariant="normal">数</mi><mi mathvariant="normal">组</mi></mrow><annotation encoding="application/x-tex">\mathrm{Quz1:何为树状数组}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathrm">Q</span><span class="mord mathrm">u</span><span class="mord mathrm">z</span><span class="mord mathrm">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord cjk_fallback">何</span><span class="mord cjk_fallback">为</span><span class="mord cjk_fallback">树</span><span class="mord cjk_fallback">状</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">组</span></span></span></span></span>？</h2><p>就是没有右儿子的线段树。</p><h2 id="处理的问题"><a class="markdownIt-Anchor" href="#处理的问题"></a> 处理的问题：</h2><ol><li>单点修改，区间查询（比较特殊，最小值：（只能查找左端点在1或者右端点在n的），和：无限制）</li><li>区间修改，单点查询（<s>基础</s>差分技巧）<br />保存差分数组，利用差分技巧加减区间，单点查询就是查前缀和。</li><li>区间修改，区间查询（<s>高级</s>差分技巧）<br />维护两个数组，一个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mn>1</mn></mrow><annotation encoding="application/x-tex">tree1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span><span class="mord">1</span></span></span></span>保存<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>×</mo><mo stretchy="false">(</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">tree[i]\times (i-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>，一个正常保存差分。<br />答案就是：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>y</mi><mo>×</mo><mi>a</mi><mi>s</mi><mi>k</mi><mo stretchy="false">(</mo><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>−</mo><mo stretchy="false">(</mo><mi>x</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>×</mo><mi>a</mi><mi>s</mi><mi>k</mi><mo stretchy="false">(</mo><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mo separator="true">,</mo><mi>x</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>−</mo><mo stretchy="false">(</mo><mi>a</mi><mi>s</mi><mi>k</mi><mo stretchy="false">(</mo><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mn>1</mn><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>−</mo><mi>a</mi><mi>s</mi><mi>k</mi><mo stretchy="false">(</mo><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mn>1</mn><mo separator="true">,</mo><mi>x</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(y \times ask(tree,y)-(x-1)\times ask(tree,x-1))-(ask(tree1,y)-ask(tree1,x-1))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span><br />具体的过程建议自己手推一下，加强记忆哦！</li></ol><h2 id="实现-3"><a class="markdownIt-Anchor" href="#实现-3"></a> 实现:</h2><ol><li>lowbit</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(n) (n&amp;-n)</span></span><br></pre></td></tr></table></figure><ol start="2"><li>单点修改</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = pos;i &lt;= n;i+=i&amp;(-i))</span><br><span class="line">tr[i]+=val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> *tr,<span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = m;i&gt;<span class="number">0</span>;i-=i&amp;(-i))</span><br><span class="line">ans+=tr[i];</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>区间</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> *tr,<span class="keyword">int</span> pos,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = pos;i &lt;= n;i+=i&amp;(-i))</span><br><span class="line">tr[i]+=val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_ran</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">add(t1,l,val);</span><br><span class="line">add(t1,r+<span class="number">1</span>,-val);</span><br><span class="line">add(t2,l,val*(l<span class="number">-1</span>));</span><br><span class="line">add(t2,r+<span class="number">1</span>,-val*r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> *tr,<span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = m;i&gt;<span class="number">0</span>;i-=i&amp;(-i))</span><br><span class="line">ans+=tr[i];</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> r*ask(t1,r)-ask(t2,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_ran</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> sum(r)-sum(l<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="这时候我们已经可以完美的解决问题了就是"><a class="markdownIt-Anchor" href="#这时候我们已经可以完美的解决问题了就是"></a> 这时候我们已经可以完美的解决问题了，就是：</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意要开ll哦！</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> maxn = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n,m,t,l,r,val;<span class="comment">//n个元素,m个询问.</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a,b;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> t1[maxn],t2[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> *tr,<span class="keyword">long</span> <span class="keyword">long</span> pos,<span class="keyword">long</span> <span class="keyword">long</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i = pos;i &lt;= n;i+=i&amp;(-i))</span><br><span class="line">tr[i]+=val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_ran</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> l,<span class="keyword">long</span> <span class="keyword">long</span> r,<span class="keyword">long</span> <span class="keyword">long</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">add(t1,l,val);</span><br><span class="line">add(t1,r+<span class="number">1</span>,-val);</span><br><span class="line">add(t2,l,val*(l<span class="number">-1</span>));</span><br><span class="line">add(t2,r+<span class="number">1</span>,-val*r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">ask</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> *tr,<span class="keyword">long</span> <span class="keyword">long</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i = m;i&gt;<span class="number">0</span>;i-=i&amp;(-i))</span><br><span class="line">ans+=tr[i];</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">sum</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> r*ask(t1,r)-ask(t2,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">get_ran</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> l,<span class="keyword">long</span> <span class="keyword">long</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> sum(r)-sum(l<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a);</span><br><span class="line">b=a-b;<span class="comment">//差分.</span></span><br><span class="line">add(t1,i,b);</span><br><span class="line">add(t2,i,b*(i<span class="number">-1</span>));</span><br><span class="line">b=a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;t);</span><br><span class="line"><span class="keyword">if</span>(t == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>,&amp;l,&amp;r,&amp;val);</span><br><span class="line">add_ran(l,r,val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;l,&amp;r);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,get_ran(l,r));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;style&gt;
body
{
	font-family:&quot;Ubuntu Mono&quot;;
}
&lt;/style&gt;
&lt;blockquote&gt;
&lt;p&gt;约定：本文的下标从1开始，代码尽量从1开始（我在努力习惯），一般使用&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mtext&gt;LaTeX&lt;/mtext&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\LaTeX&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.89883em;vertical-align:-0.2155em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord text&quot;&gt;&lt;span class=&quot;mord textrm&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:-0.36em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;vlist-t&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.68333em;&quot;&gt;&lt;span style=&quot;top:-2.904999em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord text&quot;&gt;&lt;span class=&quot;mord textrm sizing reset-size6 size3&quot;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:-0.15em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord text&quot;&gt;&lt;span class=&quot;mord textrm&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:-0.1667em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.46782999999999997em;&quot;&gt;&lt;span style=&quot;top:-2.7845em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord text&quot;&gt;&lt;span class=&quot;mord textrm&quot;&gt;E&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.2155em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:-0.125em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord textrm&quot;&gt;X&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;美化&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这一节主要介绍了一些基础的数据结构 &lt;s&gt;（废话）&lt;/s&gt;，前缀和，差分，二分查找，离散化，ST表，线段树等。&lt;/p&gt;
&lt;p&gt;来给大家一一介绍一下&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="洛谷笔记" scheme="https://0a1v37.coding-pages.com/tags/%E6%B4%9B%E8%B0%B7%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
